
prj756.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
<<<<<<< HEAD
  1 .text         00004e54  080001c8  080001c8  000101c8  2**2
=======
<<<<<<< HEAD
  1 .text         00004e44  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  0800500c  0800500c  0001500c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800502c  0800502c  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  0800502c  0800502c  0001502c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005034  08005034  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005034  08005034  00015034  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005038  08005038  00015038  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  0800503c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000022c  20000014  08005050  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000240  08005050  00020240  2**0
=======
  1 .text         00004e00  080001c8  080001c8  000101c8  2**2
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  0800501c  0800501c  0001501c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800503c  0800503c  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  0800503c  0800503c  0001503c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005044  08005044  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005044  08005044  00015044  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005048  08005048  00015048  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  0800504c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000230  20000014  08005060  00020014  2**2
                  ALLOC
<<<<<<< HEAD
 10 ._user_heap_stack 00000604  20000244  08005060  00020244  2**0
=======
 10 ._user_heap_stack 00000604  20000244  0800500c  00020244  2**0
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
<<<<<<< HEAD
 13 .debug_info   000113a5  00000000  00000000  00020087  2**0
=======
<<<<<<< HEAD
 13 .debug_info   000113a5  00000000  00000000  00020087  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000023e8  00000000  00000000  0003142c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ee8  00000000  00000000  00033818  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ba9  00000000  00000000  00034700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025b11  00000000  00000000  000352a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012717  00000000  00000000  0005adba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f3f85  00000000  00000000  0006d4d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003e7c  00000000  00000000  00161458  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  001652d4  2**0
=======
 13 .debug_info   00011386  00000000  00000000  00020087  2**0
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000023e8  00000000  00000000  0003142c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ee8  00000000  00000000  00033818  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000baa  00000000  00000000  00034700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025b11  00000000  00000000  000352aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001271a  00000000  00000000  0005adbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f3f89  00000000  00000000  0006d4d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003e7c  00000000  00000000  00161460  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
<<<<<<< HEAD
 21 .debug_line_str 00000061  00000000  00000000  001652dc  2**0
=======
 21 .debug_line_str 00000054  00000000  00000000  00165244  2**0
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000014 	.word	0x20000014
 80001e4:	00000000 	.word	0x00000000
<<<<<<< HEAD
 80001e8:	08005004 	.word	0x08005004
=======
<<<<<<< HEAD
 80001e8:	08004ff4 	.word	0x08004ff4
=======
 80001e8:	08004fb0 	.word	0x08004fb0
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000018 	.word	0x20000018
<<<<<<< HEAD
 8000204:	08005004 	.word	0x08005004
=======
<<<<<<< HEAD
 8000204:	08004ff4 	.word	0x08004ff4
=======
 8000204:	08004fb0 	.word	0x08004fb0
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b970 	b.w	8000500 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9e08      	ldr	r6, [sp, #32]
 800023e:	460d      	mov	r5, r1
 8000240:	4604      	mov	r4, r0
 8000242:	460f      	mov	r7, r1
 8000244:	2b00      	cmp	r3, #0
 8000246:	d14a      	bne.n	80002de <__udivmoddi4+0xa6>
 8000248:	428a      	cmp	r2, r1
 800024a:	4694      	mov	ip, r2
 800024c:	d965      	bls.n	800031a <__udivmoddi4+0xe2>
 800024e:	fab2 f382 	clz	r3, r2
 8000252:	b143      	cbz	r3, 8000266 <__udivmoddi4+0x2e>
 8000254:	fa02 fc03 	lsl.w	ip, r2, r3
 8000258:	f1c3 0220 	rsb	r2, r3, #32
 800025c:	409f      	lsls	r7, r3
 800025e:	fa20 f202 	lsr.w	r2, r0, r2
 8000262:	4317      	orrs	r7, r2
 8000264:	409c      	lsls	r4, r3
 8000266:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800026a:	fa1f f58c 	uxth.w	r5, ip
 800026e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000272:	0c22      	lsrs	r2, r4, #16
 8000274:	fb0e 7711 	mls	r7, lr, r1, r7
 8000278:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800027c:	fb01 f005 	mul.w	r0, r1, r5
 8000280:	4290      	cmp	r0, r2
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x62>
 8000284:	eb1c 0202 	adds.w	r2, ip, r2
 8000288:	f101 37ff 	add.w	r7, r1, #4294967295
 800028c:	f080 811c 	bcs.w	80004c8 <__udivmoddi4+0x290>
 8000290:	4290      	cmp	r0, r2
 8000292:	f240 8119 	bls.w	80004c8 <__udivmoddi4+0x290>
 8000296:	3902      	subs	r1, #2
 8000298:	4462      	add	r2, ip
 800029a:	1a12      	subs	r2, r2, r0
 800029c:	b2a4      	uxth	r4, r4
 800029e:	fbb2 f0fe 	udiv	r0, r2, lr
 80002a2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002aa:	fb00 f505 	mul.w	r5, r0, r5
 80002ae:	42a5      	cmp	r5, r4
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x90>
 80002b2:	eb1c 0404 	adds.w	r4, ip, r4
 80002b6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ba:	f080 8107 	bcs.w	80004cc <__udivmoddi4+0x294>
 80002be:	42a5      	cmp	r5, r4
 80002c0:	f240 8104 	bls.w	80004cc <__udivmoddi4+0x294>
 80002c4:	4464      	add	r4, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002cc:	1b64      	subs	r4, r4, r5
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11e      	cbz	r6, 80002da <__udivmoddi4+0xa2>
 80002d2:	40dc      	lsrs	r4, r3
 80002d4:	2300      	movs	r3, #0
 80002d6:	e9c6 4300 	strd	r4, r3, [r6]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d908      	bls.n	80002f4 <__udivmoddi4+0xbc>
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	f000 80ed 	beq.w	80004c2 <__udivmoddi4+0x28a>
 80002e8:	2100      	movs	r1, #0
 80002ea:	e9c6 0500 	strd	r0, r5, [r6]
 80002ee:	4608      	mov	r0, r1
 80002f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f4:	fab3 f183 	clz	r1, r3
 80002f8:	2900      	cmp	r1, #0
 80002fa:	d149      	bne.n	8000390 <__udivmoddi4+0x158>
 80002fc:	42ab      	cmp	r3, r5
 80002fe:	d302      	bcc.n	8000306 <__udivmoddi4+0xce>
 8000300:	4282      	cmp	r2, r0
 8000302:	f200 80f8 	bhi.w	80004f6 <__udivmoddi4+0x2be>
 8000306:	1a84      	subs	r4, r0, r2
 8000308:	eb65 0203 	sbc.w	r2, r5, r3
 800030c:	2001      	movs	r0, #1
 800030e:	4617      	mov	r7, r2
 8000310:	2e00      	cmp	r6, #0
 8000312:	d0e2      	beq.n	80002da <__udivmoddi4+0xa2>
 8000314:	e9c6 4700 	strd	r4, r7, [r6]
 8000318:	e7df      	b.n	80002da <__udivmoddi4+0xa2>
 800031a:	b902      	cbnz	r2, 800031e <__udivmoddi4+0xe6>
 800031c:	deff      	udf	#255	; 0xff
 800031e:	fab2 f382 	clz	r3, r2
 8000322:	2b00      	cmp	r3, #0
 8000324:	f040 8090 	bne.w	8000448 <__udivmoddi4+0x210>
 8000328:	1a8a      	subs	r2, r1, r2
 800032a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032e:	fa1f fe8c 	uxth.w	lr, ip
 8000332:	2101      	movs	r1, #1
 8000334:	fbb2 f5f7 	udiv	r5, r2, r7
 8000338:	fb07 2015 	mls	r0, r7, r5, r2
 800033c:	0c22      	lsrs	r2, r4, #16
 800033e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000342:	fb0e f005 	mul.w	r0, lr, r5
 8000346:	4290      	cmp	r0, r2
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0x124>
 800034a:	eb1c 0202 	adds.w	r2, ip, r2
 800034e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x122>
 8000354:	4290      	cmp	r0, r2
 8000356:	f200 80cb 	bhi.w	80004f0 <__udivmoddi4+0x2b8>
 800035a:	4645      	mov	r5, r8
 800035c:	1a12      	subs	r2, r2, r0
 800035e:	b2a4      	uxth	r4, r4
 8000360:	fbb2 f0f7 	udiv	r0, r2, r7
 8000364:	fb07 2210 	mls	r2, r7, r0, r2
 8000368:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800036c:	fb0e fe00 	mul.w	lr, lr, r0
 8000370:	45a6      	cmp	lr, r4
 8000372:	d908      	bls.n	8000386 <__udivmoddi4+0x14e>
 8000374:	eb1c 0404 	adds.w	r4, ip, r4
 8000378:	f100 32ff 	add.w	r2, r0, #4294967295
 800037c:	d202      	bcs.n	8000384 <__udivmoddi4+0x14c>
 800037e:	45a6      	cmp	lr, r4
 8000380:	f200 80bb 	bhi.w	80004fa <__udivmoddi4+0x2c2>
 8000384:	4610      	mov	r0, r2
 8000386:	eba4 040e 	sub.w	r4, r4, lr
 800038a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800038e:	e79f      	b.n	80002d0 <__udivmoddi4+0x98>
 8000390:	f1c1 0720 	rsb	r7, r1, #32
 8000394:	408b      	lsls	r3, r1
 8000396:	fa22 fc07 	lsr.w	ip, r2, r7
 800039a:	ea4c 0c03 	orr.w	ip, ip, r3
 800039e:	fa05 f401 	lsl.w	r4, r5, r1
 80003a2:	fa20 f307 	lsr.w	r3, r0, r7
 80003a6:	40fd      	lsrs	r5, r7
 80003a8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ac:	4323      	orrs	r3, r4
 80003ae:	fbb5 f8f9 	udiv	r8, r5, r9
 80003b2:	fa1f fe8c 	uxth.w	lr, ip
 80003b6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ba:	0c1c      	lsrs	r4, r3, #16
 80003bc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003c0:	fb08 f50e 	mul.w	r5, r8, lr
 80003c4:	42a5      	cmp	r5, r4
 80003c6:	fa02 f201 	lsl.w	r2, r2, r1
 80003ca:	fa00 f001 	lsl.w	r0, r0, r1
 80003ce:	d90b      	bls.n	80003e8 <__udivmoddi4+0x1b0>
 80003d0:	eb1c 0404 	adds.w	r4, ip, r4
 80003d4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003d8:	f080 8088 	bcs.w	80004ec <__udivmoddi4+0x2b4>
 80003dc:	42a5      	cmp	r5, r4
 80003de:	f240 8085 	bls.w	80004ec <__udivmoddi4+0x2b4>
 80003e2:	f1a8 0802 	sub.w	r8, r8, #2
 80003e6:	4464      	add	r4, ip
 80003e8:	1b64      	subs	r4, r4, r5
 80003ea:	b29d      	uxth	r5, r3
 80003ec:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f0:	fb09 4413 	mls	r4, r9, r3, r4
 80003f4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003f8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003fc:	45a6      	cmp	lr, r4
 80003fe:	d908      	bls.n	8000412 <__udivmoddi4+0x1da>
 8000400:	eb1c 0404 	adds.w	r4, ip, r4
 8000404:	f103 35ff 	add.w	r5, r3, #4294967295
 8000408:	d26c      	bcs.n	80004e4 <__udivmoddi4+0x2ac>
 800040a:	45a6      	cmp	lr, r4
 800040c:	d96a      	bls.n	80004e4 <__udivmoddi4+0x2ac>
 800040e:	3b02      	subs	r3, #2
 8000410:	4464      	add	r4, ip
 8000412:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000416:	fba3 9502 	umull	r9, r5, r3, r2
 800041a:	eba4 040e 	sub.w	r4, r4, lr
 800041e:	42ac      	cmp	r4, r5
 8000420:	46c8      	mov	r8, r9
 8000422:	46ae      	mov	lr, r5
 8000424:	d356      	bcc.n	80004d4 <__udivmoddi4+0x29c>
 8000426:	d053      	beq.n	80004d0 <__udivmoddi4+0x298>
 8000428:	b156      	cbz	r6, 8000440 <__udivmoddi4+0x208>
 800042a:	ebb0 0208 	subs.w	r2, r0, r8
 800042e:	eb64 040e 	sbc.w	r4, r4, lr
 8000432:	fa04 f707 	lsl.w	r7, r4, r7
 8000436:	40ca      	lsrs	r2, r1
 8000438:	40cc      	lsrs	r4, r1
 800043a:	4317      	orrs	r7, r2
 800043c:	e9c6 7400 	strd	r7, r4, [r6]
 8000440:	4618      	mov	r0, r3
 8000442:	2100      	movs	r1, #0
 8000444:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000448:	f1c3 0120 	rsb	r1, r3, #32
 800044c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000450:	fa20 f201 	lsr.w	r2, r0, r1
 8000454:	fa25 f101 	lsr.w	r1, r5, r1
 8000458:	409d      	lsls	r5, r3
 800045a:	432a      	orrs	r2, r5
 800045c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000460:	fa1f fe8c 	uxth.w	lr, ip
 8000464:	fbb1 f0f7 	udiv	r0, r1, r7
 8000468:	fb07 1510 	mls	r5, r7, r0, r1
 800046c:	0c11      	lsrs	r1, r2, #16
 800046e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000472:	fb00 f50e 	mul.w	r5, r0, lr
 8000476:	428d      	cmp	r5, r1
 8000478:	fa04 f403 	lsl.w	r4, r4, r3
 800047c:	d908      	bls.n	8000490 <__udivmoddi4+0x258>
 800047e:	eb1c 0101 	adds.w	r1, ip, r1
 8000482:	f100 38ff 	add.w	r8, r0, #4294967295
 8000486:	d22f      	bcs.n	80004e8 <__udivmoddi4+0x2b0>
 8000488:	428d      	cmp	r5, r1
 800048a:	d92d      	bls.n	80004e8 <__udivmoddi4+0x2b0>
 800048c:	3802      	subs	r0, #2
 800048e:	4461      	add	r1, ip
 8000490:	1b49      	subs	r1, r1, r5
 8000492:	b292      	uxth	r2, r2
 8000494:	fbb1 f5f7 	udiv	r5, r1, r7
 8000498:	fb07 1115 	mls	r1, r7, r5, r1
 800049c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004a0:	fb05 f10e 	mul.w	r1, r5, lr
 80004a4:	4291      	cmp	r1, r2
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x282>
 80004a8:	eb1c 0202 	adds.w	r2, ip, r2
 80004ac:	f105 38ff 	add.w	r8, r5, #4294967295
 80004b0:	d216      	bcs.n	80004e0 <__udivmoddi4+0x2a8>
 80004b2:	4291      	cmp	r1, r2
 80004b4:	d914      	bls.n	80004e0 <__udivmoddi4+0x2a8>
 80004b6:	3d02      	subs	r5, #2
 80004b8:	4462      	add	r2, ip
 80004ba:	1a52      	subs	r2, r2, r1
 80004bc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004c0:	e738      	b.n	8000334 <__udivmoddi4+0xfc>
 80004c2:	4631      	mov	r1, r6
 80004c4:	4630      	mov	r0, r6
 80004c6:	e708      	b.n	80002da <__udivmoddi4+0xa2>
 80004c8:	4639      	mov	r1, r7
 80004ca:	e6e6      	b.n	800029a <__udivmoddi4+0x62>
 80004cc:	4610      	mov	r0, r2
 80004ce:	e6fb      	b.n	80002c8 <__udivmoddi4+0x90>
 80004d0:	4548      	cmp	r0, r9
 80004d2:	d2a9      	bcs.n	8000428 <__udivmoddi4+0x1f0>
 80004d4:	ebb9 0802 	subs.w	r8, r9, r2
 80004d8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004dc:	3b01      	subs	r3, #1
 80004de:	e7a3      	b.n	8000428 <__udivmoddi4+0x1f0>
 80004e0:	4645      	mov	r5, r8
 80004e2:	e7ea      	b.n	80004ba <__udivmoddi4+0x282>
 80004e4:	462b      	mov	r3, r5
 80004e6:	e794      	b.n	8000412 <__udivmoddi4+0x1da>
 80004e8:	4640      	mov	r0, r8
 80004ea:	e7d1      	b.n	8000490 <__udivmoddi4+0x258>
 80004ec:	46d0      	mov	r8, sl
 80004ee:	e77b      	b.n	80003e8 <__udivmoddi4+0x1b0>
 80004f0:	3d02      	subs	r5, #2
 80004f2:	4462      	add	r2, ip
 80004f4:	e732      	b.n	800035c <__udivmoddi4+0x124>
 80004f6:	4608      	mov	r0, r1
 80004f8:	e70a      	b.n	8000310 <__udivmoddi4+0xd8>
 80004fa:	4464      	add	r4, ip
 80004fc:	3802      	subs	r0, #2
 80004fe:	e742      	b.n	8000386 <__udivmoddi4+0x14e>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <HAL_TIM_PeriodElapsedCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint32_t testVal = 0;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8000504:	b480      	push	{r7}
 8000506:	b083      	sub	sp, #12
=======
<<<<<<< HEAD
 8000504:	b480      	push	{r7}
 8000506:	b083      	sub	sp, #12
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
	testVal++;
 800050c:	4b17      	ldr	r3, [pc, #92]	; (800056c <HAL_TIM_PeriodElapsedCallback+0x68>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	3301      	adds	r3, #1
 8000512:	4a16      	ldr	r2, [pc, #88]	; (800056c <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000514:	6013      	str	r3, [r2, #0]

	d -= 500;
 8000516:	4b16      	ldr	r3, [pc, #88]	; (8000570 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 800051e:	4a14      	ldr	r2, [pc, #80]	; (8000570 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8000520:	6013      	str	r3, [r2, #0]
	if(d == 0){
 8000522:	4b13      	ldr	r3, [pc, #76]	; (8000570 <HAL_TIM_PeriodElapsedCallback+0x6c>)
=======
 8000504:	b580      	push	{r7, lr}
 8000506:	b082      	sub	sp, #8
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
	testVal++;
 800050c:	4b1a      	ldr	r3, [pc, #104]	; (8000578 <HAL_TIM_PeriodElapsedCallback+0x74>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	3301      	adds	r3, #1
 8000512:	4a19      	ldr	r2, [pc, #100]	; (8000578 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000514:	6013      	str	r3, [r2, #0]

	d -= 500;
 8000516:	4b19      	ldr	r3, [pc, #100]	; (800057c <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 800051e:	4a17      	ldr	r2, [pc, #92]	; (800057c <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000520:	6013      	str	r3, [r2, #0]
	if(d == 0){
<<<<<<< HEAD
 8000522:	4b16      	ldr	r3, [pc, #88]	; (800057c <HAL_TIM_PeriodElapsedCallback+0x78>)
=======
 8000522:	4b1a      	ldr	r3, [pc, #104]	; (800058c <HAL_TIM_PeriodElapsedCallback+0x88>)
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	2b00      	cmp	r3, #0
 8000528:	d109      	bne.n	800053e <HAL_TIM_PeriodElapsedCallback+0x3a>
		f -= 500;
<<<<<<< HEAD
 800052a:	4b15      	ldr	r3, [pc, #84]	; (8000580 <HAL_TIM_PeriodElapsedCallback+0x7c>)
=======
<<<<<<< HEAD
 800052a:	4b12      	ldr	r3, [pc, #72]	; (8000574 <HAL_TIM_PeriodElapsedCallback+0x70>)
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8000532:	4a10      	ldr	r2, [pc, #64]	; (8000574 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000534:	6013      	str	r3, [r2, #0]
	    d = f;
 8000536:	4b0f      	ldr	r3, [pc, #60]	; (8000574 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	4a0d      	ldr	r2, [pc, #52]	; (8000570 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 800053c:	6013      	str	r3, [r2, #0]
    }
	if(f == 0 && d == 0){
 800053e:	4b0d      	ldr	r3, [pc, #52]	; (8000574 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	2b00      	cmp	r3, #0
 8000544:	d10b      	bne.n	800055e <HAL_TIM_PeriodElapsedCallback+0x5a>
 8000546:	4b0a      	ldr	r3, [pc, #40]	; (8000570 <HAL_TIM_PeriodElapsedCallback+0x6c>)
=======
 800052a:	4b19      	ldr	r3, [pc, #100]	; (8000590 <HAL_TIM_PeriodElapsedCallback+0x8c>)
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8000532:	4a13      	ldr	r2, [pc, #76]	; (8000580 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000534:	6013      	str	r3, [r2, #0]
	    d = f;
 8000536:	4b12      	ldr	r3, [pc, #72]	; (8000580 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	4a10      	ldr	r2, [pc, #64]	; (800057c <HAL_TIM_PeriodElapsedCallback+0x78>)
 800053c:	6013      	str	r3, [r2, #0]
    }
	if(f == 0 && d == 0){
 800053e:	4b10      	ldr	r3, [pc, #64]	; (8000580 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	2b00      	cmp	r3, #0
 8000544:	d10b      	bne.n	800055e <HAL_TIM_PeriodElapsedCallback+0x5a>
<<<<<<< HEAD
 8000546:	4b0d      	ldr	r3, [pc, #52]	; (800057c <HAL_TIM_PeriodElapsedCallback+0x78>)
=======
 8000546:	4b11      	ldr	r3, [pc, #68]	; (800058c <HAL_TIM_PeriodElapsedCallback+0x88>)
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	2b00      	cmp	r3, #0
 800054c:	d107      	bne.n	800055e <HAL_TIM_PeriodElapsedCallback+0x5a>
		f = 2500;
<<<<<<< HEAD
 800054e:	4b0c      	ldr	r3, [pc, #48]	; (8000580 <HAL_TIM_PeriodElapsedCallback+0x7c>)
=======
<<<<<<< HEAD
 800054e:	4b09      	ldr	r3, [pc, #36]	; (8000574 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000550:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8000554:	601a      	str	r2, [r3, #0]
		d = 2500;
 8000556:	4b06      	ldr	r3, [pc, #24]	; (8000570 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8000558:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800055c:	601a      	str	r2, [r3, #0]
//	if(htim->Instance == htim5.Instance){
//		HAL_GPIO_TogglePin(GPIOB, LD1_Pin);
//	}
//
//	ClockFlag ^= 0x01;
}
 800055e:	bf00      	nop
 8000560:	370c      	adds	r7, #12
 8000562:	46bd      	mov	sp, r7
 8000564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop
 800056c:	20000238 	.word	0x20000238
 8000570:	20000000 	.word	0x20000000
 8000574:	20000004 	.word	0x20000004

08000578 <main>:
=======
 800054e:	4b10      	ldr	r3, [pc, #64]	; (8000590 <HAL_TIM_PeriodElapsedCallback+0x8c>)
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
 8000550:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8000554:	601a      	str	r2, [r3, #0]
		d = 2500;
 8000556:	4b09      	ldr	r3, [pc, #36]	; (800057c <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000558:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800055c:	601a      	str	r2, [r3, #0]

//	if(htim->Instance == htim5.Instance){
//		HAL_GPIO_TogglePin(GPIOB, LD1_Pin);
//	}

	ClockFlag ^= 0x01;
 800055e:	4b09      	ldr	r3, [pc, #36]	; (8000584 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	f083 0301 	eor.w	r3, r3, #1
 8000566:	4a07      	ldr	r2, [pc, #28]	; (8000584 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000568:	6013      	str	r3, [r2, #0]
}
 800056a:	bf00      	nop
 800056c:	370c      	adds	r7, #12
 800056e:	46bd      	mov	sp, r7
 8000570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop
 8000578:	2000023c 	.word	0x2000023c
 800057c:	20000000 	.word	0x20000000
 8000580:	20000004 	.word	0x20000004
 8000584:	20000234 	.word	0x20000234

<<<<<<< HEAD
08000588 <main>:
=======
080005a0 <main>:
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
<<<<<<< HEAD
 8000588:	b580      	push	{r7, lr}
 800058a:	af00      	add	r7, sp, #0
=======
<<<<<<< HEAD
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
=======
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
<<<<<<< HEAD
 800058c:	f000 fc77 	bl	8000e7e <HAL_Init>
=======
<<<<<<< HEAD
 800057c:	f000 fc77 	bl	8000e6e <HAL_Init>
=======
 80005a4:	f000 fc59 	bl	8000e5a <HAL_Init>
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
<<<<<<< HEAD
 8000590:	f000 f834 	bl	80005fc <SystemClock_Config>
=======
<<<<<<< HEAD
 8000580:	f000 f834 	bl	80005ec <SystemClock_Config>
=======
 80005a8:	f000 f826 	bl	80005f8 <SystemClock_Config>
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
<<<<<<< HEAD
 8000594:	f000 f9ca 	bl	800092c <MX_GPIO_Init>
=======
<<<<<<< HEAD
 8000584:	f000 f9ca 	bl	800091c <MX_GPIO_Init>
  MX_DMA_Init();
 8000588:	f000 f9aa 	bl	80008e0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800058c:	f000 f978 	bl	8000880 <MX_USART2_UART_Init>
  MX_ADC3_Init();
 8000590:	f000 f89a 	bl	80006c8 <MX_ADC3_Init>
  MX_UART5_Init();
 8000594:	f000 f944 	bl	8000820 <MX_UART5_Init>
  MX_TIM5_Init();
 8000598:	f000 f8e8 	bl	800076c <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim5);
 800059c:	480e      	ldr	r0, [pc, #56]	; (80005d8 <main+0x60>)
 800059e:	f002 fedb 	bl	8003358 <HAL_TIM_Base_Start_IT>
=======
 80005ac:	f000 f9bc 	bl	8000928 <MX_GPIO_Init>
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  MX_DMA_Init();
 8000598:	f000 f9aa 	bl	80008f0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800059c:	f000 f978 	bl	8000890 <MX_USART2_UART_Init>
  MX_ADC3_Init();
 80005a0:	f000 f89a 	bl	80006d8 <MX_ADC3_Init>
  MX_UART5_Init();
 80005a4:	f000 f944 	bl	8000830 <MX_UART5_Init>
  MX_TIM5_Init();
 80005a8:	f000 f8e8 	bl	800077c <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim5);
<<<<<<< HEAD
 80005ac:	480e      	ldr	r0, [pc, #56]	; (80005e8 <main+0x60>)
 80005ae:	f002 fedb 	bl	8003368 <HAL_TIM_Base_Start_IT>
  {
=======
 80005c4:	4808      	ldr	r0, [pc, #32]	; (80005e8 <main+0x48>)
 80005c6:	f002 fea5 	bl	8003314 <HAL_TIM_Base_Start_IT>
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //Blue Swith -> LED
	  HAL_GPIO_WritePin(GPIOB, LD3_Pin, HAL_GPIO_ReadPin(GPIOC, B1_Pin));
 80005b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005b6:	480d      	ldr	r0, [pc, #52]	; (80005ec <main+0x64>)
 80005b8:	f001 fdb0 	bl	800211c <HAL_GPIO_ReadPin>
 80005bc:	4603      	mov	r3, r0
 80005be:	461a      	mov	r2, r3
 80005c0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005c4:	480a      	ldr	r0, [pc, #40]	; (80005f0 <main+0x68>)
 80005c6:	f001 fdc1 	bl	800214c <HAL_GPIO_WritePin>

	  //깜빡이는 시간 점점 줄어드는 toggle
	  HAL_GPIO_TogglePin(GPIOB, LD2_Pin);
<<<<<<< HEAD
 80005a2:	2180      	movs	r1, #128	; 0x80
 80005a4:	480d      	ldr	r0, [pc, #52]	; (80005dc <main+0x64>)
 80005a6:	f001 fde2 	bl	800216e <HAL_GPIO_TogglePin>
	  HAL_Delay(f);
 80005aa:	4b0d      	ldr	r3, [pc, #52]	; (80005e0 <main+0x68>)
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	4618      	mov	r0, r3
 80005b0:	f000 fcba 	bl	8000f28 <HAL_Delay>

	  Flag++;
 80005b4:	4b0b      	ldr	r3, [pc, #44]	; (80005e4 <main+0x6c>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	3301      	adds	r3, #1
 80005ba:	4a0a      	ldr	r2, [pc, #40]	; (80005e4 <main+0x6c>)
 80005bc:	6013      	str	r3, [r2, #0]

	  HAL_GPIO_WritePin(GPIOB, LD2_Pin, HAL_GPIO_ReadPin(GPIOC, B1_Pin));
 80005be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005c2:	4809      	ldr	r0, [pc, #36]	; (80005e8 <main+0x70>)
 80005c4:	f001 fda2 	bl	800210c <HAL_GPIO_ReadPin>
 80005c8:	4603      	mov	r3, r0
 80005ca:	461a      	mov	r2, r3
 80005cc:	2180      	movs	r1, #128	; 0x80
 80005ce:	4803      	ldr	r0, [pc, #12]	; (80005dc <main+0x64>)
 80005d0:	f001 fdb4 	bl	800213c <HAL_GPIO_WritePin>
	  HAL_GPIO_TogglePin(GPIOB, LD2_Pin);
 80005d4:	e7e5      	b.n	80005a2 <main+0x2a>
 80005d6:	bf00      	nop
 80005d8:	200000d8 	.word	0x200000d8
 80005dc:	40020400 	.word	0x40020400
 80005e0:	20000004 	.word	0x20000004
 80005e4:	20000234 	.word	0x20000234
 80005e8:	40020800 	.word	0x40020800

080005ec <SystemClock_Config>:
=======
 80005ca:	2180      	movs	r1, #128	; 0x80
 80005cc:	4808      	ldr	r0, [pc, #32]	; (80005f0 <main+0x68>)
 80005ce:	f001 fdd6 	bl	800217e <HAL_GPIO_TogglePin>
	  HAL_Delay(f);
 80005d2:	4b08      	ldr	r3, [pc, #32]	; (80005f4 <main+0x6c>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	4618      	mov	r0, r3
 80005d8:	f000 fcae 	bl	8000f38 <HAL_Delay>



	  Flag++;
 80005dc:	4b06      	ldr	r3, [pc, #24]	; (80005f8 <main+0x70>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	3301      	adds	r3, #1
 80005e2:	4a05      	ldr	r2, [pc, #20]	; (80005f8 <main+0x70>)
 80005e4:	6013      	str	r3, [r2, #0]
	  HAL_GPIO_WritePin(GPIOB, LD3_Pin, HAL_GPIO_ReadPin(GPIOC, B1_Pin));
 80005e6:	e7e4      	b.n	80005b2 <main+0x2a>
 80005e8:	200000d8 	.word	0x200000d8
 80005ec:	40020800 	.word	0x40020800
 80005f0:	40020400 	.word	0x40020400
 80005f4:	20000004 	.word	0x20000004
 80005f8:	20000238 	.word	0x20000238

<<<<<<< HEAD
080005fc <SystemClock_Config>:
=======
080005f8 <SystemClock_Config>:
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
<<<<<<< HEAD
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b094      	sub	sp, #80	; 0x50
 8000600:	af00      	add	r7, sp, #0
=======
<<<<<<< HEAD
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b094      	sub	sp, #80	; 0x50
 80005f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005f2:	f107 0320 	add.w	r3, r7, #32
 80005f6:	2230      	movs	r2, #48	; 0x30
 80005f8:	2100      	movs	r1, #0
 80005fa:	4618      	mov	r0, r3
 80005fc:	f004 fccd 	bl	8004f9a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000600:	f107 030c 	add.w	r3, r7, #12
 8000604:	2200      	movs	r2, #0
 8000606:	601a      	str	r2, [r3, #0]
 8000608:	605a      	str	r2, [r3, #4]
 800060a:	609a      	str	r2, [r3, #8]
 800060c:	60da      	str	r2, [r3, #12]
 800060e:	611a      	str	r2, [r3, #16]
=======
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b094      	sub	sp, #80	; 0x50
 80005fc:	af00      	add	r7, sp, #0
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000602:	f107 0320 	add.w	r3, r7, #32
 8000606:	2230      	movs	r2, #48	; 0x30
 8000608:	2100      	movs	r1, #0
 800060a:	4618      	mov	r0, r3
 800060c:	f004 fccd 	bl	8004faa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
<<<<<<< HEAD
 8000610:	f107 030c 	add.w	r3, r7, #12
 8000614:	2200      	movs	r2, #0
 8000616:	601a      	str	r2, [r3, #0]
 8000618:	605a      	str	r2, [r3, #4]
 800061a:	609a      	str	r2, [r3, #8]
 800061c:	60da      	str	r2, [r3, #12]
 800061e:	611a      	str	r2, [r3, #16]
=======
 800060c:	f107 030c 	add.w	r3, r7, #12
 8000610:	2200      	movs	r2, #0
 8000612:	601a      	str	r2, [r3, #0]
 8000614:	605a      	str	r2, [r3, #4]
 8000616:	609a      	str	r2, [r3, #8]
 8000618:	60da      	str	r2, [r3, #12]
 800061a:	611a      	str	r2, [r3, #16]
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
<<<<<<< HEAD
 8000620:	f001 fdc8 	bl	80021b4 <HAL_PWR_EnableBkUpAccess>
=======
<<<<<<< HEAD
 8000610:	f001 fdc8 	bl	80021a4 <HAL_PWR_EnableBkUpAccess>
=======
 800061c:	f001 fda0 	bl	8002160 <HAL_PWR_EnableBkUpAccess>
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
<<<<<<< HEAD
 8000624:	4b2a      	ldr	r3, [pc, #168]	; (80006d0 <SystemClock_Config+0xd4>)
 8000626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000628:	4a29      	ldr	r2, [pc, #164]	; (80006d0 <SystemClock_Config+0xd4>)
 800062a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800062e:	6413      	str	r3, [r2, #64]	; 0x40
 8000630:	4b27      	ldr	r3, [pc, #156]	; (80006d0 <SystemClock_Config+0xd4>)
 8000632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000634:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000638:	60bb      	str	r3, [r7, #8]
 800063a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800063c:	4b25      	ldr	r3, [pc, #148]	; (80006d4 <SystemClock_Config+0xd8>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	4a24      	ldr	r2, [pc, #144]	; (80006d4 <SystemClock_Config+0xd8>)
 8000642:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000646:	6013      	str	r3, [r2, #0]
 8000648:	4b22      	ldr	r3, [pc, #136]	; (80006d4 <SystemClock_Config+0xd8>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000650:	607b      	str	r3, [r7, #4]
 8000652:	687b      	ldr	r3, [r7, #4]
=======
<<<<<<< HEAD
 8000614:	4b2a      	ldr	r3, [pc, #168]	; (80006c0 <SystemClock_Config+0xd4>)
 8000616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000618:	4a29      	ldr	r2, [pc, #164]	; (80006c0 <SystemClock_Config+0xd4>)
 800061a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800061e:	6413      	str	r3, [r2, #64]	; 0x40
 8000620:	4b27      	ldr	r3, [pc, #156]	; (80006c0 <SystemClock_Config+0xd4>)
 8000622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000624:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000628:	60bb      	str	r3, [r7, #8]
 800062a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800062c:	4b25      	ldr	r3, [pc, #148]	; (80006c4 <SystemClock_Config+0xd8>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4a24      	ldr	r2, [pc, #144]	; (80006c4 <SystemClock_Config+0xd8>)
 8000632:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000636:	6013      	str	r3, [r2, #0]
 8000638:	4b22      	ldr	r3, [pc, #136]	; (80006c4 <SystemClock_Config+0xd8>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000640:	607b      	str	r3, [r7, #4]
 8000642:	687b      	ldr	r3, [r7, #4]
=======
 8000620:	4b2a      	ldr	r3, [pc, #168]	; (80006cc <SystemClock_Config+0xd4>)
 8000622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000624:	4a29      	ldr	r2, [pc, #164]	; (80006cc <SystemClock_Config+0xd4>)
 8000626:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800062a:	6413      	str	r3, [r2, #64]	; 0x40
 800062c:	4b27      	ldr	r3, [pc, #156]	; (80006cc <SystemClock_Config+0xd4>)
 800062e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000630:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000634:	60bb      	str	r3, [r7, #8]
 8000636:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000638:	4b25      	ldr	r3, [pc, #148]	; (80006d0 <SystemClock_Config+0xd8>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	4a24      	ldr	r2, [pc, #144]	; (80006d0 <SystemClock_Config+0xd8>)
 800063e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000642:	6013      	str	r3, [r2, #0]
 8000644:	4b22      	ldr	r3, [pc, #136]	; (80006d0 <SystemClock_Config+0xd8>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800064c:	607b      	str	r3, [r7, #4]
 800064e:	687b      	ldr	r3, [r7, #4]
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
<<<<<<< HEAD
 8000654:	2302      	movs	r3, #2
 8000656:	623b      	str	r3, [r7, #32]
=======
<<<<<<< HEAD
 8000644:	2302      	movs	r3, #2
 8000646:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000648:	2301      	movs	r3, #1
 800064a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800064c:	2310      	movs	r3, #16
 800064e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000650:	2302      	movs	r3, #2
 8000652:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000654:	2300      	movs	r3, #0
 8000656:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000658:	2308      	movs	r3, #8
 800065a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 800065c:	23d8      	movs	r3, #216	; 0xd8
 800065e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000660:	2302      	movs	r3, #2
 8000662:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000664:	2302      	movs	r3, #2
 8000666:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000668:	f107 0320 	add.w	r3, r7, #32
 800066c:	4618      	mov	r0, r3
 800066e:	f001 fdf9 	bl	8002264 <HAL_RCC_OscConfig>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000678:	f000 f9d0 	bl	8000a1c <Error_Handler>
=======
 8000650:	2302      	movs	r3, #2
 8000652:	623b      	str	r3, [r7, #32]
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000658:	2301      	movs	r3, #1
 800065a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800065c:	2310      	movs	r3, #16
 800065e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000660:	2302      	movs	r3, #2
 8000662:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000664:	2300      	movs	r3, #0
 8000666:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000668:	2308      	movs	r3, #8
 800066a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 800066c:	23d8      	movs	r3, #216	; 0xd8
 800066e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000670:	2302      	movs	r3, #2
 8000672:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000674:	2302      	movs	r3, #2
 8000676:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000678:	f107 0320 	add.w	r3, r7, #32
 800067c:	4618      	mov	r0, r3
 800067e:	f001 fdf9 	bl	8002274 <HAL_RCC_OscConfig>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <SystemClock_Config+0x90>
  {
    Error_Handler();
<<<<<<< HEAD
 8000688:	f000 f9d0 	bl	8000a2c <Error_Handler>
=======
 8000684:	f000 f9c0 	bl	8000a08 <Error_Handler>
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
<<<<<<< HEAD
 800068c:	f001 fda2 	bl	80021d4 <HAL_PWREx_EnableOverDrive>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000696:	f000 f9c9 	bl	8000a2c <Error_Handler>
=======
<<<<<<< HEAD
 800067c:	f001 fda2 	bl	80021c4 <HAL_PWREx_EnableOverDrive>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000686:	f000 f9c9 	bl	8000a1c <Error_Handler>
=======
 8000688:	f001 fd7a 	bl	8002180 <HAL_PWREx_EnableOverDrive>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000692:	f000 f9b9 	bl	8000a08 <Error_Handler>
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
<<<<<<< HEAD
 800069a:	230f      	movs	r3, #15
 800069c:	60fb      	str	r3, [r7, #12]
=======
<<<<<<< HEAD
 800068a:	230f      	movs	r3, #15
 800068c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800068e:	2302      	movs	r3, #2
 8000690:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000692:	2300      	movs	r3, #0
 8000694:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000696:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800069a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800069c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006a0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80006a2:	f107 030c 	add.w	r3, r7, #12
 80006a6:	2107      	movs	r1, #7
 80006a8:	4618      	mov	r0, r3
 80006aa:	f002 f87f 	bl	80027ac <HAL_RCC_ClockConfig>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 80006b4:	f000 f9b2 	bl	8000a1c <Error_Handler>
  }
}
 80006b8:	bf00      	nop
 80006ba:	3750      	adds	r7, #80	; 0x50
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	40023800 	.word	0x40023800
 80006c4:	40007000 	.word	0x40007000

080006c8 <MX_ADC3_Init>:
=======
 8000696:	230f      	movs	r3, #15
 8000698:	60fb      	str	r3, [r7, #12]
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800069e:	2302      	movs	r3, #2
 80006a0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a2:	2300      	movs	r3, #0
 80006a4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006a6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006aa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006b0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80006b2:	f107 030c 	add.w	r3, r7, #12
 80006b6:	2107      	movs	r1, #7
 80006b8:	4618      	mov	r0, r3
 80006ba:	f002 f87f 	bl	80027bc <HAL_RCC_ClockConfig>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 80006c4:	f000 f9b2 	bl	8000a2c <Error_Handler>
  }
}
 80006c8:	bf00      	nop
 80006ca:	3750      	adds	r7, #80	; 0x50
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	40023800 	.word	0x40023800
 80006d4:	40007000 	.word	0x40007000

<<<<<<< HEAD
080006d8 <MX_ADC3_Init>:
=======
080006d4 <MX_ADC3_Init>:
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
<<<<<<< HEAD
 80006d8:	b580      	push	{r7, lr}
 80006da:	b084      	sub	sp, #16
 80006dc:	af00      	add	r7, sp, #0
=======
<<<<<<< HEAD
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b084      	sub	sp, #16
 80006cc:	af00      	add	r7, sp, #0
=======
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b084      	sub	sp, #16
 80006d8:	af00      	add	r7, sp, #0
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
<<<<<<< HEAD
 80006de:	463b      	mov	r3, r7
 80006e0:	2200      	movs	r2, #0
 80006e2:	601a      	str	r2, [r3, #0]
 80006e4:	605a      	str	r2, [r3, #4]
 80006e6:	609a      	str	r2, [r3, #8]
 80006e8:	60da      	str	r2, [r3, #12]
=======
<<<<<<< HEAD
 80006ce:	463b      	mov	r3, r7
 80006d0:	2200      	movs	r2, #0
 80006d2:	601a      	str	r2, [r3, #0]
 80006d4:	605a      	str	r2, [r3, #4]
 80006d6:	609a      	str	r2, [r3, #8]
 80006d8:	60da      	str	r2, [r3, #12]
=======
 80006da:	463b      	mov	r3, r7
 80006dc:	2200      	movs	r2, #0
 80006de:	601a      	str	r2, [r3, #0]
 80006e0:	605a      	str	r2, [r3, #4]
 80006e2:	609a      	str	r2, [r3, #8]
 80006e4:	60da      	str	r2, [r3, #12]
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
<<<<<<< HEAD
 80006ea:	4b21      	ldr	r3, [pc, #132]	; (8000770 <MX_ADC3_Init+0x98>)
 80006ec:	4a21      	ldr	r2, [pc, #132]	; (8000774 <MX_ADC3_Init+0x9c>)
 80006ee:	601a      	str	r2, [r3, #0]
=======
<<<<<<< HEAD
 80006da:	4b21      	ldr	r3, [pc, #132]	; (8000760 <MX_ADC3_Init+0x98>)
 80006dc:	4a21      	ldr	r2, [pc, #132]	; (8000764 <MX_ADC3_Init+0x9c>)
 80006de:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006e0:	4b1f      	ldr	r3, [pc, #124]	; (8000760 <MX_ADC3_Init+0x98>)
 80006e2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80006e6:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80006e8:	4b1d      	ldr	r3, [pc, #116]	; (8000760 <MX_ADC3_Init+0x98>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006ee:	4b1c      	ldr	r3, [pc, #112]	; (8000760 <MX_ADC3_Init+0x98>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 80006f4:	4b1a      	ldr	r3, [pc, #104]	; (8000760 <MX_ADC3_Init+0x98>)
 80006f6:	2201      	movs	r2, #1
 80006f8:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80006fa:	4b19      	ldr	r3, [pc, #100]	; (8000760 <MX_ADC3_Init+0x98>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000702:	4b17      	ldr	r3, [pc, #92]	; (8000760 <MX_ADC3_Init+0x98>)
 8000704:	2200      	movs	r2, #0
 8000706:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000708:	4b15      	ldr	r3, [pc, #84]	; (8000760 <MX_ADC3_Init+0x98>)
 800070a:	4a17      	ldr	r2, [pc, #92]	; (8000768 <MX_ADC3_Init+0xa0>)
 800070c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800070e:	4b14      	ldr	r3, [pc, #80]	; (8000760 <MX_ADC3_Init+0x98>)
 8000710:	2200      	movs	r2, #0
 8000712:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000714:	4b12      	ldr	r3, [pc, #72]	; (8000760 <MX_ADC3_Init+0x98>)
 8000716:	2201      	movs	r2, #1
 8000718:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = ENABLE;
 800071a:	4b11      	ldr	r3, [pc, #68]	; (8000760 <MX_ADC3_Init+0x98>)
 800071c:	2201      	movs	r2, #1
 800071e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000722:	4b0f      	ldr	r3, [pc, #60]	; (8000760 <MX_ADC3_Init+0x98>)
 8000724:	2201      	movs	r2, #1
 8000726:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000728:	480d      	ldr	r0, [pc, #52]	; (8000760 <MX_ADC3_Init+0x98>)
 800072a:	f000 fc21 	bl	8000f70 <HAL_ADC_Init>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8000734:	f000 f972 	bl	8000a1c <Error_Handler>
=======
 80006e6:	4b21      	ldr	r3, [pc, #132]	; (800076c <MX_ADC3_Init+0x98>)
 80006e8:	4a21      	ldr	r2, [pc, #132]	; (8000770 <MX_ADC3_Init+0x9c>)
 80006ea:	601a      	str	r2, [r3, #0]
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006f0:	4b1f      	ldr	r3, [pc, #124]	; (8000770 <MX_ADC3_Init+0x98>)
 80006f2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80006f6:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80006f8:	4b1d      	ldr	r3, [pc, #116]	; (8000770 <MX_ADC3_Init+0x98>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006fe:	4b1c      	ldr	r3, [pc, #112]	; (8000770 <MX_ADC3_Init+0x98>)
 8000700:	2200      	movs	r2, #0
 8000702:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8000704:	4b1a      	ldr	r3, [pc, #104]	; (8000770 <MX_ADC3_Init+0x98>)
 8000706:	2201      	movs	r2, #1
 8000708:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800070a:	4b19      	ldr	r3, [pc, #100]	; (8000770 <MX_ADC3_Init+0x98>)
 800070c:	2200      	movs	r2, #0
 800070e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000712:	4b17      	ldr	r3, [pc, #92]	; (8000770 <MX_ADC3_Init+0x98>)
 8000714:	2200      	movs	r2, #0
 8000716:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000718:	4b15      	ldr	r3, [pc, #84]	; (8000770 <MX_ADC3_Init+0x98>)
 800071a:	4a17      	ldr	r2, [pc, #92]	; (8000778 <MX_ADC3_Init+0xa0>)
 800071c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800071e:	4b14      	ldr	r3, [pc, #80]	; (8000770 <MX_ADC3_Init+0x98>)
 8000720:	2200      	movs	r2, #0
 8000722:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000724:	4b12      	ldr	r3, [pc, #72]	; (8000770 <MX_ADC3_Init+0x98>)
 8000726:	2201      	movs	r2, #1
 8000728:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = ENABLE;
 800072a:	4b11      	ldr	r3, [pc, #68]	; (8000770 <MX_ADC3_Init+0x98>)
 800072c:	2201      	movs	r2, #1
 800072e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000732:	4b0f      	ldr	r3, [pc, #60]	; (8000770 <MX_ADC3_Init+0x98>)
 8000734:	2201      	movs	r2, #1
 8000736:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000738:	480d      	ldr	r0, [pc, #52]	; (8000770 <MX_ADC3_Init+0x98>)
 800073a:	f000 fc21 	bl	8000f80 <HAL_ADC_Init>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
<<<<<<< HEAD
 8000744:	f000 f972 	bl	8000a2c <Error_Handler>
=======
 8000740:	f000 f962 	bl	8000a08 <Error_Handler>
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
<<<<<<< HEAD
 8000748:	2309      	movs	r3, #9
 800074a:	603b      	str	r3, [r7, #0]
=======
<<<<<<< HEAD
 8000738:	2309      	movs	r3, #9
 800073a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800073c:	2301      	movs	r3, #1
 800073e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8000740:	2303      	movs	r3, #3
 8000742:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000744:	463b      	mov	r3, r7
 8000746:	4619      	mov	r1, r3
 8000748:	4805      	ldr	r0, [pc, #20]	; (8000760 <MX_ADC3_Init+0x98>)
 800074a:	f000 fc55 	bl	8000ff8 <HAL_ADC_ConfigChannel>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8000754:	f000 f962 	bl	8000a1c <Error_Handler>
=======
 8000744:	2309      	movs	r3, #9
 8000746:	603b      	str	r3, [r7, #0]
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800074c:	2301      	movs	r3, #1
 800074e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8000750:	2303      	movs	r3, #3
 8000752:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000754:	463b      	mov	r3, r7
 8000756:	4619      	mov	r1, r3
 8000758:	4805      	ldr	r0, [pc, #20]	; (8000770 <MX_ADC3_Init+0x98>)
 800075a:	f000 fc55 	bl	8001008 <HAL_ADC_ConfigChannel>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
<<<<<<< HEAD
 8000764:	f000 f962 	bl	8000a2c <Error_Handler>
=======
 8000760:	f000 f952 	bl	8000a08 <Error_Handler>
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
<<<<<<< HEAD
 8000768:	bf00      	nop
 800076a:	3710      	adds	r7, #16
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}
 8000770:	20000030 	.word	0x20000030
 8000774:	40012200 	.word	0x40012200
 8000778:	0f000001 	.word	0x0f000001

0800077c <MX_TIM5_Init>:
=======
<<<<<<< HEAD
 8000758:	bf00      	nop
 800075a:	3710      	adds	r7, #16
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}
 8000760:	20000030 	.word	0x20000030
 8000764:	40012200 	.word	0x40012200
 8000768:	0f000001 	.word	0x0f000001

0800076c <MX_TIM5_Init>:
=======
 8000764:	bf00      	nop
 8000766:	3710      	adds	r7, #16
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}
 800076c:	20000030 	.word	0x20000030
 8000770:	40012200 	.word	0x40012200
 8000774:	0f000001 	.word	0x0f000001

08000778 <MX_TIM5_Init>:
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
<<<<<<< HEAD
 800077c:	b580      	push	{r7, lr}
 800077e:	b08a      	sub	sp, #40	; 0x28
 8000780:	af00      	add	r7, sp, #0
=======
<<<<<<< HEAD
 800076c:	b580      	push	{r7, lr}
 800076e:	b08a      	sub	sp, #40	; 0x28
 8000770:	af00      	add	r7, sp, #0
=======
 8000778:	b580      	push	{r7, lr}
 800077a:	b08a      	sub	sp, #40	; 0x28
 800077c:	af00      	add	r7, sp, #0
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
<<<<<<< HEAD
 8000782:	f107 031c 	add.w	r3, r7, #28
 8000786:	2200      	movs	r2, #0
 8000788:	601a      	str	r2, [r3, #0]
 800078a:	605a      	str	r2, [r3, #4]
 800078c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800078e:	463b      	mov	r3, r7
 8000790:	2200      	movs	r2, #0
 8000792:	601a      	str	r2, [r3, #0]
 8000794:	605a      	str	r2, [r3, #4]
 8000796:	609a      	str	r2, [r3, #8]
 8000798:	60da      	str	r2, [r3, #12]
 800079a:	611a      	str	r2, [r3, #16]
 800079c:	615a      	str	r2, [r3, #20]
 800079e:	619a      	str	r2, [r3, #24]
=======
<<<<<<< HEAD
 8000772:	f107 031c 	add.w	r3, r7, #28
 8000776:	2200      	movs	r2, #0
 8000778:	601a      	str	r2, [r3, #0]
 800077a:	605a      	str	r2, [r3, #4]
 800077c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800077e:	463b      	mov	r3, r7
 8000780:	2200      	movs	r2, #0
 8000782:	601a      	str	r2, [r3, #0]
 8000784:	605a      	str	r2, [r3, #4]
 8000786:	609a      	str	r2, [r3, #8]
 8000788:	60da      	str	r2, [r3, #12]
 800078a:	611a      	str	r2, [r3, #16]
 800078c:	615a      	str	r2, [r3, #20]
 800078e:	619a      	str	r2, [r3, #24]
=======
 800077e:	f107 031c 	add.w	r3, r7, #28
 8000782:	2200      	movs	r2, #0
 8000784:	601a      	str	r2, [r3, #0]
 8000786:	605a      	str	r2, [r3, #4]
 8000788:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800078a:	463b      	mov	r3, r7
 800078c:	2200      	movs	r2, #0
 800078e:	601a      	str	r2, [r3, #0]
 8000790:	605a      	str	r2, [r3, #4]
 8000792:	609a      	str	r2, [r3, #8]
 8000794:	60da      	str	r2, [r3, #12]
 8000796:	611a      	str	r2, [r3, #16]
 8000798:	615a      	str	r2, [r3, #20]
 800079a:	619a      	str	r2, [r3, #24]
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
<<<<<<< HEAD
 80007a0:	4b20      	ldr	r3, [pc, #128]	; (8000824 <MX_TIM5_Init+0xa8>)
 80007a2:	4a21      	ldr	r2, [pc, #132]	; (8000828 <MX_TIM5_Init+0xac>)
 80007a4:	601a      	str	r2, [r3, #0]
=======
<<<<<<< HEAD
 8000790:	4b20      	ldr	r3, [pc, #128]	; (8000814 <MX_TIM5_Init+0xa8>)
 8000792:	4a21      	ldr	r2, [pc, #132]	; (8000818 <MX_TIM5_Init+0xac>)
 8000794:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 539;
 8000796:	4b1f      	ldr	r3, [pc, #124]	; (8000814 <MX_TIM5_Init+0xa8>)
 8000798:	f240 221b 	movw	r2, #539	; 0x21b
 800079c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800079e:	4b1d      	ldr	r3, [pc, #116]	; (8000814 <MX_TIM5_Init+0xa8>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 199999;
 80007a4:	4b1b      	ldr	r3, [pc, #108]	; (8000814 <MX_TIM5_Init+0xa8>)
 80007a6:	4a1d      	ldr	r2, [pc, #116]	; (800081c <MX_TIM5_Init+0xb0>)
 80007a8:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007aa:	4b1a      	ldr	r3, [pc, #104]	; (8000814 <MX_TIM5_Init+0xa8>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007b0:	4b18      	ldr	r3, [pc, #96]	; (8000814 <MX_TIM5_Init+0xa8>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim5) != HAL_OK)
 80007b6:	4817      	ldr	r0, [pc, #92]	; (8000814 <MX_TIM5_Init+0xa8>)
 80007b8:	f002 fe46 	bl	8003448 <HAL_TIM_OC_Init>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <MX_TIM5_Init+0x5a>
  {
    Error_Handler();
 80007c2:	f000 f92b 	bl	8000a1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007c6:	2300      	movs	r3, #0
 80007c8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007ca:	2300      	movs	r3, #0
 80007cc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80007ce:	f107 031c 	add.w	r3, r7, #28
 80007d2:	4619      	mov	r1, r3
 80007d4:	480f      	ldr	r0, [pc, #60]	; (8000814 <MX_TIM5_Init+0xa8>)
 80007d6:	f003 fb4d 	bl	8003e74 <HAL_TIMEx_MasterConfigSynchronization>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d001      	beq.n	80007e4 <MX_TIM5_Init+0x78>
  {
    Error_Handler();
 80007e0:	f000 f91c 	bl	8000a1c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80007e4:	2300      	movs	r3, #0
 80007e6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80007e8:	2300      	movs	r3, #0
 80007ea:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007ec:	2300      	movs	r3, #0
 80007ee:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007f0:	2300      	movs	r3, #0
 80007f2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007f4:	463b      	mov	r3, r7
 80007f6:	2200      	movs	r2, #0
 80007f8:	4619      	mov	r1, r3
 80007fa:	4806      	ldr	r0, [pc, #24]	; (8000814 <MX_TIM5_Init+0xa8>)
 80007fc:	f002 ff9a 	bl	8003734 <HAL_TIM_OC_ConfigChannel>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <MX_TIM5_Init+0x9e>
  {
    Error_Handler();
 8000806:	f000 f909 	bl	8000a1c <Error_Handler>
=======
 800079c:	4b20      	ldr	r3, [pc, #128]	; (8000820 <MX_TIM5_Init+0xa8>)
 800079e:	4a21      	ldr	r2, [pc, #132]	; (8000824 <MX_TIM5_Init+0xac>)
 80007a0:	601a      	str	r2, [r3, #0]
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  htim5.Init.Prescaler = 539;
 80007a6:	4b1f      	ldr	r3, [pc, #124]	; (8000824 <MX_TIM5_Init+0xa8>)
 80007a8:	f240 221b 	movw	r2, #539	; 0x21b
 80007ac:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007ae:	4b1d      	ldr	r3, [pc, #116]	; (8000824 <MX_TIM5_Init+0xa8>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 199999;
 80007b4:	4b1b      	ldr	r3, [pc, #108]	; (8000824 <MX_TIM5_Init+0xa8>)
 80007b6:	4a1d      	ldr	r2, [pc, #116]	; (800082c <MX_TIM5_Init+0xb0>)
 80007b8:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007ba:	4b1a      	ldr	r3, [pc, #104]	; (8000824 <MX_TIM5_Init+0xa8>)
 80007bc:	2200      	movs	r2, #0
 80007be:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007c0:	4b18      	ldr	r3, [pc, #96]	; (8000824 <MX_TIM5_Init+0xa8>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim5) != HAL_OK)
 80007c6:	4817      	ldr	r0, [pc, #92]	; (8000824 <MX_TIM5_Init+0xa8>)
 80007c8:	f002 fe46 	bl	8003458 <HAL_TIM_OC_Init>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <MX_TIM5_Init+0x5a>
  {
    Error_Handler();
 80007d2:	f000 f92b 	bl	8000a2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007d6:	2300      	movs	r3, #0
 80007d8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007da:	2300      	movs	r3, #0
 80007dc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80007de:	f107 031c 	add.w	r3, r7, #28
 80007e2:	4619      	mov	r1, r3
 80007e4:	480f      	ldr	r0, [pc, #60]	; (8000824 <MX_TIM5_Init+0xa8>)
 80007e6:	f003 fb4d 	bl	8003e84 <HAL_TIMEx_MasterConfigSynchronization>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <MX_TIM5_Init+0x78>
  {
    Error_Handler();
 80007f0:	f000 f91c 	bl	8000a2c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80007f4:	2300      	movs	r3, #0
 80007f6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80007f8:	2300      	movs	r3, #0
 80007fa:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007fc:	2300      	movs	r3, #0
 80007fe:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000800:	2300      	movs	r3, #0
 8000802:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000804:	463b      	mov	r3, r7
 8000806:	2200      	movs	r2, #0
 8000808:	4619      	mov	r1, r3
 800080a:	4806      	ldr	r0, [pc, #24]	; (8000824 <MX_TIM5_Init+0xa8>)
 800080c:	f002 ff9a 	bl	8003744 <HAL_TIM_OC_ConfigChannel>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <MX_TIM5_Init+0x9e>
  {
    Error_Handler();
<<<<<<< HEAD
 8000816:	f000 f909 	bl	8000a2c <Error_Handler>
=======
 8000812:	f000 f8f9 	bl	8000a08 <Error_Handler>
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
<<<<<<< HEAD
 800081a:	bf00      	nop
 800081c:	3728      	adds	r7, #40	; 0x28
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	200000d8 	.word	0x200000d8
 8000828:	40000c00 	.word	0x40000c00
 800082c:	00030d3f 	.word	0x00030d3f

08000830 <MX_UART5_Init>:
=======
<<<<<<< HEAD
 800080a:	bf00      	nop
 800080c:	3728      	adds	r7, #40	; 0x28
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	200000d8 	.word	0x200000d8
 8000818:	40000c00 	.word	0x40000c00
 800081c:	00030d3f 	.word	0x00030d3f

08000820 <MX_UART5_Init>:
=======
 8000816:	bf00      	nop
 8000818:	3728      	adds	r7, #40	; 0x28
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	200000d8 	.word	0x200000d8
 8000824:	40000c00 	.word	0x40000c00
 8000828:	00030d3f 	.word	0x00030d3f

0800082c <MX_UART5_Init>:
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
<<<<<<< HEAD
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
=======
<<<<<<< HEAD
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
=======
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
<<<<<<< HEAD
 8000834:	4b14      	ldr	r3, [pc, #80]	; (8000888 <MX_UART5_Init+0x58>)
 8000836:	4a15      	ldr	r2, [pc, #84]	; (800088c <MX_UART5_Init+0x5c>)
 8000838:	601a      	str	r2, [r3, #0]
=======
<<<<<<< HEAD
 8000824:	4b14      	ldr	r3, [pc, #80]	; (8000878 <MX_UART5_Init+0x58>)
 8000826:	4a15      	ldr	r2, [pc, #84]	; (800087c <MX_UART5_Init+0x5c>)
 8000828:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800082a:	4b13      	ldr	r3, [pc, #76]	; (8000878 <MX_UART5_Init+0x58>)
 800082c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000830:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000832:	4b11      	ldr	r3, [pc, #68]	; (8000878 <MX_UART5_Init+0x58>)
 8000834:	2200      	movs	r2, #0
 8000836:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000838:	4b0f      	ldr	r3, [pc, #60]	; (8000878 <MX_UART5_Init+0x58>)
 800083a:	2200      	movs	r2, #0
 800083c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800083e:	4b0e      	ldr	r3, [pc, #56]	; (8000878 <MX_UART5_Init+0x58>)
 8000840:	2200      	movs	r2, #0
 8000842:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000844:	4b0c      	ldr	r3, [pc, #48]	; (8000878 <MX_UART5_Init+0x58>)
 8000846:	220c      	movs	r2, #12
 8000848:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800084a:	4b0b      	ldr	r3, [pc, #44]	; (8000878 <MX_UART5_Init+0x58>)
 800084c:	2200      	movs	r2, #0
 800084e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000850:	4b09      	ldr	r3, [pc, #36]	; (8000878 <MX_UART5_Init+0x58>)
 8000852:	2200      	movs	r2, #0
 8000854:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000856:	4b08      	ldr	r3, [pc, #32]	; (8000878 <MX_UART5_Init+0x58>)
 8000858:	2200      	movs	r2, #0
 800085a:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800085c:	4b06      	ldr	r3, [pc, #24]	; (8000878 <MX_UART5_Init+0x58>)
 800085e:	2200      	movs	r2, #0
 8000860:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000862:	4805      	ldr	r0, [pc, #20]	; (8000878 <MX_UART5_Init+0x58>)
 8000864:	f003 fbb2 	bl	8003fcc <HAL_UART_Init>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <MX_UART5_Init+0x52>
  {
    Error_Handler();
 800086e:	f000 f8d5 	bl	8000a1c <Error_Handler>
=======
 8000830:	4b14      	ldr	r3, [pc, #80]	; (8000884 <MX_UART5_Init+0x58>)
 8000832:	4a15      	ldr	r2, [pc, #84]	; (8000888 <MX_UART5_Init+0x5c>)
 8000834:	601a      	str	r2, [r3, #0]
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  huart5.Init.BaudRate = 115200;
 800083a:	4b13      	ldr	r3, [pc, #76]	; (8000888 <MX_UART5_Init+0x58>)
 800083c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000840:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000842:	4b11      	ldr	r3, [pc, #68]	; (8000888 <MX_UART5_Init+0x58>)
 8000844:	2200      	movs	r2, #0
 8000846:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000848:	4b0f      	ldr	r3, [pc, #60]	; (8000888 <MX_UART5_Init+0x58>)
 800084a:	2200      	movs	r2, #0
 800084c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800084e:	4b0e      	ldr	r3, [pc, #56]	; (8000888 <MX_UART5_Init+0x58>)
 8000850:	2200      	movs	r2, #0
 8000852:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000854:	4b0c      	ldr	r3, [pc, #48]	; (8000888 <MX_UART5_Init+0x58>)
 8000856:	220c      	movs	r2, #12
 8000858:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800085a:	4b0b      	ldr	r3, [pc, #44]	; (8000888 <MX_UART5_Init+0x58>)
 800085c:	2200      	movs	r2, #0
 800085e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000860:	4b09      	ldr	r3, [pc, #36]	; (8000888 <MX_UART5_Init+0x58>)
 8000862:	2200      	movs	r2, #0
 8000864:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000866:	4b08      	ldr	r3, [pc, #32]	; (8000888 <MX_UART5_Init+0x58>)
 8000868:	2200      	movs	r2, #0
 800086a:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800086c:	4b06      	ldr	r3, [pc, #24]	; (8000888 <MX_UART5_Init+0x58>)
 800086e:	2200      	movs	r2, #0
 8000870:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000872:	4805      	ldr	r0, [pc, #20]	; (8000888 <MX_UART5_Init+0x58>)
 8000874:	f003 fbb2 	bl	8003fdc <HAL_UART_Init>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <MX_UART5_Init+0x52>
  {
    Error_Handler();
<<<<<<< HEAD
 800087e:	f000 f8d5 	bl	8000a2c <Error_Handler>
=======
 800087a:	f000 f8c5 	bl	8000a08 <Error_Handler>
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
<<<<<<< HEAD
=======
<<<<<<< HEAD
 8000872:	bf00      	nop
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	20000124 	.word	0x20000124
 800087c:	40005000 	.word	0x40005000

08000880 <MX_USART2_UART_Init>:
=======
 800087e:	bf00      	nop
 8000880:	bd80      	pop	{r7, pc}
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
 8000882:	bf00      	nop
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	20000124 	.word	0x20000124
 800088c:	40005000 	.word	0x40005000

<<<<<<< HEAD
08000890 <MX_USART2_UART_Init>:
=======
0800088c <MX_USART2_UART_Init>:
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
<<<<<<< HEAD
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
=======
<<<<<<< HEAD
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
=======
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
<<<<<<< HEAD
 8000894:	4b14      	ldr	r3, [pc, #80]	; (80008e8 <MX_USART2_UART_Init+0x58>)
 8000896:	4a15      	ldr	r2, [pc, #84]	; (80008ec <MX_USART2_UART_Init+0x5c>)
 8000898:	601a      	str	r2, [r3, #0]
=======
<<<<<<< HEAD
 8000884:	4b14      	ldr	r3, [pc, #80]	; (80008d8 <MX_USART2_UART_Init+0x58>)
 8000886:	4a15      	ldr	r2, [pc, #84]	; (80008dc <MX_USART2_UART_Init+0x5c>)
 8000888:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800088a:	4b13      	ldr	r3, [pc, #76]	; (80008d8 <MX_USART2_UART_Init+0x58>)
 800088c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000890:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000892:	4b11      	ldr	r3, [pc, #68]	; (80008d8 <MX_USART2_UART_Init+0x58>)
 8000894:	2200      	movs	r2, #0
 8000896:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000898:	4b0f      	ldr	r3, [pc, #60]	; (80008d8 <MX_USART2_UART_Init+0x58>)
 800089a:	2200      	movs	r2, #0
 800089c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800089e:	4b0e      	ldr	r3, [pc, #56]	; (80008d8 <MX_USART2_UART_Init+0x58>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008a4:	4b0c      	ldr	r3, [pc, #48]	; (80008d8 <MX_USART2_UART_Init+0x58>)
 80008a6:	220c      	movs	r2, #12
 80008a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008aa:	4b0b      	ldr	r3, [pc, #44]	; (80008d8 <MX_USART2_UART_Init+0x58>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008b0:	4b09      	ldr	r3, [pc, #36]	; (80008d8 <MX_USART2_UART_Init+0x58>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008b6:	4b08      	ldr	r3, [pc, #32]	; (80008d8 <MX_USART2_UART_Init+0x58>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008bc:	4b06      	ldr	r3, [pc, #24]	; (80008d8 <MX_USART2_UART_Init+0x58>)
 80008be:	2200      	movs	r2, #0
 80008c0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008c2:	4805      	ldr	r0, [pc, #20]	; (80008d8 <MX_USART2_UART_Init+0x58>)
 80008c4:	f003 fb82 	bl	8003fcc <HAL_UART_Init>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80008ce:	f000 f8a5 	bl	8000a1c <Error_Handler>
=======
 8000890:	4b14      	ldr	r3, [pc, #80]	; (80008e4 <MX_USART2_UART_Init+0x58>)
 8000892:	4a15      	ldr	r2, [pc, #84]	; (80008e8 <MX_USART2_UART_Init+0x5c>)
 8000894:	601a      	str	r2, [r3, #0]
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  huart2.Init.BaudRate = 115200;
 800089a:	4b13      	ldr	r3, [pc, #76]	; (80008e8 <MX_USART2_UART_Init+0x58>)
 800089c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008a2:	4b11      	ldr	r3, [pc, #68]	; (80008e8 <MX_USART2_UART_Init+0x58>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008a8:	4b0f      	ldr	r3, [pc, #60]	; (80008e8 <MX_USART2_UART_Init+0x58>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008ae:	4b0e      	ldr	r3, [pc, #56]	; (80008e8 <MX_USART2_UART_Init+0x58>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008b4:	4b0c      	ldr	r3, [pc, #48]	; (80008e8 <MX_USART2_UART_Init+0x58>)
 80008b6:	220c      	movs	r2, #12
 80008b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ba:	4b0b      	ldr	r3, [pc, #44]	; (80008e8 <MX_USART2_UART_Init+0x58>)
 80008bc:	2200      	movs	r2, #0
 80008be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008c0:	4b09      	ldr	r3, [pc, #36]	; (80008e8 <MX_USART2_UART_Init+0x58>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008c6:	4b08      	ldr	r3, [pc, #32]	; (80008e8 <MX_USART2_UART_Init+0x58>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008cc:	4b06      	ldr	r3, [pc, #24]	; (80008e8 <MX_USART2_UART_Init+0x58>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008d2:	4805      	ldr	r0, [pc, #20]	; (80008e8 <MX_USART2_UART_Init+0x58>)
 80008d4:	f003 fb82 	bl	8003fdc <HAL_UART_Init>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
<<<<<<< HEAD
 80008de:	f000 f8a5 	bl	8000a2c <Error_Handler>
=======
 80008da:	f000 f895 	bl	8000a08 <Error_Handler>
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
<<<<<<< HEAD
=======
<<<<<<< HEAD
 80008d2:	bf00      	nop
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	200001ac 	.word	0x200001ac
 80008dc:	40004400 	.word	0x40004400

080008e0 <MX_DMA_Init>:
=======
 80008de:	bf00      	nop
 80008e0:	bd80      	pop	{r7, pc}
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
 80008e2:	bf00      	nop
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	200001ac 	.word	0x200001ac
 80008ec:	40004400 	.word	0x40004400

<<<<<<< HEAD
080008f0 <MX_DMA_Init>:
=======
080008ec <MX_DMA_Init>:
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
<<<<<<< HEAD
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b082      	sub	sp, #8
 80008f4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80008f6:	4b0c      	ldr	r3, [pc, #48]	; (8000928 <MX_DMA_Init+0x38>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fa:	4a0b      	ldr	r2, [pc, #44]	; (8000928 <MX_DMA_Init+0x38>)
 80008fc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000900:	6313      	str	r3, [r2, #48]	; 0x30
 8000902:	4b09      	ldr	r3, [pc, #36]	; (8000928 <MX_DMA_Init+0x38>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000906:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800090a:	607b      	str	r3, [r7, #4]
 800090c:	687b      	ldr	r3, [r7, #4]
=======
<<<<<<< HEAD
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80008e6:	4b0c      	ldr	r3, [pc, #48]	; (8000918 <MX_DMA_Init+0x38>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ea:	4a0b      	ldr	r2, [pc, #44]	; (8000918 <MX_DMA_Init+0x38>)
 80008ec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80008f0:	6313      	str	r3, [r2, #48]	; 0x30
 80008f2:	4b09      	ldr	r3, [pc, #36]	; (8000918 <MX_DMA_Init+0x38>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80008fa:	607b      	str	r3, [r7, #4]
 80008fc:	687b      	ldr	r3, [r7, #4]
=======
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80008f2:	4b0c      	ldr	r3, [pc, #48]	; (8000924 <MX_DMA_Init+0x38>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f6:	4a0b      	ldr	r2, [pc, #44]	; (8000924 <MX_DMA_Init+0x38>)
 80008f8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80008fc:	6313      	str	r3, [r2, #48]	; 0x30
 80008fe:	4b09      	ldr	r3, [pc, #36]	; (8000924 <MX_DMA_Init+0x38>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000902:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000906:	607b      	str	r3, [r7, #4]
 8000908:	687b      	ldr	r3, [r7, #4]
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
<<<<<<< HEAD
 800090e:	2200      	movs	r2, #0
 8000910:	2100      	movs	r1, #0
 8000912:	2038      	movs	r0, #56	; 0x38
 8000914:	f000 fea3 	bl	800165e <HAL_NVIC_SetPriority>
=======
<<<<<<< HEAD
 80008fe:	2200      	movs	r2, #0
 8000900:	2100      	movs	r1, #0
 8000902:	2038      	movs	r0, #56	; 0x38
 8000904:	f000 fea3 	bl	800164e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000908:	2038      	movs	r0, #56	; 0x38
 800090a:	f000 febc 	bl	8001686 <HAL_NVIC_EnableIRQ>

}
 800090e:	bf00      	nop
 8000910:	3708      	adds	r7, #8
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	40023800 	.word	0x40023800

0800091c <MX_GPIO_Init>:
=======
 800090a:	2200      	movs	r2, #0
 800090c:	2100      	movs	r1, #0
 800090e:	2038      	movs	r0, #56	; 0x38
 8000910:	f000 fe93 	bl	800163a <HAL_NVIC_SetPriority>
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000918:	2038      	movs	r0, #56	; 0x38
 800091a:	f000 febc 	bl	8001696 <HAL_NVIC_EnableIRQ>

}
 800091e:	bf00      	nop
 8000920:	3708      	adds	r7, #8
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	40023800 	.word	0x40023800

<<<<<<< HEAD
0800092c <MX_GPIO_Init>:
=======
08000928 <MX_GPIO_Init>:
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
<<<<<<< HEAD
 800092c:	b580      	push	{r7, lr}
 800092e:	b08c      	sub	sp, #48	; 0x30
 8000930:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000932:	f107 031c 	add.w	r3, r7, #28
 8000936:	2200      	movs	r2, #0
 8000938:	601a      	str	r2, [r3, #0]
 800093a:	605a      	str	r2, [r3, #4]
 800093c:	609a      	str	r2, [r3, #8]
 800093e:	60da      	str	r2, [r3, #12]
 8000940:	611a      	str	r2, [r3, #16]
=======
<<<<<<< HEAD
 800091c:	b580      	push	{r7, lr}
 800091e:	b08c      	sub	sp, #48	; 0x30
 8000920:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000922:	f107 031c 	add.w	r3, r7, #28
 8000926:	2200      	movs	r2, #0
 8000928:	601a      	str	r2, [r3, #0]
 800092a:	605a      	str	r2, [r3, #4]
 800092c:	609a      	str	r2, [r3, #8]
 800092e:	60da      	str	r2, [r3, #12]
 8000930:	611a      	str	r2, [r3, #16]
=======
 8000928:	b580      	push	{r7, lr}
 800092a:	b08c      	sub	sp, #48	; 0x30
 800092c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800092e:	f107 031c 	add.w	r3, r7, #28
 8000932:	2200      	movs	r2, #0
 8000934:	601a      	str	r2, [r3, #0]
 8000936:	605a      	str	r2, [r3, #4]
 8000938:	609a      	str	r2, [r3, #8]
 800093a:	60da      	str	r2, [r3, #12]
 800093c:	611a      	str	r2, [r3, #16]
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
<<<<<<< HEAD
 8000942:	4b37      	ldr	r3, [pc, #220]	; (8000a20 <MX_GPIO_Init+0xf4>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000946:	4a36      	ldr	r2, [pc, #216]	; (8000a20 <MX_GPIO_Init+0xf4>)
 8000948:	f043 0304 	orr.w	r3, r3, #4
 800094c:	6313      	str	r3, [r2, #48]	; 0x30
 800094e:	4b34      	ldr	r3, [pc, #208]	; (8000a20 <MX_GPIO_Init+0xf4>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000952:	f003 0304 	and.w	r3, r3, #4
 8000956:	61bb      	str	r3, [r7, #24]
 8000958:	69bb      	ldr	r3, [r7, #24]
=======
<<<<<<< HEAD
 8000932:	4b37      	ldr	r3, [pc, #220]	; (8000a10 <MX_GPIO_Init+0xf4>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000936:	4a36      	ldr	r2, [pc, #216]	; (8000a10 <MX_GPIO_Init+0xf4>)
 8000938:	f043 0304 	orr.w	r3, r3, #4
 800093c:	6313      	str	r3, [r2, #48]	; 0x30
 800093e:	4b34      	ldr	r3, [pc, #208]	; (8000a10 <MX_GPIO_Init+0xf4>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000942:	f003 0304 	and.w	r3, r3, #4
 8000946:	61bb      	str	r3, [r7, #24]
 8000948:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800094a:	4b31      	ldr	r3, [pc, #196]	; (8000a10 <MX_GPIO_Init+0xf4>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094e:	4a30      	ldr	r2, [pc, #192]	; (8000a10 <MX_GPIO_Init+0xf4>)
 8000950:	f043 0320 	orr.w	r3, r3, #32
 8000954:	6313      	str	r3, [r2, #48]	; 0x30
 8000956:	4b2e      	ldr	r3, [pc, #184]	; (8000a10 <MX_GPIO_Init+0xf4>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095a:	f003 0320 	and.w	r3, r3, #32
 800095e:	617b      	str	r3, [r7, #20]
 8000960:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000962:	4b2b      	ldr	r3, [pc, #172]	; (8000a10 <MX_GPIO_Init+0xf4>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000966:	4a2a      	ldr	r2, [pc, #168]	; (8000a10 <MX_GPIO_Init+0xf4>)
 8000968:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800096c:	6313      	str	r3, [r2, #48]	; 0x30
 800096e:	4b28      	ldr	r3, [pc, #160]	; (8000a10 <MX_GPIO_Init+0xf4>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000972:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000976:	613b      	str	r3, [r7, #16]
 8000978:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800097a:	4b25      	ldr	r3, [pc, #148]	; (8000a10 <MX_GPIO_Init+0xf4>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097e:	4a24      	ldr	r2, [pc, #144]	; (8000a10 <MX_GPIO_Init+0xf4>)
 8000980:	f043 0301 	orr.w	r3, r3, #1
 8000984:	6313      	str	r3, [r2, #48]	; 0x30
 8000986:	4b22      	ldr	r3, [pc, #136]	; (8000a10 <MX_GPIO_Init+0xf4>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098a:	f003 0301 	and.w	r3, r3, #1
 800098e:	60fb      	str	r3, [r7, #12]
 8000990:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000992:	4b1f      	ldr	r3, [pc, #124]	; (8000a10 <MX_GPIO_Init+0xf4>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000996:	4a1e      	ldr	r2, [pc, #120]	; (8000a10 <MX_GPIO_Init+0xf4>)
 8000998:	f043 0302 	orr.w	r3, r3, #2
 800099c:	6313      	str	r3, [r2, #48]	; 0x30
 800099e:	4b1c      	ldr	r3, [pc, #112]	; (8000a10 <MX_GPIO_Init+0xf4>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a2:	f003 0302 	and.w	r3, r3, #2
 80009a6:	60bb      	str	r3, [r7, #8]
 80009a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009aa:	4b19      	ldr	r3, [pc, #100]	; (8000a10 <MX_GPIO_Init+0xf4>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ae:	4a18      	ldr	r2, [pc, #96]	; (8000a10 <MX_GPIO_Init+0xf4>)
 80009b0:	f043 0308 	orr.w	r3, r3, #8
 80009b4:	6313      	str	r3, [r2, #48]	; 0x30
 80009b6:	4b16      	ldr	r3, [pc, #88]	; (8000a10 <MX_GPIO_Init+0xf4>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ba:	f003 0308 	and.w	r3, r3, #8
 80009be:	607b      	str	r3, [r7, #4]
 80009c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80009c2:	2200      	movs	r2, #0
 80009c4:	f244 0181 	movw	r1, #16513	; 0x4081
 80009c8:	4812      	ldr	r0, [pc, #72]	; (8000a14 <MX_GPIO_Init+0xf8>)
 80009ca:	f001 fbb7 	bl	800213c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009d4:	2300      	movs	r3, #0
 80009d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d8:	2300      	movs	r3, #0
 80009da:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009dc:	f107 031c 	add.w	r3, r7, #28
 80009e0:	4619      	mov	r1, r3
 80009e2:	480d      	ldr	r0, [pc, #52]	; (8000a18 <MX_GPIO_Init+0xfc>)
 80009e4:	f001 f9e6 	bl	8001db4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80009e8:	f244 0381 	movw	r3, #16513	; 0x4081
 80009ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ee:	2301      	movs	r3, #1
 80009f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f2:	2300      	movs	r3, #0
 80009f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009f6:	2302      	movs	r3, #2
 80009f8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009fa:	f107 031c 	add.w	r3, r7, #28
 80009fe:	4619      	mov	r1, r3
 8000a00:	4804      	ldr	r0, [pc, #16]	; (8000a14 <MX_GPIO_Init+0xf8>)
 8000a02:	f001 f9d7 	bl	8001db4 <HAL_GPIO_Init>
=======
 800093e:	4b30      	ldr	r3, [pc, #192]	; (8000a00 <MX_GPIO_Init+0xd8>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000942:	4a2f      	ldr	r2, [pc, #188]	; (8000a00 <MX_GPIO_Init+0xd8>)
 8000944:	f043 0304 	orr.w	r3, r3, #4
 8000948:	6313      	str	r3, [r2, #48]	; 0x30
 800094a:	4b2d      	ldr	r3, [pc, #180]	; (8000a00 <MX_GPIO_Init+0xd8>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094e:	f003 0304 	and.w	r3, r3, #4
 8000952:	61bb      	str	r3, [r7, #24]
 8000954:	69bb      	ldr	r3, [r7, #24]
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800095a:	4b31      	ldr	r3, [pc, #196]	; (8000a20 <MX_GPIO_Init+0xf4>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095e:	4a30      	ldr	r2, [pc, #192]	; (8000a20 <MX_GPIO_Init+0xf4>)
 8000960:	f043 0320 	orr.w	r3, r3, #32
 8000964:	6313      	str	r3, [r2, #48]	; 0x30
 8000966:	4b2e      	ldr	r3, [pc, #184]	; (8000a20 <MX_GPIO_Init+0xf4>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096a:	f003 0320 	and.w	r3, r3, #32
 800096e:	617b      	str	r3, [r7, #20]
 8000970:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000972:	4b2b      	ldr	r3, [pc, #172]	; (8000a20 <MX_GPIO_Init+0xf4>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000976:	4a2a      	ldr	r2, [pc, #168]	; (8000a20 <MX_GPIO_Init+0xf4>)
 8000978:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800097c:	6313      	str	r3, [r2, #48]	; 0x30
 800097e:	4b28      	ldr	r3, [pc, #160]	; (8000a20 <MX_GPIO_Init+0xf4>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000982:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000986:	613b      	str	r3, [r7, #16]
 8000988:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800098a:	4b25      	ldr	r3, [pc, #148]	; (8000a20 <MX_GPIO_Init+0xf4>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098e:	4a24      	ldr	r2, [pc, #144]	; (8000a20 <MX_GPIO_Init+0xf4>)
 8000990:	f043 0301 	orr.w	r3, r3, #1
 8000994:	6313      	str	r3, [r2, #48]	; 0x30
 8000996:	4b22      	ldr	r3, [pc, #136]	; (8000a20 <MX_GPIO_Init+0xf4>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099a:	f003 0301 	and.w	r3, r3, #1
 800099e:	60fb      	str	r3, [r7, #12]
 80009a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009a2:	4b1f      	ldr	r3, [pc, #124]	; (8000a20 <MX_GPIO_Init+0xf4>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a6:	4a1e      	ldr	r2, [pc, #120]	; (8000a20 <MX_GPIO_Init+0xf4>)
 80009a8:	f043 0302 	orr.w	r3, r3, #2
 80009ac:	6313      	str	r3, [r2, #48]	; 0x30
 80009ae:	4b1c      	ldr	r3, [pc, #112]	; (8000a20 <MX_GPIO_Init+0xf4>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b2:	f003 0302 	and.w	r3, r3, #2
 80009b6:	60bb      	str	r3, [r7, #8]
 80009b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009ba:	4b19      	ldr	r3, [pc, #100]	; (8000a20 <MX_GPIO_Init+0xf4>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009be:	4a18      	ldr	r2, [pc, #96]	; (8000a20 <MX_GPIO_Init+0xf4>)
 80009c0:	f043 0308 	orr.w	r3, r3, #8
 80009c4:	6313      	str	r3, [r2, #48]	; 0x30
 80009c6:	4b16      	ldr	r3, [pc, #88]	; (8000a20 <MX_GPIO_Init+0xf4>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ca:	f003 0308 	and.w	r3, r3, #8
 80009ce:	607b      	str	r3, [r7, #4]
 80009d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80009d2:	2200      	movs	r2, #0
 80009d4:	f244 0181 	movw	r1, #16513	; 0x4081
 80009d8:	4812      	ldr	r0, [pc, #72]	; (8000a24 <MX_GPIO_Init+0xf8>)
 80009da:	f001 fbb7 	bl	800214c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009e4:	2300      	movs	r3, #0
 80009e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e8:	2300      	movs	r3, #0
 80009ea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009ec:	f107 031c 	add.w	r3, r7, #28
 80009f0:	4619      	mov	r1, r3
 80009f2:	480d      	ldr	r0, [pc, #52]	; (8000a28 <MX_GPIO_Init+0xfc>)
 80009f4:	f001 f9e6 	bl	8001dc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80009f8:	f244 0381 	movw	r3, #16513	; 0x4081
 80009fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009fe:	2301      	movs	r3, #1
 8000a00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a02:	2300      	movs	r3, #0
 8000a04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a06:	2302      	movs	r3, #2
 8000a08:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
<<<<<<< HEAD
 8000a0a:	f107 031c 	add.w	r3, r7, #28
 8000a0e:	4619      	mov	r1, r3
 8000a10:	4804      	ldr	r0, [pc, #16]	; (8000a24 <MX_GPIO_Init+0xf8>)
 8000a12:	f001 f9d7 	bl	8001dc4 <HAL_GPIO_Init>
=======
 80009ec:	f107 031c 	add.w	r3, r7, #28
 80009f0:	4619      	mov	r1, r3
 80009f2:	4804      	ldr	r0, [pc, #16]	; (8000a04 <MX_GPIO_Init+0xdc>)
 80009f4:	f001 f9d4 	bl	8001da0 <HAL_GPIO_Init>
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
<<<<<<< HEAD
 8000a16:	bf00      	nop
 8000a18:	3730      	adds	r7, #48	; 0x30
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	40023800 	.word	0x40023800
 8000a24:	40020400 	.word	0x40020400
 8000a28:	40020800 	.word	0x40020800

08000a2c <Error_Handler>:
=======
<<<<<<< HEAD
 8000a06:	bf00      	nop
 8000a08:	3730      	adds	r7, #48	; 0x30
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	40023800 	.word	0x40023800
 8000a14:	40020400 	.word	0x40020400
 8000a18:	40020800 	.word	0x40020800

08000a1c <Error_Handler>:
=======
 80009f8:	bf00      	nop
 80009fa:	3730      	adds	r7, #48	; 0x30
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	40023800 	.word	0x40023800
 8000a04:	40020400 	.word	0x40020400

08000a08 <Error_Handler>:
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
<<<<<<< HEAD
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
=======
<<<<<<< HEAD
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
=======
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
<<<<<<< HEAD
 8000a30:	b672      	cpsid	i
}
 8000a32:	bf00      	nop
=======
<<<<<<< HEAD
 8000a20:	b672      	cpsid	i
}
 8000a22:	bf00      	nop
=======
 8000a0c:	b672      	cpsid	i
}
 8000a0e:	bf00      	nop
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
<<<<<<< HEAD
 8000a34:	e7fe      	b.n	8000a34 <Error_Handler+0x8>
	...

08000a38 <HAL_MspInit>:
=======
<<<<<<< HEAD
 8000a24:	e7fe      	b.n	8000a24 <Error_Handler+0x8>
	...

08000a28 <HAL_MspInit>:
=======
 8000a10:	e7fe      	b.n	8000a10 <Error_Handler+0x8>
	...

08000a14 <HAL_MspInit>:
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
<<<<<<< HEAD
 8000a38:	b480      	push	{r7}
 8000a3a:	b083      	sub	sp, #12
 8000a3c:	af00      	add	r7, sp, #0
=======
<<<<<<< HEAD
 8000a28:	b480      	push	{r7}
 8000a2a:	b083      	sub	sp, #12
 8000a2c:	af00      	add	r7, sp, #0
=======
 8000a14:	b480      	push	{r7}
 8000a16:	b083      	sub	sp, #12
 8000a18:	af00      	add	r7, sp, #0
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
<<<<<<< HEAD
 8000a3e:	4b0f      	ldr	r3, [pc, #60]	; (8000a7c <HAL_MspInit+0x44>)
 8000a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a42:	4a0e      	ldr	r2, [pc, #56]	; (8000a7c <HAL_MspInit+0x44>)
 8000a44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a48:	6413      	str	r3, [r2, #64]	; 0x40
 8000a4a:	4b0c      	ldr	r3, [pc, #48]	; (8000a7c <HAL_MspInit+0x44>)
 8000a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a52:	607b      	str	r3, [r7, #4]
 8000a54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a56:	4b09      	ldr	r3, [pc, #36]	; (8000a7c <HAL_MspInit+0x44>)
 8000a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a5a:	4a08      	ldr	r2, [pc, #32]	; (8000a7c <HAL_MspInit+0x44>)
 8000a5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a60:	6453      	str	r3, [r2, #68]	; 0x44
 8000a62:	4b06      	ldr	r3, [pc, #24]	; (8000a7c <HAL_MspInit+0x44>)
 8000a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a6a:	603b      	str	r3, [r7, #0]
 8000a6c:	683b      	ldr	r3, [r7, #0]
=======
<<<<<<< HEAD
 8000a2e:	4b0f      	ldr	r3, [pc, #60]	; (8000a6c <HAL_MspInit+0x44>)
 8000a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a32:	4a0e      	ldr	r2, [pc, #56]	; (8000a6c <HAL_MspInit+0x44>)
 8000a34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a38:	6413      	str	r3, [r2, #64]	; 0x40
 8000a3a:	4b0c      	ldr	r3, [pc, #48]	; (8000a6c <HAL_MspInit+0x44>)
 8000a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a42:	607b      	str	r3, [r7, #4]
 8000a44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a46:	4b09      	ldr	r3, [pc, #36]	; (8000a6c <HAL_MspInit+0x44>)
 8000a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a4a:	4a08      	ldr	r2, [pc, #32]	; (8000a6c <HAL_MspInit+0x44>)
 8000a4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a50:	6453      	str	r3, [r2, #68]	; 0x44
 8000a52:	4b06      	ldr	r3, [pc, #24]	; (8000a6c <HAL_MspInit+0x44>)
 8000a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a5a:	603b      	str	r3, [r7, #0]
 8000a5c:	683b      	ldr	r3, [r7, #0]
=======
 8000a1a:	4b0f      	ldr	r3, [pc, #60]	; (8000a58 <HAL_MspInit+0x44>)
 8000a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a1e:	4a0e      	ldr	r2, [pc, #56]	; (8000a58 <HAL_MspInit+0x44>)
 8000a20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a24:	6413      	str	r3, [r2, #64]	; 0x40
 8000a26:	4b0c      	ldr	r3, [pc, #48]	; (8000a58 <HAL_MspInit+0x44>)
 8000a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a2e:	607b      	str	r3, [r7, #4]
 8000a30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a32:	4b09      	ldr	r3, [pc, #36]	; (8000a58 <HAL_MspInit+0x44>)
 8000a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a36:	4a08      	ldr	r2, [pc, #32]	; (8000a58 <HAL_MspInit+0x44>)
 8000a38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a3c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a3e:	4b06      	ldr	r3, [pc, #24]	; (8000a58 <HAL_MspInit+0x44>)
 8000a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a46:	603b      	str	r3, [r7, #0]
 8000a48:	683b      	ldr	r3, [r7, #0]
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
<<<<<<< HEAD
 8000a6e:	bf00      	nop
 8000a70:	370c      	adds	r7, #12
 8000a72:	46bd      	mov	sp, r7
 8000a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop
 8000a7c:	40023800 	.word	0x40023800

08000a80 <HAL_ADC_MspInit>:
=======
<<<<<<< HEAD
 8000a5e:	bf00      	nop
 8000a60:	370c      	adds	r7, #12
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop
 8000a6c:	40023800 	.word	0x40023800

08000a70 <HAL_ADC_MspInit>:
=======
 8000a4a:	bf00      	nop
 8000a4c:	370c      	adds	r7, #12
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop
 8000a58:	40023800 	.word	0x40023800

08000a5c <HAL_ADC_MspInit>:
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
<<<<<<< HEAD
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b08a      	sub	sp, #40	; 0x28
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
=======
<<<<<<< HEAD
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b08a      	sub	sp, #40	; 0x28
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a78:	f107 0314 	add.w	r3, r7, #20
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	601a      	str	r2, [r3, #0]
 8000a80:	605a      	str	r2, [r3, #4]
 8000a82:	609a      	str	r2, [r3, #8]
 8000a84:	60da      	str	r2, [r3, #12]
 8000a86:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	4a2d      	ldr	r2, [pc, #180]	; (8000b44 <HAL_ADC_MspInit+0xd4>)
 8000a8e:	4293      	cmp	r3, r2
 8000a90:	d153      	bne.n	8000b3a <HAL_ADC_MspInit+0xca>
=======
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b08a      	sub	sp, #40	; 0x28
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a88:	f107 0314 	add.w	r3, r7, #20
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	601a      	str	r2, [r3, #0]
 8000a90:	605a      	str	r2, [r3, #4]
 8000a92:	609a      	str	r2, [r3, #8]
 8000a94:	60da      	str	r2, [r3, #12]
 8000a96:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
<<<<<<< HEAD
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	4a2d      	ldr	r2, [pc, #180]	; (8000b54 <HAL_ADC_MspInit+0xd4>)
 8000a9e:	4293      	cmp	r3, r2
 8000aa0:	d153      	bne.n	8000b4a <HAL_ADC_MspInit+0xca>
=======
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4a2d      	ldr	r2, [pc, #180]	; (8000b30 <HAL_ADC_MspInit+0xd4>)
 8000a7a:	4293      	cmp	r3, r2
 8000a7c:	d153      	bne.n	8000b26 <HAL_ADC_MspInit+0xca>
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
<<<<<<< HEAD
 8000aa2:	4b2d      	ldr	r3, [pc, #180]	; (8000b58 <HAL_ADC_MspInit+0xd8>)
 8000aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aa6:	4a2c      	ldr	r2, [pc, #176]	; (8000b58 <HAL_ADC_MspInit+0xd8>)
 8000aa8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000aac:	6453      	str	r3, [r2, #68]	; 0x44
 8000aae:	4b2a      	ldr	r3, [pc, #168]	; (8000b58 <HAL_ADC_MspInit+0xd8>)
 8000ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ab2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ab6:	613b      	str	r3, [r7, #16]
 8000ab8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000aba:	4b27      	ldr	r3, [pc, #156]	; (8000b58 <HAL_ADC_MspInit+0xd8>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abe:	4a26      	ldr	r2, [pc, #152]	; (8000b58 <HAL_ADC_MspInit+0xd8>)
 8000ac0:	f043 0320 	orr.w	r3, r3, #32
 8000ac4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ac6:	4b24      	ldr	r3, [pc, #144]	; (8000b58 <HAL_ADC_MspInit+0xd8>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aca:	f003 0320 	and.w	r3, r3, #32
 8000ace:	60fb      	str	r3, [r7, #12]
 8000ad0:	68fb      	ldr	r3, [r7, #12]
=======
<<<<<<< HEAD
 8000a92:	4b2d      	ldr	r3, [pc, #180]	; (8000b48 <HAL_ADC_MspInit+0xd8>)
 8000a94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a96:	4a2c      	ldr	r2, [pc, #176]	; (8000b48 <HAL_ADC_MspInit+0xd8>)
 8000a98:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a9c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a9e:	4b2a      	ldr	r3, [pc, #168]	; (8000b48 <HAL_ADC_MspInit+0xd8>)
 8000aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aa2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000aa6:	613b      	str	r3, [r7, #16]
 8000aa8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000aaa:	4b27      	ldr	r3, [pc, #156]	; (8000b48 <HAL_ADC_MspInit+0xd8>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aae:	4a26      	ldr	r2, [pc, #152]	; (8000b48 <HAL_ADC_MspInit+0xd8>)
 8000ab0:	f043 0320 	orr.w	r3, r3, #32
 8000ab4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ab6:	4b24      	ldr	r3, [pc, #144]	; (8000b48 <HAL_ADC_MspInit+0xd8>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aba:	f003 0320 	and.w	r3, r3, #32
 8000abe:	60fb      	str	r3, [r7, #12]
 8000ac0:	68fb      	ldr	r3, [r7, #12]
=======
 8000a7e:	4b2d      	ldr	r3, [pc, #180]	; (8000b34 <HAL_ADC_MspInit+0xd8>)
 8000a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a82:	4a2c      	ldr	r2, [pc, #176]	; (8000b34 <HAL_ADC_MspInit+0xd8>)
 8000a84:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a88:	6453      	str	r3, [r2, #68]	; 0x44
 8000a8a:	4b2a      	ldr	r3, [pc, #168]	; (8000b34 <HAL_ADC_MspInit+0xd8>)
 8000a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000a92:	613b      	str	r3, [r7, #16]
 8000a94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a96:	4b27      	ldr	r3, [pc, #156]	; (8000b34 <HAL_ADC_MspInit+0xd8>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9a:	4a26      	ldr	r2, [pc, #152]	; (8000b34 <HAL_ADC_MspInit+0xd8>)
 8000a9c:	f043 0320 	orr.w	r3, r3, #32
 8000aa0:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa2:	4b24      	ldr	r3, [pc, #144]	; (8000b34 <HAL_ADC_MspInit+0xd8>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa6:	f003 0320 	and.w	r3, r3, #32
 8000aaa:	60fb      	str	r3, [r7, #12]
 8000aac:	68fb      	ldr	r3, [r7, #12]
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
    /**ADC3 GPIO Configuration
    PF3     ------> ADC3_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
<<<<<<< HEAD
 8000ad2:	2308      	movs	r3, #8
 8000ad4:	617b      	str	r3, [r7, #20]
=======
<<<<<<< HEAD
 8000ac2:	2308      	movs	r3, #8
 8000ac4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ac6:	2303      	movs	r3, #3
 8000ac8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aca:	2300      	movs	r3, #0
 8000acc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000ace:	f107 0314 	add.w	r3, r7, #20
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	481d      	ldr	r0, [pc, #116]	; (8000b4c <HAL_ADC_MspInit+0xdc>)
 8000ad6:	f001 f96d 	bl	8001db4 <HAL_GPIO_Init>
=======
 8000aae:	2308      	movs	r3, #8
 8000ab0:	617b      	str	r3, [r7, #20]
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ad6:	2303      	movs	r3, #3
 8000ad8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ada:	2300      	movs	r3, #0
 8000adc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
<<<<<<< HEAD
 8000ade:	f107 0314 	add.w	r3, r7, #20
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	481d      	ldr	r0, [pc, #116]	; (8000b5c <HAL_ADC_MspInit+0xdc>)
 8000ae6:	f001 f96d 	bl	8001dc4 <HAL_GPIO_Init>
=======
 8000aba:	f107 0314 	add.w	r3, r7, #20
 8000abe:	4619      	mov	r1, r3
 8000ac0:	481d      	ldr	r0, [pc, #116]	; (8000b38 <HAL_ADC_MspInit+0xdc>)
 8000ac2:	f001 f96d 	bl	8001da0 <HAL_GPIO_Init>
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637

    /* ADC3 DMA Init */
    /* ADC3 Init */
    hdma_adc3.Instance = DMA2_Stream0;
<<<<<<< HEAD
 8000aea:	4b1d      	ldr	r3, [pc, #116]	; (8000b60 <HAL_ADC_MspInit+0xe0>)
 8000aec:	4a1d      	ldr	r2, [pc, #116]	; (8000b64 <HAL_ADC_MspInit+0xe4>)
 8000aee:	601a      	str	r2, [r3, #0]
=======
<<<<<<< HEAD
 8000ada:	4b1d      	ldr	r3, [pc, #116]	; (8000b50 <HAL_ADC_MspInit+0xe0>)
 8000adc:	4a1d      	ldr	r2, [pc, #116]	; (8000b54 <HAL_ADC_MspInit+0xe4>)
 8000ade:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 8000ae0:	4b1b      	ldr	r3, [pc, #108]	; (8000b50 <HAL_ADC_MspInit+0xe0>)
 8000ae2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000ae6:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ae8:	4b19      	ldr	r3, [pc, #100]	; (8000b50 <HAL_ADC_MspInit+0xe0>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000aee:	4b18      	ldr	r3, [pc, #96]	; (8000b50 <HAL_ADC_MspInit+0xe0>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8000af4:	4b16      	ldr	r3, [pc, #88]	; (8000b50 <HAL_ADC_MspInit+0xe0>)
 8000af6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000afa:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000afc:	4b14      	ldr	r3, [pc, #80]	; (8000b50 <HAL_ADC_MspInit+0xe0>)
 8000afe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b02:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b04:	4b12      	ldr	r3, [pc, #72]	; (8000b50 <HAL_ADC_MspInit+0xe0>)
 8000b06:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b0a:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_NORMAL;
 8000b0c:	4b10      	ldr	r3, [pc, #64]	; (8000b50 <HAL_ADC_MspInit+0xe0>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8000b12:	4b0f      	ldr	r3, [pc, #60]	; (8000b50 <HAL_ADC_MspInit+0xe0>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b18:	4b0d      	ldr	r3, [pc, #52]	; (8000b50 <HAL_ADC_MspInit+0xe0>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8000b1e:	480c      	ldr	r0, [pc, #48]	; (8000b50 <HAL_ADC_MspInit+0xe0>)
 8000b20:	f000 fdcc 	bl	80016bc <HAL_DMA_Init>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 8000b2a:	f7ff ff77 	bl	8000a1c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	4a07      	ldr	r2, [pc, #28]	; (8000b50 <HAL_ADC_MspInit+0xe0>)
 8000b32:	639a      	str	r2, [r3, #56]	; 0x38
 8000b34:	4a06      	ldr	r2, [pc, #24]	; (8000b50 <HAL_ADC_MspInit+0xe0>)
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	6393      	str	r3, [r2, #56]	; 0x38
=======
 8000ac6:	4b1d      	ldr	r3, [pc, #116]	; (8000b3c <HAL_ADC_MspInit+0xe0>)
 8000ac8:	4a1d      	ldr	r2, [pc, #116]	; (8000b40 <HAL_ADC_MspInit+0xe4>)
 8000aca:	601a      	str	r2, [r3, #0]
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 8000af0:	4b1b      	ldr	r3, [pc, #108]	; (8000b60 <HAL_ADC_MspInit+0xe0>)
 8000af2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000af6:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000af8:	4b19      	ldr	r3, [pc, #100]	; (8000b60 <HAL_ADC_MspInit+0xe0>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000afe:	4b18      	ldr	r3, [pc, #96]	; (8000b60 <HAL_ADC_MspInit+0xe0>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8000b04:	4b16      	ldr	r3, [pc, #88]	; (8000b60 <HAL_ADC_MspInit+0xe0>)
 8000b06:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b0a:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b0c:	4b14      	ldr	r3, [pc, #80]	; (8000b60 <HAL_ADC_MspInit+0xe0>)
 8000b0e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b12:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b14:	4b12      	ldr	r3, [pc, #72]	; (8000b60 <HAL_ADC_MspInit+0xe0>)
 8000b16:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b1a:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_NORMAL;
 8000b1c:	4b10      	ldr	r3, [pc, #64]	; (8000b60 <HAL_ADC_MspInit+0xe0>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8000b22:	4b0f      	ldr	r3, [pc, #60]	; (8000b60 <HAL_ADC_MspInit+0xe0>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b28:	4b0d      	ldr	r3, [pc, #52]	; (8000b60 <HAL_ADC_MspInit+0xe0>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8000b2e:	480c      	ldr	r0, [pc, #48]	; (8000b60 <HAL_ADC_MspInit+0xe0>)
 8000b30:	f000 fdcc 	bl	80016cc <HAL_DMA_Init>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d001      	beq.n	8000b3e <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 8000b3a:	f7ff ff77 	bl	8000a2c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
<<<<<<< HEAD
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	4a07      	ldr	r2, [pc, #28]	; (8000b60 <HAL_ADC_MspInit+0xe0>)
 8000b42:	639a      	str	r2, [r3, #56]	; 0x38
 8000b44:	4a06      	ldr	r2, [pc, #24]	; (8000b60 <HAL_ADC_MspInit+0xe0>)
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	6393      	str	r3, [r2, #56]	; 0x38
=======
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	4a07      	ldr	r2, [pc, #28]	; (8000b3c <HAL_ADC_MspInit+0xe0>)
 8000b1e:	639a      	str	r2, [r3, #56]	; 0x38
 8000b20:	4a06      	ldr	r2, [pc, #24]	; (8000b3c <HAL_ADC_MspInit+0xe0>)
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	6393      	str	r3, [r2, #56]	; 0x38
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
<<<<<<< HEAD
 8000b4a:	bf00      	nop
 8000b4c:	3728      	adds	r7, #40	; 0x28
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	40012200 	.word	0x40012200
 8000b58:	40023800 	.word	0x40023800
 8000b5c:	40021400 	.word	0x40021400
 8000b60:	20000078 	.word	0x20000078
 8000b64:	40026410 	.word	0x40026410

08000b68 <HAL_TIM_OC_MspInit>:
=======
<<<<<<< HEAD
 8000b3a:	bf00      	nop
 8000b3c:	3728      	adds	r7, #40	; 0x28
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	40012200 	.word	0x40012200
 8000b48:	40023800 	.word	0x40023800
 8000b4c:	40021400 	.word	0x40021400
 8000b50:	20000078 	.word	0x20000078
 8000b54:	40026410 	.word	0x40026410

08000b58 <HAL_TIM_OC_MspInit>:
=======
 8000b26:	bf00      	nop
 8000b28:	3728      	adds	r7, #40	; 0x28
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	40012200 	.word	0x40012200
 8000b34:	40023800 	.word	0x40023800
 8000b38:	40021400 	.word	0x40021400
 8000b3c:	20000078 	.word	0x20000078
 8000b40:	40026410 	.word	0x40026410

08000b44 <HAL_TIM_OC_MspInit>:
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
<<<<<<< HEAD
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b084      	sub	sp, #16
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM5)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	4a0d      	ldr	r2, [pc, #52]	; (8000bac <HAL_TIM_OC_MspInit+0x44>)
 8000b76:	4293      	cmp	r3, r2
 8000b78:	d113      	bne.n	8000ba2 <HAL_TIM_OC_MspInit+0x3a>
=======
<<<<<<< HEAD
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b084      	sub	sp, #16
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM5)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	4a0d      	ldr	r2, [pc, #52]	; (8000b9c <HAL_TIM_OC_MspInit+0x44>)
 8000b66:	4293      	cmp	r3, r2
 8000b68:	d113      	bne.n	8000b92 <HAL_TIM_OC_MspInit+0x3a>
=======
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b084      	sub	sp, #16
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM5)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	4a0d      	ldr	r2, [pc, #52]	; (8000b88 <HAL_TIM_OC_MspInit+0x44>)
 8000b52:	4293      	cmp	r3, r2
 8000b54:	d113      	bne.n	8000b7e <HAL_TIM_OC_MspInit+0x3a>
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
<<<<<<< HEAD
 8000b7a:	4b0d      	ldr	r3, [pc, #52]	; (8000bb0 <HAL_TIM_OC_MspInit+0x48>)
 8000b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b7e:	4a0c      	ldr	r2, [pc, #48]	; (8000bb0 <HAL_TIM_OC_MspInit+0x48>)
 8000b80:	f043 0308 	orr.w	r3, r3, #8
 8000b84:	6413      	str	r3, [r2, #64]	; 0x40
 8000b86:	4b0a      	ldr	r3, [pc, #40]	; (8000bb0 <HAL_TIM_OC_MspInit+0x48>)
 8000b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b8a:	f003 0308 	and.w	r3, r3, #8
 8000b8e:	60fb      	str	r3, [r7, #12]
 8000b90:	68fb      	ldr	r3, [r7, #12]
=======
<<<<<<< HEAD
 8000b6a:	4b0d      	ldr	r3, [pc, #52]	; (8000ba0 <HAL_TIM_OC_MspInit+0x48>)
 8000b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b6e:	4a0c      	ldr	r2, [pc, #48]	; (8000ba0 <HAL_TIM_OC_MspInit+0x48>)
 8000b70:	f043 0308 	orr.w	r3, r3, #8
 8000b74:	6413      	str	r3, [r2, #64]	; 0x40
 8000b76:	4b0a      	ldr	r3, [pc, #40]	; (8000ba0 <HAL_TIM_OC_MspInit+0x48>)
 8000b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b7a:	f003 0308 	and.w	r3, r3, #8
 8000b7e:	60fb      	str	r3, [r7, #12]
 8000b80:	68fb      	ldr	r3, [r7, #12]
    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8000b82:	2200      	movs	r2, #0
 8000b84:	2100      	movs	r1, #0
 8000b86:	2032      	movs	r0, #50	; 0x32
 8000b88:	f000 fd61 	bl	800164e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8000b8c:	2032      	movs	r0, #50	; 0x32
 8000b8e:	f000 fd7a 	bl	8001686 <HAL_NVIC_EnableIRQ>
=======
 8000b56:	4b0d      	ldr	r3, [pc, #52]	; (8000b8c <HAL_TIM_OC_MspInit+0x48>)
 8000b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b5a:	4a0c      	ldr	r2, [pc, #48]	; (8000b8c <HAL_TIM_OC_MspInit+0x48>)
 8000b5c:	f043 0308 	orr.w	r3, r3, #8
 8000b60:	6413      	str	r3, [r2, #64]	; 0x40
 8000b62:	4b0a      	ldr	r3, [pc, #40]	; (8000b8c <HAL_TIM_OC_MspInit+0x48>)
 8000b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b66:	f003 0308 	and.w	r3, r3, #8
 8000b6a:	60fb      	str	r3, [r7, #12]
 8000b6c:	68fb      	ldr	r3, [r7, #12]
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8000b92:	2200      	movs	r2, #0
 8000b94:	2100      	movs	r1, #0
 8000b96:	2032      	movs	r0, #50	; 0x32
 8000b98:	f000 fd61 	bl	800165e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
<<<<<<< HEAD
 8000b9c:	2032      	movs	r0, #50	; 0x32
 8000b9e:	f000 fd7a 	bl	8001696 <HAL_NVIC_EnableIRQ>
=======
 8000b78:	2032      	movs	r0, #50	; 0x32
 8000b7a:	f000 fd7a 	bl	8001672 <HAL_NVIC_EnableIRQ>
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
<<<<<<< HEAD
 8000ba2:	bf00      	nop
 8000ba4:	3710      	adds	r7, #16
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	40000c00 	.word	0x40000c00
 8000bb0:	40023800 	.word	0x40023800

08000bb4 <HAL_UART_MspInit>:
=======
<<<<<<< HEAD
 8000b92:	bf00      	nop
 8000b94:	3710      	adds	r7, #16
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	40000c00 	.word	0x40000c00
 8000ba0:	40023800 	.word	0x40023800

08000ba4 <HAL_UART_MspInit>:
=======
 8000b7e:	bf00      	nop
 8000b80:	3710      	adds	r7, #16
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	40000c00 	.word	0x40000c00
 8000b8c:	40023800 	.word	0x40023800

08000b90 <HAL_UART_MspInit>:
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
<<<<<<< HEAD
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b0ae      	sub	sp, #184	; 0xb8
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
=======
<<<<<<< HEAD
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b0ae      	sub	sp, #184	; 0xb8
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bac:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	601a      	str	r2, [r3, #0]
 8000bb4:	605a      	str	r2, [r3, #4]
 8000bb6:	609a      	str	r2, [r3, #8]
 8000bb8:	60da      	str	r2, [r3, #12]
 8000bba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bbc:	f107 0320 	add.w	r3, r7, #32
 8000bc0:	2284      	movs	r2, #132	; 0x84
 8000bc2:	2100      	movs	r1, #0
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f004 f9e8 	bl	8004f9a <memset>
  if(huart->Instance==UART5)
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	4a5b      	ldr	r2, [pc, #364]	; (8000d3c <HAL_UART_MspInit+0x198>)
 8000bd0:	4293      	cmp	r3, r2
 8000bd2:	d166      	bne.n	8000ca2 <HAL_UART_MspInit+0xfe>
=======
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b0ae      	sub	sp, #184	; 0xb8
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bbc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	601a      	str	r2, [r3, #0]
 8000bc4:	605a      	str	r2, [r3, #4]
 8000bc6:	609a      	str	r2, [r3, #8]
 8000bc8:	60da      	str	r2, [r3, #12]
 8000bca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bcc:	f107 0320 	add.w	r3, r7, #32
 8000bd0:	2284      	movs	r2, #132	; 0x84
 8000bd2:	2100      	movs	r1, #0
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f004 f9e8 	bl	8004faa <memset>
  if(huart->Instance==UART5)
<<<<<<< HEAD
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	4a5b      	ldr	r2, [pc, #364]	; (8000d4c <HAL_UART_MspInit+0x198>)
 8000be0:	4293      	cmp	r3, r2
 8000be2:	d166      	bne.n	8000cb2 <HAL_UART_MspInit+0xfe>
=======
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	4a5b      	ldr	r2, [pc, #364]	; (8000d28 <HAL_UART_MspInit+0x198>)
 8000bbc:	4293      	cmp	r3, r2
 8000bbe:	d166      	bne.n	8000c8e <HAL_UART_MspInit+0xfe>
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637

  /* USER CODE END UART5_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
<<<<<<< HEAD
 8000be4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000be8:	623b      	str	r3, [r7, #32]
=======
<<<<<<< HEAD
 8000bd4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bd8:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bde:	f107 0320 	add.w	r3, r7, #32
 8000be2:	4618      	mov	r0, r3
 8000be4:	f001 ffc8 	bl	8002b78 <HAL_RCCEx_PeriphCLKConfig>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000bee:	f7ff ff15 	bl	8000a1c <Error_Handler>
=======
 8000bc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bc4:	623b      	str	r3, [r7, #32]
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
    PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8000bea:	2300      	movs	r3, #0
 8000bec:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bee:	f107 0320 	add.w	r3, r7, #32
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f001 ffc8 	bl	8002b88 <HAL_RCCEx_PeriphCLKConfig>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
<<<<<<< HEAD
 8000bfe:	f7ff ff15 	bl	8000a2c <Error_Handler>
=======
 8000bda:	f7ff ff15 	bl	8000a08 <Error_Handler>
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
<<<<<<< HEAD
 8000c02:	4b53      	ldr	r3, [pc, #332]	; (8000d50 <HAL_UART_MspInit+0x19c>)
 8000c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c06:	4a52      	ldr	r2, [pc, #328]	; (8000d50 <HAL_UART_MspInit+0x19c>)
 8000c08:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000c0c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c0e:	4b50      	ldr	r3, [pc, #320]	; (8000d50 <HAL_UART_MspInit+0x19c>)
 8000c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c16:	61fb      	str	r3, [r7, #28]
 8000c18:	69fb      	ldr	r3, [r7, #28]
=======
<<<<<<< HEAD
 8000bf2:	4b53      	ldr	r3, [pc, #332]	; (8000d40 <HAL_UART_MspInit+0x19c>)
 8000bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf6:	4a52      	ldr	r2, [pc, #328]	; (8000d40 <HAL_UART_MspInit+0x19c>)
 8000bf8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000bfc:	6413      	str	r3, [r2, #64]	; 0x40
 8000bfe:	4b50      	ldr	r3, [pc, #320]	; (8000d40 <HAL_UART_MspInit+0x19c>)
 8000c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c06:	61fb      	str	r3, [r7, #28]
 8000c08:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c0a:	4b4d      	ldr	r3, [pc, #308]	; (8000d40 <HAL_UART_MspInit+0x19c>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0e:	4a4c      	ldr	r2, [pc, #304]	; (8000d40 <HAL_UART_MspInit+0x19c>)
 8000c10:	f043 0304 	orr.w	r3, r3, #4
 8000c14:	6313      	str	r3, [r2, #48]	; 0x30
 8000c16:	4b4a      	ldr	r3, [pc, #296]	; (8000d40 <HAL_UART_MspInit+0x19c>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1a:	f003 0304 	and.w	r3, r3, #4
 8000c1e:	61bb      	str	r3, [r7, #24]
 8000c20:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c22:	4b47      	ldr	r3, [pc, #284]	; (8000d40 <HAL_UART_MspInit+0x19c>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c26:	4a46      	ldr	r2, [pc, #280]	; (8000d40 <HAL_UART_MspInit+0x19c>)
 8000c28:	f043 0308 	orr.w	r3, r3, #8
 8000c2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c2e:	4b44      	ldr	r3, [pc, #272]	; (8000d40 <HAL_UART_MspInit+0x19c>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c32:	f003 0308 	and.w	r3, r3, #8
 8000c36:	617b      	str	r3, [r7, #20]
 8000c38:	697b      	ldr	r3, [r7, #20]
=======
 8000bde:	4b53      	ldr	r3, [pc, #332]	; (8000d2c <HAL_UART_MspInit+0x19c>)
 8000be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be2:	4a52      	ldr	r2, [pc, #328]	; (8000d2c <HAL_UART_MspInit+0x19c>)
 8000be4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000be8:	6413      	str	r3, [r2, #64]	; 0x40
 8000bea:	4b50      	ldr	r3, [pc, #320]	; (8000d2c <HAL_UART_MspInit+0x19c>)
 8000bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000bf2:	61fb      	str	r3, [r7, #28]
 8000bf4:	69fb      	ldr	r3, [r7, #28]
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c1a:	4b4d      	ldr	r3, [pc, #308]	; (8000d50 <HAL_UART_MspInit+0x19c>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
<<<<<<< HEAD
 8000c1e:	4a4c      	ldr	r2, [pc, #304]	; (8000d50 <HAL_UART_MspInit+0x19c>)
 8000c20:	f043 0304 	orr.w	r3, r3, #4
 8000c24:	6313      	str	r3, [r2, #48]	; 0x30
 8000c26:	4b4a      	ldr	r3, [pc, #296]	; (8000d50 <HAL_UART_MspInit+0x19c>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2a:	f003 0304 	and.w	r3, r3, #4
 8000c2e:	61bb      	str	r3, [r7, #24]
 8000c30:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c32:	4b47      	ldr	r3, [pc, #284]	; (8000d50 <HAL_UART_MspInit+0x19c>)
 8000c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c36:	4a46      	ldr	r2, [pc, #280]	; (8000d50 <HAL_UART_MspInit+0x19c>)
 8000c38:	f043 0308 	orr.w	r3, r3, #8
 8000c3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c3e:	4b44      	ldr	r3, [pc, #272]	; (8000d50 <HAL_UART_MspInit+0x19c>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c42:	f003 0308 	and.w	r3, r3, #8
 8000c46:	617b      	str	r3, [r7, #20]
 8000c48:	697b      	ldr	r3, [r7, #20]
=======
 8000c1e:	f003 0308 	and.w	r3, r3, #8
 8000c22:	617b      	str	r3, [r7, #20]
 8000c24:	697b      	ldr	r3, [r7, #20]
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
<<<<<<< HEAD
 8000c4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c4e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
=======
<<<<<<< HEAD
 8000c3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c3e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c42:	2302      	movs	r3, #2
 8000c44:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c4e:	2303      	movs	r3, #3
 8000c50:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000c54:	2308      	movs	r3, #8
 8000c56:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c5a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000c5e:	4619      	mov	r1, r3
 8000c60:	4838      	ldr	r0, [pc, #224]	; (8000d44 <HAL_UART_MspInit+0x1a0>)
 8000c62:	f001 f8a7 	bl	8001db4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000c66:	2304      	movs	r3, #4
 8000c68:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c6c:	2302      	movs	r3, #2
 8000c6e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c72:	2300      	movs	r3, #0
 8000c74:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c78:	2303      	movs	r3, #3
 8000c7a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000c7e:	2308      	movs	r3, #8
 8000c80:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c84:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000c88:	4619      	mov	r1, r3
 8000c8a:	482f      	ldr	r0, [pc, #188]	; (8000d48 <HAL_UART_MspInit+0x1a4>)
 8000c8c:	f001 f892 	bl	8001db4 <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8000c90:	2200      	movs	r2, #0
 8000c92:	2100      	movs	r1, #0
 8000c94:	2035      	movs	r0, #53	; 0x35
 8000c96:	f000 fcda 	bl	800164e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8000c9a:	2035      	movs	r0, #53	; 0x35
 8000c9c:	f000 fcf3 	bl	8001686 <HAL_NVIC_EnableIRQ>
=======
 8000c26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c2a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c52:	2302      	movs	r3, #2
 8000c54:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c5e:	2303      	movs	r3, #3
 8000c60:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000c64:	2308      	movs	r3, #8
 8000c66:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c6a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000c6e:	4619      	mov	r1, r3
 8000c70:	4838      	ldr	r0, [pc, #224]	; (8000d54 <HAL_UART_MspInit+0x1a0>)
 8000c72:	f001 f8a7 	bl	8001dc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000c76:	2304      	movs	r3, #4
 8000c78:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c7c:	2302      	movs	r3, #2
 8000c7e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c82:	2300      	movs	r3, #0
 8000c84:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c88:	2303      	movs	r3, #3
 8000c8a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000c8e:	2308      	movs	r3, #8
 8000c90:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c94:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000c98:	4619      	mov	r1, r3
 8000c9a:	482f      	ldr	r0, [pc, #188]	; (8000d58 <HAL_UART_MspInit+0x1a4>)
 8000c9c:	f001 f892 	bl	8001dc4 <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	2100      	movs	r1, #0
 8000ca4:	2035      	movs	r0, #53	; 0x35
 8000ca6:	f000 fcda 	bl	800165e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
<<<<<<< HEAD
 8000caa:	2035      	movs	r0, #53	; 0x35
 8000cac:	f000 fcf3 	bl	8001696 <HAL_NVIC_EnableIRQ>
=======
 8000c86:	2035      	movs	r0, #53	; 0x35
 8000c88:	f000 fcf3 	bl	8001672 <HAL_NVIC_EnableIRQ>
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
<<<<<<< HEAD
 8000cb0:	e047      	b.n	8000d42 <HAL_UART_MspInit+0x18e>
=======
<<<<<<< HEAD
 8000ca0:	e047      	b.n	8000d32 <HAL_UART_MspInit+0x18e>
  else if(huart->Instance==USART2)
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	4a29      	ldr	r2, [pc, #164]	; (8000d4c <HAL_UART_MspInit+0x1a8>)
 8000ca8:	4293      	cmp	r3, r2
 8000caa:	d142      	bne.n	8000d32 <HAL_UART_MspInit+0x18e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000cac:	2380      	movs	r3, #128	; 0x80
 8000cae:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cb4:	f107 0320 	add.w	r3, r7, #32
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f001 ff5d 	bl	8002b78 <HAL_RCCEx_PeriphCLKConfig>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <HAL_UART_MspInit+0x124>
      Error_Handler();
 8000cc4:	f7ff feaa 	bl	8000a1c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cc8:	4b1d      	ldr	r3, [pc, #116]	; (8000d40 <HAL_UART_MspInit+0x19c>)
 8000cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ccc:	4a1c      	ldr	r2, [pc, #112]	; (8000d40 <HAL_UART_MspInit+0x19c>)
 8000cce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cd2:	6413      	str	r3, [r2, #64]	; 0x40
 8000cd4:	4b1a      	ldr	r3, [pc, #104]	; (8000d40 <HAL_UART_MspInit+0x19c>)
 8000cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cdc:	613b      	str	r3, [r7, #16]
 8000cde:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ce0:	4b17      	ldr	r3, [pc, #92]	; (8000d40 <HAL_UART_MspInit+0x19c>)
 8000ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce4:	4a16      	ldr	r2, [pc, #88]	; (8000d40 <HAL_UART_MspInit+0x19c>)
 8000ce6:	f043 0301 	orr.w	r3, r3, #1
 8000cea:	6313      	str	r3, [r2, #48]	; 0x30
 8000cec:	4b14      	ldr	r3, [pc, #80]	; (8000d40 <HAL_UART_MspInit+0x19c>)
 8000cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf0:	f003 0301 	and.w	r3, r3, #1
 8000cf4:	60fb      	str	r3, [r7, #12]
 8000cf6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000cf8:	230c      	movs	r3, #12
 8000cfa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cfe:	2302      	movs	r3, #2
 8000d00:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d04:	2300      	movs	r3, #0
 8000d06:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d0a:	2303      	movs	r3, #3
 8000d0c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d10:	2307      	movs	r3, #7
 8000d12:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d16:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	480c      	ldr	r0, [pc, #48]	; (8000d50 <HAL_UART_MspInit+0x1ac>)
 8000d1e:	f001 f849 	bl	8001db4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000d22:	2200      	movs	r2, #0
 8000d24:	2100      	movs	r1, #0
 8000d26:	2026      	movs	r0, #38	; 0x26
 8000d28:	f000 fc91 	bl	800164e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000d2c:	2026      	movs	r0, #38	; 0x26
 8000d2e:	f000 fcaa 	bl	8001686 <HAL_NVIC_EnableIRQ>
}
 8000d32:	bf00      	nop
 8000d34:	37b8      	adds	r7, #184	; 0xb8
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	40005000 	.word	0x40005000
 8000d40:	40023800 	.word	0x40023800
 8000d44:	40020800 	.word	0x40020800
 8000d48:	40020c00 	.word	0x40020c00
 8000d4c:	40004400 	.word	0x40004400
 8000d50:	40020000 	.word	0x40020000

08000d54 <NMI_Handler>:
=======
 8000c8c:	e047      	b.n	8000d1e <HAL_UART_MspInit+0x18e>
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  else if(huart->Instance==USART2)
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	4a29      	ldr	r2, [pc, #164]	; (8000d5c <HAL_UART_MspInit+0x1a8>)
 8000cb8:	4293      	cmp	r3, r2
 8000cba:	d142      	bne.n	8000d42 <HAL_UART_MspInit+0x18e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000cbc:	2380      	movs	r3, #128	; 0x80
 8000cbe:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cc4:	f107 0320 	add.w	r3, r7, #32
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f001 ff5d 	bl	8002b88 <HAL_RCCEx_PeriphCLKConfig>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d001      	beq.n	8000cd8 <HAL_UART_MspInit+0x124>
      Error_Handler();
 8000cd4:	f7ff feaa 	bl	8000a2c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cd8:	4b1d      	ldr	r3, [pc, #116]	; (8000d50 <HAL_UART_MspInit+0x19c>)
 8000cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cdc:	4a1c      	ldr	r2, [pc, #112]	; (8000d50 <HAL_UART_MspInit+0x19c>)
 8000cde:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ce2:	6413      	str	r3, [r2, #64]	; 0x40
 8000ce4:	4b1a      	ldr	r3, [pc, #104]	; (8000d50 <HAL_UART_MspInit+0x19c>)
 8000ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cec:	613b      	str	r3, [r7, #16]
 8000cee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cf0:	4b17      	ldr	r3, [pc, #92]	; (8000d50 <HAL_UART_MspInit+0x19c>)
 8000cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf4:	4a16      	ldr	r2, [pc, #88]	; (8000d50 <HAL_UART_MspInit+0x19c>)
 8000cf6:	f043 0301 	orr.w	r3, r3, #1
 8000cfa:	6313      	str	r3, [r2, #48]	; 0x30
 8000cfc:	4b14      	ldr	r3, [pc, #80]	; (8000d50 <HAL_UART_MspInit+0x19c>)
 8000cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d00:	f003 0301 	and.w	r3, r3, #1
 8000d04:	60fb      	str	r3, [r7, #12]
 8000d06:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000d08:	230c      	movs	r3, #12
 8000d0a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d0e:	2302      	movs	r3, #2
 8000d10:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d14:	2300      	movs	r3, #0
 8000d16:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d1a:	2303      	movs	r3, #3
 8000d1c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d20:	2307      	movs	r3, #7
 8000d22:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d26:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	480c      	ldr	r0, [pc, #48]	; (8000d60 <HAL_UART_MspInit+0x1ac>)
 8000d2e:	f001 f849 	bl	8001dc4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000d32:	2200      	movs	r2, #0
 8000d34:	2100      	movs	r1, #0
 8000d36:	2026      	movs	r0, #38	; 0x26
 8000d38:	f000 fc91 	bl	800165e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000d3c:	2026      	movs	r0, #38	; 0x26
 8000d3e:	f000 fcaa 	bl	8001696 <HAL_NVIC_EnableIRQ>
}
 8000d42:	bf00      	nop
 8000d44:	37b8      	adds	r7, #184	; 0xb8
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	40005000 	.word	0x40005000
 8000d50:	40023800 	.word	0x40023800
 8000d54:	40020800 	.word	0x40020800
 8000d58:	40020c00 	.word	0x40020c00
 8000d5c:	40004400 	.word	0x40004400
 8000d60:	40020000 	.word	0x40020000

<<<<<<< HEAD
08000d64 <NMI_Handler>:
=======
08000d40 <NMI_Handler>:
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
<<<<<<< HEAD
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
=======
<<<<<<< HEAD
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
=======
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
<<<<<<< HEAD
 8000d68:	e7fe      	b.n	8000d68 <NMI_Handler+0x4>

08000d6a <HardFault_Handler>:
=======
<<<<<<< HEAD
 8000d58:	e7fe      	b.n	8000d58 <NMI_Handler+0x4>

08000d5a <HardFault_Handler>:
=======
 8000d44:	e7fe      	b.n	8000d44 <NMI_Handler+0x4>

08000d46 <HardFault_Handler>:
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
<<<<<<< HEAD
 8000d6a:	b480      	push	{r7}
 8000d6c:	af00      	add	r7, sp, #0
=======
<<<<<<< HEAD
 8000d5a:	b480      	push	{r7}
 8000d5c:	af00      	add	r7, sp, #0
=======
 8000d46:	b480      	push	{r7}
 8000d48:	af00      	add	r7, sp, #0
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
<<<<<<< HEAD
 8000d6e:	e7fe      	b.n	8000d6e <HardFault_Handler+0x4>

08000d70 <MemManage_Handler>:
=======
<<<<<<< HEAD
 8000d5e:	e7fe      	b.n	8000d5e <HardFault_Handler+0x4>

08000d60 <MemManage_Handler>:
=======
 8000d4a:	e7fe      	b.n	8000d4a <HardFault_Handler+0x4>

08000d4c <MemManage_Handler>:
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
<<<<<<< HEAD
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
=======
<<<<<<< HEAD
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
=======
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
<<<<<<< HEAD
 8000d74:	e7fe      	b.n	8000d74 <MemManage_Handler+0x4>

08000d76 <BusFault_Handler>:
=======
<<<<<<< HEAD
 8000d64:	e7fe      	b.n	8000d64 <MemManage_Handler+0x4>

08000d66 <BusFault_Handler>:
=======
 8000d50:	e7fe      	b.n	8000d50 <MemManage_Handler+0x4>

08000d52 <BusFault_Handler>:
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
<<<<<<< HEAD
 8000d76:	b480      	push	{r7}
 8000d78:	af00      	add	r7, sp, #0
=======
<<<<<<< HEAD
 8000d66:	b480      	push	{r7}
 8000d68:	af00      	add	r7, sp, #0
=======
 8000d52:	b480      	push	{r7}
 8000d54:	af00      	add	r7, sp, #0
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
<<<<<<< HEAD
 8000d7a:	e7fe      	b.n	8000d7a <BusFault_Handler+0x4>

08000d7c <UsageFault_Handler>:
=======
<<<<<<< HEAD
 8000d6a:	e7fe      	b.n	8000d6a <BusFault_Handler+0x4>

08000d6c <UsageFault_Handler>:
=======
 8000d56:	e7fe      	b.n	8000d56 <BusFault_Handler+0x4>

08000d58 <UsageFault_Handler>:
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
<<<<<<< HEAD
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
=======
<<<<<<< HEAD
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
=======
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
<<<<<<< HEAD
 8000d80:	e7fe      	b.n	8000d80 <UsageFault_Handler+0x4>

08000d82 <SVC_Handler>:
=======
<<<<<<< HEAD
 8000d70:	e7fe      	b.n	8000d70 <UsageFault_Handler+0x4>

08000d72 <SVC_Handler>:
=======
 8000d5c:	e7fe      	b.n	8000d5c <UsageFault_Handler+0x4>

08000d5e <SVC_Handler>:
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
<<<<<<< HEAD
 8000d82:	b480      	push	{r7}
 8000d84:	af00      	add	r7, sp, #0
=======
<<<<<<< HEAD
 8000d72:	b480      	push	{r7}
 8000d74:	af00      	add	r7, sp, #0
=======
 8000d5e:	b480      	push	{r7}
 8000d60:	af00      	add	r7, sp, #0
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
<<<<<<< HEAD
 8000d86:	bf00      	nop
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8e:	4770      	bx	lr

08000d90 <DebugMon_Handler>:
=======
<<<<<<< HEAD
 8000d76:	bf00      	nop
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7e:	4770      	bx	lr

08000d80 <DebugMon_Handler>:
=======
 8000d62:	bf00      	nop
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr

08000d6c <DebugMon_Handler>:
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
<<<<<<< HEAD
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
=======
<<<<<<< HEAD
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
=======
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
<<<<<<< HEAD
 8000d94:	bf00      	nop
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr

08000d9e <PendSV_Handler>:
=======
<<<<<<< HEAD
 8000d84:	bf00      	nop
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr

08000d8e <PendSV_Handler>:
=======
 8000d70:	bf00      	nop
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr

08000d7a <PendSV_Handler>:
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
<<<<<<< HEAD
 8000d9e:	b480      	push	{r7}
 8000da0:	af00      	add	r7, sp, #0
=======
<<<<<<< HEAD
 8000d8e:	b480      	push	{r7}
 8000d90:	af00      	add	r7, sp, #0
=======
 8000d7a:	b480      	push	{r7}
 8000d7c:	af00      	add	r7, sp, #0
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
<<<<<<< HEAD
 8000da2:	bf00      	nop
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr

08000dac <SysTick_Handler>:
=======
<<<<<<< HEAD
 8000d92:	bf00      	nop
 8000d94:	46bd      	mov	sp, r7
 8000d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9a:	4770      	bx	lr

08000d9c <SysTick_Handler>:
=======
 8000d7e:	bf00      	nop
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr

08000d88 <SysTick_Handler>:
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
<<<<<<< HEAD
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
=======
<<<<<<< HEAD
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
=======
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
<<<<<<< HEAD
 8000db0:	f000 f8a2 	bl	8000ef8 <HAL_IncTick>
=======
<<<<<<< HEAD
 8000da0:	f000 f8a2 	bl	8000ee8 <HAL_IncTick>
=======
 8000d8c:	f000 f8a2 	bl	8000ed4 <HAL_IncTick>
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
<<<<<<< HEAD
 8000db4:	bf00      	nop
 8000db6:	bd80      	pop	{r7, pc}

08000db8 <USART2_IRQHandler>:
=======
<<<<<<< HEAD
 8000da4:	bf00      	nop
 8000da6:	bd80      	pop	{r7, pc}

08000da8 <USART2_IRQHandler>:
=======
 8000d90:	bf00      	nop
 8000d92:	bd80      	pop	{r7, pc}

08000d94 <USART2_IRQHandler>:
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
<<<<<<< HEAD
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
=======
<<<<<<< HEAD
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
=======
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
<<<<<<< HEAD
 8000dbc:	4802      	ldr	r0, [pc, #8]	; (8000dc8 <USART2_IRQHandler+0x10>)
 8000dbe:	f003 f95b 	bl	8004078 <HAL_UART_IRQHandler>
=======
<<<<<<< HEAD
 8000dac:	4802      	ldr	r0, [pc, #8]	; (8000db8 <USART2_IRQHandler+0x10>)
 8000dae:	f003 f95b 	bl	8004068 <HAL_UART_IRQHandler>
=======
 8000d98:	4802      	ldr	r0, [pc, #8]	; (8000da4 <USART2_IRQHandler+0x10>)
 8000d9a:	f003 f943 	bl	8004024 <HAL_UART_IRQHandler>
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
<<<<<<< HEAD
 8000dc2:	bf00      	nop
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	200001ac 	.word	0x200001ac

08000dcc <TIM5_IRQHandler>:
=======
<<<<<<< HEAD
 8000db2:	bf00      	nop
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	200001ac 	.word	0x200001ac

08000dbc <TIM5_IRQHandler>:
=======
 8000d9e:	bf00      	nop
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	200001ac 	.word	0x200001ac

08000da8 <TIM5_IRQHandler>:
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
<<<<<<< HEAD
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
=======
<<<<<<< HEAD
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
=======
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
<<<<<<< HEAD
 8000dd0:	4802      	ldr	r0, [pc, #8]	; (8000ddc <TIM5_IRQHandler+0x10>)
 8000dd2:	f002 fb98 	bl	8003506 <HAL_TIM_IRQHandler>
=======
<<<<<<< HEAD
 8000dc0:	4802      	ldr	r0, [pc, #8]	; (8000dcc <TIM5_IRQHandler+0x10>)
 8000dc2:	f002 fb98 	bl	80034f6 <HAL_TIM_IRQHandler>
=======
 8000dac:	4802      	ldr	r0, [pc, #8]	; (8000db8 <TIM5_IRQHandler+0x10>)
 8000dae:	f002 fb80 	bl	80034b2 <HAL_TIM_IRQHandler>
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
<<<<<<< HEAD
 8000dd6:	bf00      	nop
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	200000d8 	.word	0x200000d8

08000de0 <UART5_IRQHandler>:
=======
<<<<<<< HEAD
 8000dc6:	bf00      	nop
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	200000d8 	.word	0x200000d8

08000dd0 <UART5_IRQHandler>:
=======
 8000db2:	bf00      	nop
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	200000d8 	.word	0x200000d8

08000dbc <UART5_IRQHandler>:
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
<<<<<<< HEAD
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
=======
<<<<<<< HEAD
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
=======
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
<<<<<<< HEAD
 8000de4:	4802      	ldr	r0, [pc, #8]	; (8000df0 <UART5_IRQHandler+0x10>)
 8000de6:	f003 f947 	bl	8004078 <HAL_UART_IRQHandler>
=======
<<<<<<< HEAD
 8000dd4:	4802      	ldr	r0, [pc, #8]	; (8000de0 <UART5_IRQHandler+0x10>)
 8000dd6:	f003 f947 	bl	8004068 <HAL_UART_IRQHandler>
=======
 8000dc0:	4802      	ldr	r0, [pc, #8]	; (8000dcc <UART5_IRQHandler+0x10>)
 8000dc2:	f003 f92f 	bl	8004024 <HAL_UART_IRQHandler>
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
<<<<<<< HEAD
 8000dea:	bf00      	nop
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	20000124 	.word	0x20000124

08000df4 <DMA2_Stream0_IRQHandler>:
=======
<<<<<<< HEAD
 8000dda:	bf00      	nop
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	20000124 	.word	0x20000124

08000de4 <DMA2_Stream0_IRQHandler>:
=======
 8000dc6:	bf00      	nop
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	20000124 	.word	0x20000124

08000dd0 <DMA2_Stream0_IRQHandler>:
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
<<<<<<< HEAD
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
=======
<<<<<<< HEAD
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
=======
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
<<<<<<< HEAD
 8000df8:	4802      	ldr	r0, [pc, #8]	; (8000e04 <DMA2_Stream0_IRQHandler+0x10>)
 8000dfa:	f000 fda7 	bl	800194c <HAL_DMA_IRQHandler>
=======
<<<<<<< HEAD
 8000de8:	4802      	ldr	r0, [pc, #8]	; (8000df4 <DMA2_Stream0_IRQHandler+0x10>)
 8000dea:	f000 fda7 	bl	800193c <HAL_DMA_IRQHandler>
=======
 8000dd4:	4802      	ldr	r0, [pc, #8]	; (8000de0 <DMA2_Stream0_IRQHandler+0x10>)
 8000dd6:	f000 fda7 	bl	8001928 <HAL_DMA_IRQHandler>
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
<<<<<<< HEAD
 8000dfe:	bf00      	nop
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	20000078 	.word	0x20000078

08000e08 <SystemInit>:
=======
<<<<<<< HEAD
 8000dee:	bf00      	nop
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	20000078 	.word	0x20000078

08000df8 <SystemInit>:
=======
 8000dda:	bf00      	nop
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	20000078 	.word	0x20000078

08000de4 <SystemInit>:
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
<<<<<<< HEAD
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e0c:	4b06      	ldr	r3, [pc, #24]	; (8000e28 <SystemInit+0x20>)
 8000e0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e12:	4a05      	ldr	r2, [pc, #20]	; (8000e28 <SystemInit+0x20>)
 8000e14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
=======
<<<<<<< HEAD
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000dfc:	4b06      	ldr	r3, [pc, #24]	; (8000e18 <SystemInit+0x20>)
 8000dfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e02:	4a05      	ldr	r2, [pc, #20]	; (8000e18 <SystemInit+0x20>)
 8000e04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
=======
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000de8:	4b06      	ldr	r3, [pc, #24]	; (8000e04 <SystemInit+0x20>)
 8000dea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dee:	4a05      	ldr	r2, [pc, #20]	; (8000e04 <SystemInit+0x20>)
 8000df0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000df4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
<<<<<<< HEAD
 8000e1c:	bf00      	nop
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop
 8000e28:	e000ed00 	.word	0xe000ed00

08000e2c <Reset_Handler>:
=======
<<<<<<< HEAD
 8000e0c:	bf00      	nop
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop
 8000e18:	e000ed00 	.word	0xe000ed00

08000e1c <Reset_Handler>:
=======
 8000df8:	bf00      	nop
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr
 8000e02:	bf00      	nop
 8000e04:	e000ed00 	.word	0xe000ed00

08000e08 <Reset_Handler>:
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
<<<<<<< HEAD
 8000e2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e64 <LoopFillZerobss+0x12>
=======
<<<<<<< HEAD
 8000e1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e54 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e20:	480d      	ldr	r0, [pc, #52]	; (8000e58 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e22:	490e      	ldr	r1, [pc, #56]	; (8000e5c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e24:	4a0e      	ldr	r2, [pc, #56]	; (8000e60 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e28:	e002      	b.n	8000e30 <LoopCopyDataInit>

08000e2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e2e:	3304      	adds	r3, #4

08000e30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e34:	d3f9      	bcc.n	8000e2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e36:	4a0b      	ldr	r2, [pc, #44]	; (8000e64 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e38:	4c0b      	ldr	r4, [pc, #44]	; (8000e68 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e3c:	e001      	b.n	8000e42 <LoopFillZerobss>

08000e3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e40:	3204      	adds	r2, #4

08000e42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e44:	d3fb      	bcc.n	8000e3e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000e46:	f7ff ffd7 	bl	8000df8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e4a:	f004 f8af 	bl	8004fac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e4e:	f7ff fb93 	bl	8000578 <main>
  bx  lr    
 8000e52:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e54:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000e58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e5c:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000e60:	0800503c 	.word	0x0800503c
  ldr r2, =_sbss
 8000e64:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000e68:	20000240 	.word	0x20000240

08000e6c <ADC_IRQHandler>:
=======
 8000e08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e40 <LoopFillZerobss+0x12>
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e30:	480d      	ldr	r0, [pc, #52]	; (8000e68 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e32:	490e      	ldr	r1, [pc, #56]	; (8000e6c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e34:	4a0e      	ldr	r2, [pc, #56]	; (8000e70 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e38:	e002      	b.n	8000e40 <LoopCopyDataInit>

08000e3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e3e:	3304      	adds	r3, #4

08000e40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e44:	d3f9      	bcc.n	8000e3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e46:	4a0b      	ldr	r2, [pc, #44]	; (8000e74 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e48:	4c0b      	ldr	r4, [pc, #44]	; (8000e78 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e4c:	e001      	b.n	8000e52 <LoopFillZerobss>

08000e4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e50:	3204      	adds	r2, #4

08000e52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e54:	d3fb      	bcc.n	8000e4e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000e56:	f7ff ffd7 	bl	8000e08 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e5a:	f004 f8af 	bl	8004fbc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e5e:	f7ff fb93 	bl	8000588 <main>
  bx  lr    
 8000e62:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e64:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000e68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e6c:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000e70:	0800504c 	.word	0x0800504c
  ldr r2, =_sbss
 8000e74:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000e78:	20000244 	.word	0x20000244

<<<<<<< HEAD
08000e7c <ADC_IRQHandler>:
=======
08000e58 <ADC_IRQHandler>:
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
<<<<<<< HEAD
 8000e7c:	e7fe      	b.n	8000e7c <ADC_IRQHandler>

08000e7e <HAL_Init>:
=======
<<<<<<< HEAD
 8000e6c:	e7fe      	b.n	8000e6c <ADC_IRQHandler>

08000e6e <HAL_Init>:
=======
 8000e58:	e7fe      	b.n	8000e58 <ADC_IRQHandler>

08000e5a <HAL_Init>:
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
<<<<<<< HEAD
 8000e7e:	b580      	push	{r7, lr}
 8000e80:	af00      	add	r7, sp, #0
=======
<<<<<<< HEAD
 8000e6e:	b580      	push	{r7, lr}
 8000e70:	af00      	add	r7, sp, #0
=======
 8000e5a:	b580      	push	{r7, lr}
 8000e5c:	af00      	add	r7, sp, #0
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
<<<<<<< HEAD
 8000e82:	2003      	movs	r0, #3
 8000e84:	f000 fbe0 	bl	8001648 <HAL_NVIC_SetPriorityGrouping>
=======
<<<<<<< HEAD
 8000e72:	2003      	movs	r0, #3
 8000e74:	f000 fbe0 	bl	8001638 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e78:	200f      	movs	r0, #15
 8000e7a:	f000 f805 	bl	8000e88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e7e:	f7ff fdd3 	bl	8000a28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e82:	2300      	movs	r3, #0
}
 8000e84:	4618      	mov	r0, r3
 8000e86:	bd80      	pop	{r7, pc}

08000e88 <HAL_InitTick>:
=======
 8000e5e:	2003      	movs	r0, #3
 8000e60:	f000 fbe0 	bl	8001624 <HAL_NVIC_SetPriorityGrouping>
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e88:	200f      	movs	r0, #15
 8000e8a:	f000 f805 	bl	8000e98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e8e:	f7ff fdd3 	bl	8000a38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e92:	2300      	movs	r3, #0
}
 8000e94:	4618      	mov	r0, r3
 8000e96:	bd80      	pop	{r7, pc}

<<<<<<< HEAD
08000e98 <HAL_InitTick>:
=======
08000e74 <HAL_InitTick>:
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
<<<<<<< HEAD
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
=======
<<<<<<< HEAD
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e90:	4b12      	ldr	r3, [pc, #72]	; (8000edc <HAL_InitTick+0x54>)
 8000e92:	681a      	ldr	r2, [r3, #0]
 8000e94:	4b12      	ldr	r3, [pc, #72]	; (8000ee0 <HAL_InitTick+0x58>)
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	4619      	mov	r1, r3
 8000e9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ea2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f000 fbfb 	bl	80016a2 <HAL_SYSTICK_Config>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d001      	beq.n	8000eb6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	e00e      	b.n	8000ed4 <HAL_InitTick+0x4c>
=======
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ea0:	4b12      	ldr	r3, [pc, #72]	; (8000eec <HAL_InitTick+0x54>)
 8000ea2:	681a      	ldr	r2, [r3, #0]
 8000ea4:	4b12      	ldr	r3, [pc, #72]	; (8000ef0 <HAL_InitTick+0x58>)
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eae:	fbb3 f3f1 	udiv	r3, r3, r1
 8000eb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f000 fbfb 	bl	80016b2 <HAL_SYSTICK_Config>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d001      	beq.n	8000ec6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
<<<<<<< HEAD
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	e00e      	b.n	8000ee4 <HAL_InitTick+0x4c>
=======
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	e00e      	b.n	8000ec0 <HAL_InitTick+0x4c>
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
<<<<<<< HEAD
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	2b0f      	cmp	r3, #15
 8000eca:	d80a      	bhi.n	8000ee2 <HAL_InitTick+0x4a>
=======
<<<<<<< HEAD
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	2b0f      	cmp	r3, #15
 8000eba:	d80a      	bhi.n	8000ed2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	6879      	ldr	r1, [r7, #4]
 8000ec0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ec4:	f000 fbc3 	bl	800164e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ec8:	4a06      	ldr	r2, [pc, #24]	; (8000ee4 <HAL_InitTick+0x5c>)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	6013      	str	r3, [r2, #0]
=======
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	2b0f      	cmp	r3, #15
 8000ea6:	d80a      	bhi.n	8000ebe <HAL_InitTick+0x4a>
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ecc:	2200      	movs	r2, #0
 8000ece:	6879      	ldr	r1, [r7, #4]
 8000ed0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ed4:	f000 fbc3 	bl	800165e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
<<<<<<< HEAD
 8000ed8:	4a06      	ldr	r2, [pc, #24]	; (8000ef4 <HAL_InitTick+0x5c>)
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	6013      	str	r3, [r2, #0]
=======
 8000eb4:	4a06      	ldr	r2, [pc, #24]	; (8000ed0 <HAL_InitTick+0x5c>)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	6013      	str	r3, [r2, #0]
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
<<<<<<< HEAD
 8000ede:	2300      	movs	r3, #0
 8000ee0:	e000      	b.n	8000ee4 <HAL_InitTick+0x4c>
=======
<<<<<<< HEAD
 8000ece:	2300      	movs	r3, #0
 8000ed0:	e000      	b.n	8000ed4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ed2:	2301      	movs	r3, #1
}
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	3708      	adds	r7, #8
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	20000008 	.word	0x20000008
 8000ee0:	20000010 	.word	0x20000010
 8000ee4:	2000000c 	.word	0x2000000c

08000ee8 <HAL_IncTick>:
=======
 8000eba:	2300      	movs	r3, #0
 8000ebc:	e000      	b.n	8000ec0 <HAL_InitTick+0x4c>
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
    return HAL_ERROR;
 8000ee2:	2301      	movs	r3, #1
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	3708      	adds	r7, #8
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	20000008 	.word	0x20000008
 8000ef0:	20000010 	.word	0x20000010
 8000ef4:	2000000c 	.word	0x2000000c

<<<<<<< HEAD
08000ef8 <HAL_IncTick>:
=======
08000ed4 <HAL_IncTick>:
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
<<<<<<< HEAD
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
=======
<<<<<<< HEAD
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000eec:	4b06      	ldr	r3, [pc, #24]	; (8000f08 <HAL_IncTick+0x20>)
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	461a      	mov	r2, r3
 8000ef2:	4b06      	ldr	r3, [pc, #24]	; (8000f0c <HAL_IncTick+0x24>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	4413      	add	r3, r2
 8000ef8:	4a04      	ldr	r2, [pc, #16]	; (8000f0c <HAL_IncTick+0x24>)
 8000efa:	6013      	str	r3, [r2, #0]
}
 8000efc:	bf00      	nop
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	20000010 	.word	0x20000010
 8000f0c:	2000023c 	.word	0x2000023c

08000f10 <HAL_GetTick>:
=======
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  uwTick += uwTickFreq;
 8000efc:	4b06      	ldr	r3, [pc, #24]	; (8000f18 <HAL_IncTick+0x20>)
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	461a      	mov	r2, r3
 8000f02:	4b06      	ldr	r3, [pc, #24]	; (8000f1c <HAL_IncTick+0x24>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	4413      	add	r3, r2
 8000f08:	4a04      	ldr	r2, [pc, #16]	; (8000f1c <HAL_IncTick+0x24>)
 8000f0a:	6013      	str	r3, [r2, #0]
}
 8000f0c:	bf00      	nop
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	20000010 	.word	0x20000010
 8000f1c:	20000240 	.word	0x20000240

<<<<<<< HEAD
08000f20 <HAL_GetTick>:
=======
08000efc <HAL_GetTick>:
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
<<<<<<< HEAD
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
=======
<<<<<<< HEAD
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  return uwTick;
 8000f14:	4b03      	ldr	r3, [pc, #12]	; (8000f24 <HAL_GetTick+0x14>)
 8000f16:	681b      	ldr	r3, [r3, #0]
}
 8000f18:	4618      	mov	r0, r3
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop
 8000f24:	2000023c 	.word	0x2000023c

08000f28 <HAL_Delay>:
=======
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  return uwTick;
 8000f24:	4b03      	ldr	r3, [pc, #12]	; (8000f34 <HAL_GetTick+0x14>)
 8000f26:	681b      	ldr	r3, [r3, #0]
}
 8000f28:	4618      	mov	r0, r3
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop
 8000f34:	20000240 	.word	0x20000240

<<<<<<< HEAD
08000f38 <HAL_Delay>:
=======
08000f14 <HAL_Delay>:
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
<<<<<<< HEAD
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b084      	sub	sp, #16
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
=======
<<<<<<< HEAD
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b084      	sub	sp, #16
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f30:	f7ff ffee 	bl	8000f10 <HAL_GetTick>
 8000f34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f40:	d005      	beq.n	8000f4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f42:	4b0a      	ldr	r3, [pc, #40]	; (8000f6c <HAL_Delay+0x44>)
 8000f44:	781b      	ldrb	r3, [r3, #0]
 8000f46:	461a      	mov	r2, r3
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	4413      	add	r3, r2
 8000f4c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f4e:	bf00      	nop
 8000f50:	f7ff ffde 	bl	8000f10 <HAL_GetTick>
 8000f54:	4602      	mov	r2, r0
 8000f56:	68bb      	ldr	r3, [r7, #8]
 8000f58:	1ad3      	subs	r3, r2, r3
 8000f5a:	68fa      	ldr	r2, [r7, #12]
 8000f5c:	429a      	cmp	r2, r3
 8000f5e:	d8f7      	bhi.n	8000f50 <HAL_Delay+0x28>
  {
  }
}
 8000f60:	bf00      	nop
 8000f62:	bf00      	nop
 8000f64:	3710      	adds	r7, #16
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	20000010 	.word	0x20000010

08000f70 <HAL_ADC_Init>:
=======
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b084      	sub	sp, #16
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  uint32_t tickstart = HAL_GetTick();
 8000f40:	f7ff ffee 	bl	8000f20 <HAL_GetTick>
 8000f44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f50:	d005      	beq.n	8000f5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f52:	4b0a      	ldr	r3, [pc, #40]	; (8000f7c <HAL_Delay+0x44>)
 8000f54:	781b      	ldrb	r3, [r3, #0]
 8000f56:	461a      	mov	r2, r3
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	4413      	add	r3, r2
 8000f5c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f5e:	bf00      	nop
 8000f60:	f7ff ffde 	bl	8000f20 <HAL_GetTick>
 8000f64:	4602      	mov	r2, r0
 8000f66:	68bb      	ldr	r3, [r7, #8]
 8000f68:	1ad3      	subs	r3, r2, r3
 8000f6a:	68fa      	ldr	r2, [r7, #12]
 8000f6c:	429a      	cmp	r2, r3
 8000f6e:	d8f7      	bhi.n	8000f60 <HAL_Delay+0x28>
  {
  }
}
 8000f70:	bf00      	nop
 8000f72:	bf00      	nop
 8000f74:	3710      	adds	r7, #16
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	20000010 	.word	0x20000010

<<<<<<< HEAD
08000f80 <HAL_ADC_Init>:
=======
08000f5c <HAL_ADC_Init>:
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
<<<<<<< HEAD
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b084      	sub	sp, #16
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
=======
<<<<<<< HEAD
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b084      	sub	sp, #16
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d101      	bne.n	8000f86 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000f82:	2301      	movs	r3, #1
 8000f84:	e031      	b.n	8000fea <HAL_ADC_Init+0x7a>
=======
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b084      	sub	sp, #16
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d101      	bne.n	8000f96 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
<<<<<<< HEAD
 8000f92:	2301      	movs	r3, #1
 8000f94:	e031      	b.n	8000ffa <HAL_ADC_Init+0x7a>
=======
 8000f6e:	2301      	movs	r3, #1
 8000f70:	e031      	b.n	8000fd6 <HAL_ADC_Init+0x7a>
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
<<<<<<< HEAD
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d109      	bne.n	8000fb2 <HAL_ADC_Init+0x32>
=======
<<<<<<< HEAD
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d109      	bne.n	8000fa2 <HAL_ADC_Init+0x32>
=======
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d109      	bne.n	8000f8e <HAL_ADC_Init+0x32>
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
<<<<<<< HEAD
 8000f9e:	6878      	ldr	r0, [r7, #4]
 8000fa0:	f7ff fd6e 	bl	8000a80 <HAL_ADC_MspInit>
=======
<<<<<<< HEAD
 8000f8e:	6878      	ldr	r0, [r7, #4]
 8000f90:	f7ff fd6e 	bl	8000a70 <HAL_ADC_MspInit>
=======
 8000f7a:	6878      	ldr	r0, [r7, #4]
 8000f7c:	f7ff fd6e 	bl	8000a5c <HAL_ADC_MspInit>
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
<<<<<<< HEAD
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	2200      	movs	r2, #0
 8000fae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
=======
<<<<<<< HEAD
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	2200      	movs	r2, #0
 8000f98:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
=======
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	2200      	movs	r2, #0
 8000f84:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	2200      	movs	r2, #0
 8000f8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
<<<<<<< HEAD
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb6:	f003 0310 	and.w	r3, r3, #16
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d116      	bne.n	8000fec <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000fc2:	4b10      	ldr	r3, [pc, #64]	; (8001004 <HAL_ADC_Init+0x84>)
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	f043 0202 	orr.w	r2, r3, #2
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	641a      	str	r2, [r3, #64]	; 0x40
=======
<<<<<<< HEAD
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa6:	f003 0310 	and.w	r3, r3, #16
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d116      	bne.n	8000fdc <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000fb2:	4b10      	ldr	r3, [pc, #64]	; (8000ff4 <HAL_ADC_Init+0x84>)
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	f043 0202 	orr.w	r2, r3, #2
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	641a      	str	r2, [r3, #64]	; 0x40
=======
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f92:	f003 0310 	and.w	r3, r3, #16
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d116      	bne.n	8000fc8 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f9e:	4b10      	ldr	r3, [pc, #64]	; (8000fe0 <HAL_ADC_Init+0x84>)
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	f043 0202 	orr.w	r2, r3, #2
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	641a      	str	r2, [r3, #64]	; 0x40
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
<<<<<<< HEAD
 8000fce:	6878      	ldr	r0, [r7, #4]
 8000fd0:	f000 f970 	bl	80012b4 <ADC_Init>
=======
<<<<<<< HEAD
 8000fbe:	6878      	ldr	r0, [r7, #4]
 8000fc0:	f000 f970 	bl	80012a4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fce:	f023 0303 	bic.w	r3, r3, #3
 8000fd2:	f043 0201 	orr.w	r2, r3, #1
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	641a      	str	r2, [r3, #64]	; 0x40
 8000fda:	e001      	b.n	8000fe0 <HAL_ADC_Init+0x70>
=======
 8000faa:	6878      	ldr	r0, [r7, #4]
 8000fac:	f000 f970 	bl	8001290 <ADC_Init>
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
<<<<<<< HEAD
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fde:	f023 0303 	bic.w	r3, r3, #3
 8000fe2:	f043 0201 	orr.w	r2, r3, #1
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	641a      	str	r2, [r3, #64]	; 0x40
 8000fea:	e001      	b.n	8000ff0 <HAL_ADC_Init+0x70>
=======
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fba:	f023 0303 	bic.w	r3, r3, #3
 8000fbe:	f043 0201 	orr.w	r2, r3, #1
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	641a      	str	r2, [r3, #64]	; 0x40
 8000fc6:	e001      	b.n	8000fcc <HAL_ADC_Init+0x70>
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
<<<<<<< HEAD
 8000fec:	2301      	movs	r3, #1
 8000fee:	73fb      	strb	r3, [r7, #15]
=======
<<<<<<< HEAD
 8000fdc:	2301      	movs	r3, #1
 8000fde:	73fb      	strb	r3, [r7, #15]
=======
 8000fc8:	2301      	movs	r3, #1
 8000fca:	73fb      	strb	r3, [r7, #15]
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
<<<<<<< HEAD
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
=======
<<<<<<< HEAD
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000fe8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	3710      	adds	r7, #16
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	ffffeefd 	.word	0xffffeefd

08000ff8 <HAL_ADC_ConfigChannel>:
=======
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	2200      	movs	r2, #0
 8000fd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637

  /* Return function status */
  return tmp_hal_status;
 8000ff8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	3710      	adds	r7, #16
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	ffffeefd 	.word	0xffffeefd

<<<<<<< HEAD
08001008 <HAL_ADC_ConfigChannel>:
=======
08000fe4 <HAL_ADC_ConfigChannel>:
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
<<<<<<< HEAD
 8001008:	b480      	push	{r7}
 800100a:	b085      	sub	sp, #20
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
 8001010:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001012:	2300      	movs	r3, #0
 8001014:	60fb      	str	r3, [r7, #12]
=======
<<<<<<< HEAD
 8000ff8:	b480      	push	{r7}
 8000ffa:	b085      	sub	sp, #20
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
 8001000:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001002:	2300      	movs	r3, #0
 8001004:	60fb      	str	r3, [r7, #12]
=======
 8000fe4:	b480      	push	{r7}
 8000fe6:	b085      	sub	sp, #20
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
 8000fec:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	60fb      	str	r3, [r7, #12]
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
<<<<<<< HEAD
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800101c:	2b01      	cmp	r3, #1
 800101e:	d101      	bne.n	8001024 <HAL_ADC_ConfigChannel+0x1c>
 8001020:	2302      	movs	r3, #2
 8001022:	e136      	b.n	8001292 <HAL_ADC_ConfigChannel+0x28a>
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2201      	movs	r2, #1
 8001028:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
=======
<<<<<<< HEAD
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800100c:	2b01      	cmp	r3, #1
 800100e:	d101      	bne.n	8001014 <HAL_ADC_ConfigChannel+0x1c>
 8001010:	2302      	movs	r3, #2
 8001012:	e136      	b.n	8001282 <HAL_ADC_ConfigChannel+0x28a>
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	2201      	movs	r2, #1
 8001018:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	2b09      	cmp	r3, #9
 8001022:	d93a      	bls.n	800109a <HAL_ADC_ConfigChannel+0xa2>
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800102c:	d035      	beq.n	800109a <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	68d9      	ldr	r1, [r3, #12]
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	b29b      	uxth	r3, r3
 800103a:	461a      	mov	r2, r3
 800103c:	4613      	mov	r3, r2
 800103e:	005b      	lsls	r3, r3, #1
 8001040:	4413      	add	r3, r2
 8001042:	3b1e      	subs	r3, #30
 8001044:	2207      	movs	r2, #7
 8001046:	fa02 f303 	lsl.w	r3, r2, r3
 800104a:	43da      	mvns	r2, r3
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	400a      	ands	r2, r1
 8001052:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a8d      	ldr	r2, [pc, #564]	; (8001290 <HAL_ADC_ConfigChannel+0x298>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d10a      	bne.n	8001074 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	68d9      	ldr	r1, [r3, #12]
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	689b      	ldr	r3, [r3, #8]
 8001068:	061a      	lsls	r2, r3, #24
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	430a      	orrs	r2, r1
 8001070:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001072:	e035      	b.n	80010e0 <HAL_ADC_ConfigChannel+0xe8>
=======
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000ff8:	2b01      	cmp	r3, #1
 8000ffa:	d101      	bne.n	8001000 <HAL_ADC_ConfigChannel+0x1c>
 8000ffc:	2302      	movs	r3, #2
 8000ffe:	e136      	b.n	800126e <HAL_ADC_ConfigChannel+0x28a>
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2201      	movs	r2, #1
 8001004:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	2b09      	cmp	r3, #9
 8001032:	d93a      	bls.n	80010aa <HAL_ADC_ConfigChannel+0xa2>
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800103c:	d035      	beq.n	80010aa <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	68d9      	ldr	r1, [r3, #12]
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	b29b      	uxth	r3, r3
 800104a:	461a      	mov	r2, r3
 800104c:	4613      	mov	r3, r2
 800104e:	005b      	lsls	r3, r3, #1
 8001050:	4413      	add	r3, r2
 8001052:	3b1e      	subs	r3, #30
 8001054:	2207      	movs	r2, #7
 8001056:	fa02 f303 	lsl.w	r3, r2, r3
 800105a:	43da      	mvns	r2, r3
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	400a      	ands	r2, r1
 8001062:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a8d      	ldr	r2, [pc, #564]	; (80012a0 <HAL_ADC_ConfigChannel+0x298>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d10a      	bne.n	8001084 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	68d9      	ldr	r1, [r3, #12]
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	689b      	ldr	r3, [r3, #8]
 8001078:	061a      	lsls	r2, r3, #24
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	430a      	orrs	r2, r1
 8001080:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
<<<<<<< HEAD
 8001082:	e035      	b.n	80010f0 <HAL_ADC_ConfigChannel+0xe8>
=======
 800105e:	e035      	b.n	80010cc <HAL_ADC_ConfigChannel+0xe8>
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
<<<<<<< HEAD
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	68d9      	ldr	r1, [r3, #12]
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	689a      	ldr	r2, [r3, #8]
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	b29b      	uxth	r3, r3
 8001094:	4618      	mov	r0, r3
 8001096:	4603      	mov	r3, r0
 8001098:	005b      	lsls	r3, r3, #1
 800109a:	4403      	add	r3, r0
 800109c:	3b1e      	subs	r3, #30
 800109e:	409a      	lsls	r2, r3
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	430a      	orrs	r2, r1
 80010a6:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80010a8:	e022      	b.n	80010f0 <HAL_ADC_ConfigChannel+0xe8>
=======
<<<<<<< HEAD
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	68d9      	ldr	r1, [r3, #12]
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	689a      	ldr	r2, [r3, #8]
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	b29b      	uxth	r3, r3
 8001084:	4618      	mov	r0, r3
 8001086:	4603      	mov	r3, r0
 8001088:	005b      	lsls	r3, r3, #1
 800108a:	4403      	add	r3, r0
 800108c:	3b1e      	subs	r3, #30
 800108e:	409a      	lsls	r2, r3
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	430a      	orrs	r2, r1
 8001096:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001098:	e022      	b.n	80010e0 <HAL_ADC_ConfigChannel+0xe8>
=======
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	68d9      	ldr	r1, [r3, #12]
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	689a      	ldr	r2, [r3, #8]
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	b29b      	uxth	r3, r3
 8001070:	4618      	mov	r0, r3
 8001072:	4603      	mov	r3, r0
 8001074:	005b      	lsls	r3, r3, #1
 8001076:	4403      	add	r3, r0
 8001078:	3b1e      	subs	r3, #30
 800107a:	409a      	lsls	r2, r3
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	430a      	orrs	r2, r1
 8001082:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001084:	e022      	b.n	80010cc <HAL_ADC_ConfigChannel+0xe8>
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
<<<<<<< HEAD
=======
<<<<<<< HEAD
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	6919      	ldr	r1, [r3, #16]
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	b29b      	uxth	r3, r3
 80010a6:	461a      	mov	r2, r3
 80010a8:	4613      	mov	r3, r2
 80010aa:	005b      	lsls	r3, r3, #1
 80010ac:	4413      	add	r3, r2
 80010ae:	2207      	movs	r2, #7
 80010b0:	fa02 f303 	lsl.w	r3, r2, r3
 80010b4:	43da      	mvns	r2, r3
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	400a      	ands	r2, r1
 80010bc:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	6919      	ldr	r1, [r3, #16]
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	689a      	ldr	r2, [r3, #8]
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	b29b      	uxth	r3, r3
 80010ce:	4618      	mov	r0, r3
 80010d0:	4603      	mov	r3, r0
 80010d2:	005b      	lsls	r3, r3, #1
 80010d4:	4403      	add	r3, r0
 80010d6:	409a      	lsls	r2, r3
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	430a      	orrs	r2, r1
 80010de:	611a      	str	r2, [r3, #16]
=======
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	6919      	ldr	r1, [r3, #16]
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	b29b      	uxth	r3, r3
 8001092:	461a      	mov	r2, r3
 8001094:	4613      	mov	r3, r2
 8001096:	005b      	lsls	r3, r3, #1
 8001098:	4413      	add	r3, r2
 800109a:	2207      	movs	r2, #7
 800109c:	fa02 f303 	lsl.w	r3, r2, r3
 80010a0:	43da      	mvns	r2, r3
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	400a      	ands	r2, r1
 80010a8:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	6919      	ldr	r1, [r3, #16]
 80010b0:	683b      	ldr	r3, [r7, #0]
<<<<<<< HEAD
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	b29b      	uxth	r3, r3
 80010b6:	461a      	mov	r2, r3
 80010b8:	4613      	mov	r3, r2
 80010ba:	005b      	lsls	r3, r3, #1
 80010bc:	4413      	add	r3, r2
 80010be:	2207      	movs	r2, #7
 80010c0:	fa02 f303 	lsl.w	r3, r2, r3
 80010c4:	43da      	mvns	r2, r3
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	400a      	ands	r2, r1
 80010cc:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	6919      	ldr	r1, [r3, #16]
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	689a      	ldr	r2, [r3, #8]
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	b29b      	uxth	r3, r3
 80010de:	4618      	mov	r0, r3
 80010e0:	4603      	mov	r3, r0
 80010e2:	005b      	lsls	r3, r3, #1
 80010e4:	4403      	add	r3, r0
 80010e6:	409a      	lsls	r2, r3
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	430a      	orrs	r2, r1
 80010ee:	611a      	str	r2, [r3, #16]
=======
 80010b2:	689a      	ldr	r2, [r3, #8]
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	b29b      	uxth	r3, r3
 80010ba:	4618      	mov	r0, r3
 80010bc:	4603      	mov	r3, r0
 80010be:	005b      	lsls	r3, r3, #1
 80010c0:	4403      	add	r3, r0
 80010c2:	409a      	lsls	r2, r3
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	430a      	orrs	r2, r1
 80010ca:	611a      	str	r2, [r3, #16]
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
<<<<<<< HEAD
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	2b06      	cmp	r3, #6
 80010f6:	d824      	bhi.n	8001142 <HAL_ADC_ConfigChannel+0x13a>
=======
<<<<<<< HEAD
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	2b06      	cmp	r3, #6
 80010e6:	d824      	bhi.n	8001132 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	685a      	ldr	r2, [r3, #4]
 80010f2:	4613      	mov	r3, r2
 80010f4:	009b      	lsls	r3, r3, #2
 80010f6:	4413      	add	r3, r2
 80010f8:	3b05      	subs	r3, #5
 80010fa:	221f      	movs	r2, #31
 80010fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001100:	43da      	mvns	r2, r3
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	400a      	ands	r2, r1
 8001108:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	b29b      	uxth	r3, r3
 8001116:	4618      	mov	r0, r3
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	685a      	ldr	r2, [r3, #4]
 800111c:	4613      	mov	r3, r2
 800111e:	009b      	lsls	r3, r3, #2
 8001120:	4413      	add	r3, r2
 8001122:	3b05      	subs	r3, #5
 8001124:	fa00 f203 	lsl.w	r2, r0, r3
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	430a      	orrs	r2, r1
 800112e:	635a      	str	r2, [r3, #52]	; 0x34
 8001130:	e04c      	b.n	80011cc <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	2b0c      	cmp	r3, #12
 8001138:	d824      	bhi.n	8001184 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	685a      	ldr	r2, [r3, #4]
 8001144:	4613      	mov	r3, r2
 8001146:	009b      	lsls	r3, r3, #2
 8001148:	4413      	add	r3, r2
 800114a:	3b23      	subs	r3, #35	; 0x23
 800114c:	221f      	movs	r2, #31
 800114e:	fa02 f303 	lsl.w	r3, r2, r3
 8001152:	43da      	mvns	r2, r3
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	400a      	ands	r2, r1
 800115a:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	b29b      	uxth	r3, r3
 8001168:	4618      	mov	r0, r3
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	685a      	ldr	r2, [r3, #4]
 800116e:	4613      	mov	r3, r2
 8001170:	009b      	lsls	r3, r3, #2
 8001172:	4413      	add	r3, r2
 8001174:	3b23      	subs	r3, #35	; 0x23
 8001176:	fa00 f203 	lsl.w	r2, r0, r3
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	430a      	orrs	r2, r1
 8001180:	631a      	str	r2, [r3, #48]	; 0x30
 8001182:	e023      	b.n	80011cc <HAL_ADC_ConfigChannel+0x1d4>
=======
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	2b06      	cmp	r3, #6
 80010d2:	d824      	bhi.n	800111e <HAL_ADC_ConfigChannel+0x13a>
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	685a      	ldr	r2, [r3, #4]
 8001102:	4613      	mov	r3, r2
 8001104:	009b      	lsls	r3, r3, #2
 8001106:	4413      	add	r3, r2
 8001108:	3b05      	subs	r3, #5
 800110a:	221f      	movs	r2, #31
 800110c:	fa02 f303 	lsl.w	r3, r2, r3
 8001110:	43da      	mvns	r2, r3
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	400a      	ands	r2, r1
 8001118:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	b29b      	uxth	r3, r3
 8001126:	4618      	mov	r0, r3
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	685a      	ldr	r2, [r3, #4]
 800112c:	4613      	mov	r3, r2
 800112e:	009b      	lsls	r3, r3, #2
 8001130:	4413      	add	r3, r2
 8001132:	3b05      	subs	r3, #5
 8001134:	fa00 f203 	lsl.w	r2, r0, r3
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	430a      	orrs	r2, r1
 800113e:	635a      	str	r2, [r3, #52]	; 0x34
 8001140:	e04c      	b.n	80011dc <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	2b0c      	cmp	r3, #12
 8001148:	d824      	bhi.n	8001194 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	685a      	ldr	r2, [r3, #4]
 8001154:	4613      	mov	r3, r2
 8001156:	009b      	lsls	r3, r3, #2
 8001158:	4413      	add	r3, r2
 800115a:	3b23      	subs	r3, #35	; 0x23
 800115c:	221f      	movs	r2, #31
 800115e:	fa02 f303 	lsl.w	r3, r2, r3
 8001162:	43da      	mvns	r2, r3
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	400a      	ands	r2, r1
 800116a:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
<<<<<<< HEAD
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	b29b      	uxth	r3, r3
 8001178:	4618      	mov	r0, r3
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	685a      	ldr	r2, [r3, #4]
 800117e:	4613      	mov	r3, r2
 8001180:	009b      	lsls	r3, r3, #2
 8001182:	4413      	add	r3, r2
 8001184:	3b23      	subs	r3, #35	; 0x23
 8001186:	fa00 f203 	lsl.w	r2, r0, r3
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	430a      	orrs	r2, r1
 8001190:	631a      	str	r2, [r3, #48]	; 0x30
 8001192:	e023      	b.n	80011dc <HAL_ADC_ConfigChannel+0x1d4>
=======
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	b29b      	uxth	r3, r3
 8001154:	4618      	mov	r0, r3
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	685a      	ldr	r2, [r3, #4]
 800115a:	4613      	mov	r3, r2
 800115c:	009b      	lsls	r3, r3, #2
 800115e:	4413      	add	r3, r2
 8001160:	3b23      	subs	r3, #35	; 0x23
 8001162:	fa00 f203 	lsl.w	r2, r0, r3
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	430a      	orrs	r2, r1
 800116c:	631a      	str	r2, [r3, #48]	; 0x30
 800116e:	e023      	b.n	80011b8 <HAL_ADC_ConfigChannel+0x1d4>
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
<<<<<<< HEAD
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	685a      	ldr	r2, [r3, #4]
 800119e:	4613      	mov	r3, r2
 80011a0:	009b      	lsls	r3, r3, #2
 80011a2:	4413      	add	r3, r2
 80011a4:	3b41      	subs	r3, #65	; 0x41
 80011a6:	221f      	movs	r2, #31
 80011a8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ac:	43da      	mvns	r2, r3
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	400a      	ands	r2, r1
 80011b4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	b29b      	uxth	r3, r3
 80011c2:	4618      	mov	r0, r3
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	685a      	ldr	r2, [r3, #4]
 80011c8:	4613      	mov	r3, r2
 80011ca:	009b      	lsls	r3, r3, #2
 80011cc:	4413      	add	r3, r2
 80011ce:	3b41      	subs	r3, #65	; 0x41
 80011d0:	fa00 f203 	lsl.w	r2, r0, r3
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	430a      	orrs	r2, r1
 80011da:	62da      	str	r2, [r3, #44]	; 0x2c
=======
<<<<<<< HEAD
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	685a      	ldr	r2, [r3, #4]
 800118e:	4613      	mov	r3, r2
 8001190:	009b      	lsls	r3, r3, #2
 8001192:	4413      	add	r3, r2
 8001194:	3b41      	subs	r3, #65	; 0x41
 8001196:	221f      	movs	r2, #31
 8001198:	fa02 f303 	lsl.w	r3, r2, r3
 800119c:	43da      	mvns	r2, r3
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	400a      	ands	r2, r1
 80011a4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	b29b      	uxth	r3, r3
 80011b2:	4618      	mov	r0, r3
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	685a      	ldr	r2, [r3, #4]
 80011b8:	4613      	mov	r3, r2
 80011ba:	009b      	lsls	r3, r3, #2
 80011bc:	4413      	add	r3, r2
 80011be:	3b41      	subs	r3, #65	; 0x41
 80011c0:	fa00 f203 	lsl.w	r2, r0, r3
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	430a      	orrs	r2, r1
 80011ca:	62da      	str	r2, [r3, #44]	; 0x2c
=======
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	685a      	ldr	r2, [r3, #4]
 800117a:	4613      	mov	r3, r2
 800117c:	009b      	lsls	r3, r3, #2
 800117e:	4413      	add	r3, r2
 8001180:	3b41      	subs	r3, #65	; 0x41
 8001182:	221f      	movs	r2, #31
 8001184:	fa02 f303 	lsl.w	r3, r2, r3
 8001188:	43da      	mvns	r2, r3
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	400a      	ands	r2, r1
 8001190:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	b29b      	uxth	r3, r3
 800119e:	4618      	mov	r0, r3
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	685a      	ldr	r2, [r3, #4]
 80011a4:	4613      	mov	r3, r2
 80011a6:	009b      	lsls	r3, r3, #2
 80011a8:	4413      	add	r3, r2
 80011aa:	3b41      	subs	r3, #65	; 0x41
 80011ac:	fa00 f203 	lsl.w	r2, r0, r3
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	430a      	orrs	r2, r1
 80011b6:	62da      	str	r2, [r3, #44]	; 0x2c
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
<<<<<<< HEAD
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a30      	ldr	r2, [pc, #192]	; (80012a4 <HAL_ADC_ConfigChannel+0x29c>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d10a      	bne.n	80011fc <HAL_ADC_ConfigChannel+0x1f4>
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80011ee:	d105      	bne.n	80011fc <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80011f0:	4b2d      	ldr	r3, [pc, #180]	; (80012a8 <HAL_ADC_ConfigChannel+0x2a0>)
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	4a2c      	ldr	r2, [pc, #176]	; (80012a8 <HAL_ADC_ConfigChannel+0x2a0>)
 80011f6:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80011fa:	6053      	str	r3, [r2, #4]
=======
<<<<<<< HEAD
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a30      	ldr	r2, [pc, #192]	; (8001294 <HAL_ADC_ConfigChannel+0x29c>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d10a      	bne.n	80011ec <HAL_ADC_ConfigChannel+0x1f4>
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80011de:	d105      	bne.n	80011ec <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80011e0:	4b2d      	ldr	r3, [pc, #180]	; (8001298 <HAL_ADC_ConfigChannel+0x2a0>)
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	4a2c      	ldr	r2, [pc, #176]	; (8001298 <HAL_ADC_ConfigChannel+0x2a0>)
 80011e6:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80011ea:	6053      	str	r3, [r2, #4]
=======
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a30      	ldr	r2, [pc, #192]	; (8001280 <HAL_ADC_ConfigChannel+0x29c>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d10a      	bne.n	80011d8 <HAL_ADC_ConfigChannel+0x1f4>
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80011ca:	d105      	bne.n	80011d8 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80011cc:	4b2d      	ldr	r3, [pc, #180]	; (8001284 <HAL_ADC_ConfigChannel+0x2a0>)
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	4a2c      	ldr	r2, [pc, #176]	; (8001284 <HAL_ADC_ConfigChannel+0x2a0>)
 80011d2:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80011d6:	6053      	str	r3, [r2, #4]
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
<<<<<<< HEAD
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a28      	ldr	r2, [pc, #160]	; (80012a4 <HAL_ADC_ConfigChannel+0x29c>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d10f      	bne.n	8001226 <HAL_ADC_ConfigChannel+0x21e>
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	2b12      	cmp	r3, #18
 800120c:	d10b      	bne.n	8001226 <HAL_ADC_ConfigChannel+0x21e>
=======
<<<<<<< HEAD
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a28      	ldr	r2, [pc, #160]	; (8001294 <HAL_ADC_ConfigChannel+0x29c>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d10f      	bne.n	8001216 <HAL_ADC_ConfigChannel+0x21e>
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	2b12      	cmp	r3, #18
 80011fc:	d10b      	bne.n	8001216 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80011fe:	4b26      	ldr	r3, [pc, #152]	; (8001298 <HAL_ADC_ConfigChannel+0x2a0>)
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	4a25      	ldr	r2, [pc, #148]	; (8001298 <HAL_ADC_ConfigChannel+0x2a0>)
 8001204:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001208:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800120a:	4b23      	ldr	r3, [pc, #140]	; (8001298 <HAL_ADC_ConfigChannel+0x2a0>)
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	4a22      	ldr	r2, [pc, #136]	; (8001298 <HAL_ADC_ConfigChannel+0x2a0>)
 8001210:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001214:	6053      	str	r3, [r2, #4]
=======
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a28      	ldr	r2, [pc, #160]	; (8001280 <HAL_ADC_ConfigChannel+0x29c>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d10f      	bne.n	8001202 <HAL_ADC_ConfigChannel+0x21e>
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	2b12      	cmp	r3, #18
 80011e8:	d10b      	bne.n	8001202 <HAL_ADC_ConfigChannel+0x21e>
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 800120e:	4b26      	ldr	r3, [pc, #152]	; (80012a8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	4a25      	ldr	r2, [pc, #148]	; (80012a8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001214:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001218:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
<<<<<<< HEAD
 800121a:	4b23      	ldr	r3, [pc, #140]	; (80012a8 <HAL_ADC_ConfigChannel+0x2a0>)
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	4a22      	ldr	r2, [pc, #136]	; (80012a8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001220:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001224:	6053      	str	r3, [r2, #4]
=======
 80011f6:	4b23      	ldr	r3, [pc, #140]	; (8001284 <HAL_ADC_ConfigChannel+0x2a0>)
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	4a22      	ldr	r2, [pc, #136]	; (8001284 <HAL_ADC_ConfigChannel+0x2a0>)
 80011fc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001200:	6053      	str	r3, [r2, #4]
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
<<<<<<< HEAD
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	4a1e      	ldr	r2, [pc, #120]	; (80012a4 <HAL_ADC_ConfigChannel+0x29c>)
 800122c:	4293      	cmp	r3, r2
 800122e:	d12b      	bne.n	8001288 <HAL_ADC_ConfigChannel+0x280>
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a1a      	ldr	r2, [pc, #104]	; (80012a0 <HAL_ADC_ConfigChannel+0x298>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d003      	beq.n	8001242 <HAL_ADC_ConfigChannel+0x23a>
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	2b11      	cmp	r3, #17
 8001240:	d122      	bne.n	8001288 <HAL_ADC_ConfigChannel+0x280>
=======
<<<<<<< HEAD
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4a1e      	ldr	r2, [pc, #120]	; (8001294 <HAL_ADC_ConfigChannel+0x29c>)
 800121c:	4293      	cmp	r3, r2
 800121e:	d12b      	bne.n	8001278 <HAL_ADC_ConfigChannel+0x280>
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a1a      	ldr	r2, [pc, #104]	; (8001290 <HAL_ADC_ConfigChannel+0x298>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d003      	beq.n	8001232 <HAL_ADC_ConfigChannel+0x23a>
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	2b11      	cmp	r3, #17
 8001230:	d122      	bne.n	8001278 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8001232:	4b19      	ldr	r3, [pc, #100]	; (8001298 <HAL_ADC_ConfigChannel+0x2a0>)
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	4a18      	ldr	r2, [pc, #96]	; (8001298 <HAL_ADC_ConfigChannel+0x2a0>)
 8001238:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800123c:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800123e:	4b16      	ldr	r3, [pc, #88]	; (8001298 <HAL_ADC_ConfigChannel+0x2a0>)
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	4a15      	ldr	r2, [pc, #84]	; (8001298 <HAL_ADC_ConfigChannel+0x2a0>)
 8001244:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001248:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4a10      	ldr	r2, [pc, #64]	; (8001290 <HAL_ADC_ConfigChannel+0x298>)
 8001250:	4293      	cmp	r3, r2
 8001252:	d111      	bne.n	8001278 <HAL_ADC_ConfigChannel+0x280>
=======
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4a1e      	ldr	r2, [pc, #120]	; (8001280 <HAL_ADC_ConfigChannel+0x29c>)
 8001208:	4293      	cmp	r3, r2
 800120a:	d12b      	bne.n	8001264 <HAL_ADC_ConfigChannel+0x280>
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4a1a      	ldr	r2, [pc, #104]	; (800127c <HAL_ADC_ConfigChannel+0x298>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d003      	beq.n	800121e <HAL_ADC_ConfigChannel+0x23a>
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	2b11      	cmp	r3, #17
 800121c:	d122      	bne.n	8001264 <HAL_ADC_ConfigChannel+0x280>
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8001242:	4b19      	ldr	r3, [pc, #100]	; (80012a8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	4a18      	ldr	r2, [pc, #96]	; (80012a8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001248:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800124c:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800124e:	4b16      	ldr	r3, [pc, #88]	; (80012a8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	4a15      	ldr	r2, [pc, #84]	; (80012a8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001254:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001258:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
<<<<<<< HEAD
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4a10      	ldr	r2, [pc, #64]	; (80012a0 <HAL_ADC_ConfigChannel+0x298>)
 8001260:	4293      	cmp	r3, r2
 8001262:	d111      	bne.n	8001288 <HAL_ADC_ConfigChannel+0x280>
=======
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4a10      	ldr	r2, [pc, #64]	; (800127c <HAL_ADC_ConfigChannel+0x298>)
 800123c:	4293      	cmp	r3, r2
 800123e:	d111      	bne.n	8001264 <HAL_ADC_ConfigChannel+0x280>
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
<<<<<<< HEAD
 8001264:	4b11      	ldr	r3, [pc, #68]	; (80012ac <HAL_ADC_ConfigChannel+0x2a4>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a11      	ldr	r2, [pc, #68]	; (80012b0 <HAL_ADC_ConfigChannel+0x2a8>)
 800126a:	fba2 2303 	umull	r2, r3, r2, r3
 800126e:	0c9a      	lsrs	r2, r3, #18
 8001270:	4613      	mov	r3, r2
 8001272:	009b      	lsls	r3, r3, #2
 8001274:	4413      	add	r3, r2
 8001276:	005b      	lsls	r3, r3, #1
 8001278:	60fb      	str	r3, [r7, #12]
=======
<<<<<<< HEAD
 8001254:	4b11      	ldr	r3, [pc, #68]	; (800129c <HAL_ADC_ConfigChannel+0x2a4>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a11      	ldr	r2, [pc, #68]	; (80012a0 <HAL_ADC_ConfigChannel+0x2a8>)
 800125a:	fba2 2303 	umull	r2, r3, r2, r3
 800125e:	0c9a      	lsrs	r2, r3, #18
 8001260:	4613      	mov	r3, r2
 8001262:	009b      	lsls	r3, r3, #2
 8001264:	4413      	add	r3, r2
 8001266:	005b      	lsls	r3, r3, #1
 8001268:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800126a:	e002      	b.n	8001272 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	3b01      	subs	r3, #1
 8001270:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d1f9      	bne.n	800126c <HAL_ADC_ConfigChannel+0x274>
=======
 8001240:	4b11      	ldr	r3, [pc, #68]	; (8001288 <HAL_ADC_ConfigChannel+0x2a4>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a11      	ldr	r2, [pc, #68]	; (800128c <HAL_ADC_ConfigChannel+0x2a8>)
 8001246:	fba2 2303 	umull	r2, r3, r2, r3
 800124a:	0c9a      	lsrs	r2, r3, #18
 800124c:	4613      	mov	r3, r2
 800124e:	009b      	lsls	r3, r3, #2
 8001250:	4413      	add	r3, r2
 8001252:	005b      	lsls	r3, r3, #1
 8001254:	60fb      	str	r3, [r7, #12]
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
      while(counter != 0)
 800127a:	e002      	b.n	8001282 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	3b01      	subs	r3, #1
 8001280:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
<<<<<<< HEAD
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d1f9      	bne.n	800127c <HAL_ADC_ConfigChannel+0x274>
=======
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d1f9      	bne.n	8001258 <HAL_ADC_ConfigChannel+0x274>
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
<<<<<<< HEAD
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2200      	movs	r2, #0
 800128c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
=======
<<<<<<< HEAD
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	2200      	movs	r2, #0
 800127c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001280:	2300      	movs	r3, #0
}
 8001282:	4618      	mov	r0, r3
 8001284:	3714      	adds	r7, #20
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr
 800128e:	bf00      	nop
 8001290:	10000012 	.word	0x10000012
 8001294:	40012000 	.word	0x40012000
 8001298:	40012300 	.word	0x40012300
 800129c:	20000008 	.word	0x20000008
 80012a0:	431bde83 	.word	0x431bde83

080012a4 <ADC_Init>:
=======
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	2200      	movs	r2, #0
 8001268:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  
  /* Return function status */
  return HAL_OK;
 8001290:	2300      	movs	r3, #0
}
 8001292:	4618      	mov	r0, r3
 8001294:	3714      	adds	r7, #20
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
 800129e:	bf00      	nop
 80012a0:	10000012 	.word	0x10000012
 80012a4:	40012000 	.word	0x40012000
 80012a8:	40012300 	.word	0x40012300
 80012ac:	20000008 	.word	0x20000008
 80012b0:	431bde83 	.word	0x431bde83

<<<<<<< HEAD
080012b4 <ADC_Init>:
=======
08001290 <ADC_Init>:
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
<<<<<<< HEAD
 80012b4:	b480      	push	{r7}
 80012b6:	b083      	sub	sp, #12
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
=======
<<<<<<< HEAD
 80012a4:	b480      	push	{r7}
 80012a6:	b083      	sub	sp, #12
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80012ac:	4b78      	ldr	r3, [pc, #480]	; (8001490 <ADC_Init+0x1ec>)
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	4a77      	ldr	r2, [pc, #476]	; (8001490 <ADC_Init+0x1ec>)
 80012b2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80012b6:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80012b8:	4b75      	ldr	r3, [pc, #468]	; (8001490 <ADC_Init+0x1ec>)
 80012ba:	685a      	ldr	r2, [r3, #4]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	4973      	ldr	r1, [pc, #460]	; (8001490 <ADC_Init+0x1ec>)
 80012c2:	4313      	orrs	r3, r2
 80012c4:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	685a      	ldr	r2, [r3, #4]
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80012d4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	6859      	ldr	r1, [r3, #4]
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	691b      	ldr	r3, [r3, #16]
 80012e0:	021a      	lsls	r2, r3, #8
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	430a      	orrs	r2, r1
 80012e8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	685a      	ldr	r2, [r3, #4]
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80012f8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	6859      	ldr	r1, [r3, #4]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	689a      	ldr	r2, [r3, #8]
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	430a      	orrs	r2, r1
 800130a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	689a      	ldr	r2, [r3, #8]
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800131a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	6899      	ldr	r1, [r3, #8]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	68da      	ldr	r2, [r3, #12]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	430a      	orrs	r2, r1
 800132c:	609a      	str	r2, [r3, #8]
=======
 8001290:	b480      	push	{r7}
 8001292:	b083      	sub	sp, #12
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80012bc:	4b78      	ldr	r3, [pc, #480]	; (80014a0 <ADC_Init+0x1ec>)
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	4a77      	ldr	r2, [pc, #476]	; (80014a0 <ADC_Init+0x1ec>)
 80012c2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80012c6:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80012c8:	4b75      	ldr	r3, [pc, #468]	; (80014a0 <ADC_Init+0x1ec>)
 80012ca:	685a      	ldr	r2, [r3, #4]
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	4973      	ldr	r1, [pc, #460]	; (80014a0 <ADC_Init+0x1ec>)
 80012d2:	4313      	orrs	r3, r2
 80012d4:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	685a      	ldr	r2, [r3, #4]
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80012e4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	6859      	ldr	r1, [r3, #4]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	691b      	ldr	r3, [r3, #16]
 80012f0:	021a      	lsls	r2, r3, #8
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	430a      	orrs	r2, r1
 80012f8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	685a      	ldr	r2, [r3, #4]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001308:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	6859      	ldr	r1, [r3, #4]
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	689a      	ldr	r2, [r3, #8]
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	430a      	orrs	r2, r1
 800131a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	689a      	ldr	r2, [r3, #8]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800132a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
<<<<<<< HEAD
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	6899      	ldr	r1, [r3, #8]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	68da      	ldr	r2, [r3, #12]
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	430a      	orrs	r2, r1
 800133c:	609a      	str	r2, [r3, #8]
=======
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	6899      	ldr	r1, [r3, #8]
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	68da      	ldr	r2, [r3, #12]
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	430a      	orrs	r2, r1
 8001318:	609a      	str	r2, [r3, #8]
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
<<<<<<< HEAD
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001342:	4a58      	ldr	r2, [pc, #352]	; (80014a4 <ADC_Init+0x1f0>)
 8001344:	4293      	cmp	r3, r2
 8001346:	d022      	beq.n	800138e <ADC_Init+0xda>
=======
<<<<<<< HEAD
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001332:	4a58      	ldr	r2, [pc, #352]	; (8001494 <ADC_Init+0x1f0>)
 8001334:	4293      	cmp	r3, r2
 8001336:	d022      	beq.n	800137e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	689a      	ldr	r2, [r3, #8]
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001346:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	6899      	ldr	r1, [r3, #8]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	430a      	orrs	r2, r1
 8001358:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	689a      	ldr	r2, [r3, #8]
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001368:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	6899      	ldr	r1, [r3, #8]
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	430a      	orrs	r2, r1
 800137a:	609a      	str	r2, [r3, #8]
 800137c:	e00f      	b.n	800139e <ADC_Init+0xfa>
=======
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800131e:	4a58      	ldr	r2, [pc, #352]	; (8001480 <ADC_Init+0x1f0>)
 8001320:	4293      	cmp	r3, r2
 8001322:	d022      	beq.n	800136a <ADC_Init+0xda>
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	689a      	ldr	r2, [r3, #8]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001356:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	6899      	ldr	r1, [r3, #8]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	430a      	orrs	r2, r1
 8001368:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
<<<<<<< HEAD
=======
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	689a      	ldr	r2, [r3, #8]
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001354:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	6899      	ldr	r1, [r3, #8]
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	430a      	orrs	r2, r1
 8001366:	609a      	str	r2, [r3, #8]
 8001368:	e00f      	b.n	800138a <ADC_Init+0xfa>
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
<<<<<<< HEAD
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	689a      	ldr	r2, [r3, #8]
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800138c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	689a      	ldr	r2, [r3, #8]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800139c:	609a      	str	r2, [r3, #8]
=======
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	689a      	ldr	r2, [r3, #8]
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001378:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	6899      	ldr	r1, [r3, #8]
 8001380:	687b      	ldr	r3, [r7, #4]
<<<<<<< HEAD
 8001382:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	430a      	orrs	r2, r1
 800138a:	609a      	str	r2, [r3, #8]
 800138c:	e00f      	b.n	80013ae <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	689a      	ldr	r2, [r3, #8]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800139c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	689a      	ldr	r2, [r3, #8]
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80013ac:	609a      	str	r2, [r3, #8]
=======
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001388:	609a      	str	r2, [r3, #8]
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
<<<<<<< HEAD
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	689a      	ldr	r2, [r3, #8]
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f022 0202 	bic.w	r2, r2, #2
 80013bc:	609a      	str	r2, [r3, #8]
=======
<<<<<<< HEAD
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	689a      	ldr	r2, [r3, #8]
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f022 0202 	bic.w	r2, r2, #2
 80013ac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	6899      	ldr	r1, [r3, #8]
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	699b      	ldr	r3, [r3, #24]
 80013b8:	005a      	lsls	r2, r3, #1
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	430a      	orrs	r2, r1
 80013c0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d01b      	beq.n	8001404 <ADC_Init+0x160>
=======
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	689a      	ldr	r2, [r3, #8]
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f022 0202 	bic.w	r2, r2, #2
 8001398:	609a      	str	r2, [r3, #8]
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	6899      	ldr	r1, [r3, #8]
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	699b      	ldr	r3, [r3, #24]
 80013c8:	005a      	lsls	r2, r3, #1
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	430a      	orrs	r2, r1
 80013d0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
<<<<<<< HEAD
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d01b      	beq.n	8001414 <ADC_Init+0x160>
=======
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d01b      	beq.n	80013f0 <ADC_Init+0x160>
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
<<<<<<< HEAD
=======
<<<<<<< HEAD
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	685a      	ldr	r2, [r3, #4]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80013da:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	685a      	ldr	r2, [r3, #4]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
<<<<<<< HEAD
 80013e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80013ea:	605a      	str	r2, [r3, #4]
=======
 80013e6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80013ea:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	6859      	ldr	r1, [r3, #4]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013f6:	3b01      	subs	r3, #1
 80013f8:	035a      	lsls	r2, r3, #13
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	430a      	orrs	r2, r1
 8001400:	605a      	str	r2, [r3, #4]
 8001402:	e007      	b.n	8001414 <ADC_Init+0x170>
=======
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	685a      	ldr	r2, [r3, #4]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80013c6:	605a      	str	r2, [r3, #4]
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	685a      	ldr	r2, [r3, #4]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80013fa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
<<<<<<< HEAD
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	6859      	ldr	r1, [r3, #4]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001406:	3b01      	subs	r3, #1
 8001408:	035a      	lsls	r2, r3, #13
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	430a      	orrs	r2, r1
 8001410:	605a      	str	r2, [r3, #4]
 8001412:	e007      	b.n	8001424 <ADC_Init+0x170>
=======
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	6859      	ldr	r1, [r3, #4]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013e2:	3b01      	subs	r3, #1
 80013e4:	035a      	lsls	r2, r3, #13
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	430a      	orrs	r2, r1
 80013ec:	605a      	str	r2, [r3, #4]
 80013ee:	e007      	b.n	8001400 <ADC_Init+0x170>
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
<<<<<<< HEAD
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	685a      	ldr	r2, [r3, #4]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001422:	605a      	str	r2, [r3, #4]
=======
<<<<<<< HEAD
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	685a      	ldr	r2, [r3, #4]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001412:	605a      	str	r2, [r3, #4]
=======
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	685a      	ldr	r2, [r3, #4]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80013fe:	605a      	str	r2, [r3, #4]
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
<<<<<<< HEAD
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001432:	62da      	str	r2, [r3, #44]	; 0x2c
=======
<<<<<<< HEAD
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001422:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	69db      	ldr	r3, [r3, #28]
 800142e:	3b01      	subs	r3, #1
 8001430:	051a      	lsls	r2, r3, #20
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	430a      	orrs	r2, r1
 8001438:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	689a      	ldr	r2, [r3, #8]
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001448:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	6899      	ldr	r1, [r3, #8]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001456:	025a      	lsls	r2, r3, #9
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	430a      	orrs	r2, r1
 800145e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	689a      	ldr	r2, [r3, #8]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800146e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	6899      	ldr	r1, [r3, #8]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	695b      	ldr	r3, [r3, #20]
 800147a:	029a      	lsls	r2, r3, #10
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	430a      	orrs	r2, r1
 8001482:	609a      	str	r2, [r3, #8]
}
 8001484:	bf00      	nop
 8001486:	370c      	adds	r7, #12
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr
 8001490:	40012300 	.word	0x40012300
 8001494:	0f000001 	.word	0x0f000001

08001498 <__NVIC_SetPriorityGrouping>:
=======
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800140e:	62da      	str	r2, [r3, #44]	; 0x2c
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	69db      	ldr	r3, [r3, #28]
 800143e:	3b01      	subs	r3, #1
 8001440:	051a      	lsls	r2, r3, #20
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	430a      	orrs	r2, r1
 8001448:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	689a      	ldr	r2, [r3, #8]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001458:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	6899      	ldr	r1, [r3, #8]
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001466:	025a      	lsls	r2, r3, #9
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	430a      	orrs	r2, r1
 800146e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	689a      	ldr	r2, [r3, #8]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800147e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	6899      	ldr	r1, [r3, #8]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	695b      	ldr	r3, [r3, #20]
 800148a:	029a      	lsls	r2, r3, #10
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	430a      	orrs	r2, r1
 8001492:	609a      	str	r2, [r3, #8]
}
 8001494:	bf00      	nop
 8001496:	370c      	adds	r7, #12
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr
 80014a0:	40012300 	.word	0x40012300
 80014a4:	0f000001 	.word	0x0f000001

<<<<<<< HEAD
080014a8 <__NVIC_SetPriorityGrouping>:
=======
08001484 <__NVIC_SetPriorityGrouping>:
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
<<<<<<< HEAD
 80014a8:	b480      	push	{r7}
 80014aa:	b085      	sub	sp, #20
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
=======
<<<<<<< HEAD
 8001498:	b480      	push	{r7}
 800149a:	b085      	sub	sp, #20
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	f003 0307 	and.w	r3, r3, #7
 80014a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014a8:	4b0b      	ldr	r3, [pc, #44]	; (80014d8 <__NVIC_SetPriorityGrouping+0x40>)
 80014aa:	68db      	ldr	r3, [r3, #12]
 80014ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014ae:	68ba      	ldr	r2, [r7, #8]
 80014b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014b4:	4013      	ands	r3, r2
 80014b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014bc:	68bb      	ldr	r3, [r7, #8]
 80014be:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80014c0:	4b06      	ldr	r3, [pc, #24]	; (80014dc <__NVIC_SetPriorityGrouping+0x44>)
 80014c2:	4313      	orrs	r3, r2
 80014c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014c6:	4a04      	ldr	r2, [pc, #16]	; (80014d8 <__NVIC_SetPriorityGrouping+0x40>)
 80014c8:	68bb      	ldr	r3, [r7, #8]
 80014ca:	60d3      	str	r3, [r2, #12]
}
 80014cc:	bf00      	nop
 80014ce:	3714      	adds	r7, #20
 80014d0:	46bd      	mov	sp, r7
 80014d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d6:	4770      	bx	lr
 80014d8:	e000ed00 	.word	0xe000ed00
 80014dc:	05fa0000 	.word	0x05fa0000

080014e0 <__NVIC_GetPriorityGrouping>:
=======
 8001484:	b480      	push	{r7}
 8001486:	b085      	sub	sp, #20
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	f003 0307 	and.w	r3, r3, #7
 80014b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014b8:	4b0b      	ldr	r3, [pc, #44]	; (80014e8 <__NVIC_SetPriorityGrouping+0x40>)
 80014ba:	68db      	ldr	r3, [r3, #12]
 80014bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014be:	68ba      	ldr	r2, [r7, #8]
 80014c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014c4:	4013      	ands	r3, r2
 80014c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014cc:	68bb      	ldr	r3, [r7, #8]
 80014ce:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80014d0:	4b06      	ldr	r3, [pc, #24]	; (80014ec <__NVIC_SetPriorityGrouping+0x44>)
 80014d2:	4313      	orrs	r3, r2
 80014d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014d6:	4a04      	ldr	r2, [pc, #16]	; (80014e8 <__NVIC_SetPriorityGrouping+0x40>)
 80014d8:	68bb      	ldr	r3, [r7, #8]
 80014da:	60d3      	str	r3, [r2, #12]
}
 80014dc:	bf00      	nop
 80014de:	3714      	adds	r7, #20
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr
 80014e8:	e000ed00 	.word	0xe000ed00
 80014ec:	05fa0000 	.word	0x05fa0000

<<<<<<< HEAD
080014f0 <__NVIC_GetPriorityGrouping>:
=======
080014cc <__NVIC_GetPriorityGrouping>:
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
<<<<<<< HEAD
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
=======
<<<<<<< HEAD
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014e4:	4b04      	ldr	r3, [pc, #16]	; (80014f8 <__NVIC_GetPriorityGrouping+0x18>)
 80014e6:	68db      	ldr	r3, [r3, #12]
 80014e8:	0a1b      	lsrs	r3, r3, #8
 80014ea:	f003 0307 	and.w	r3, r3, #7
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	46bd      	mov	sp, r7
 80014f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f6:	4770      	bx	lr
 80014f8:	e000ed00 	.word	0xe000ed00

080014fc <__NVIC_EnableIRQ>:
=======
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014f4:	4b04      	ldr	r3, [pc, #16]	; (8001508 <__NVIC_GetPriorityGrouping+0x18>)
 80014f6:	68db      	ldr	r3, [r3, #12]
 80014f8:	0a1b      	lsrs	r3, r3, #8
 80014fa:	f003 0307 	and.w	r3, r3, #7
}
 80014fe:	4618      	mov	r0, r3
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr
 8001508:	e000ed00 	.word	0xe000ed00

<<<<<<< HEAD
0800150c <__NVIC_EnableIRQ>:
=======
080014e8 <__NVIC_EnableIRQ>:
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
<<<<<<< HEAD
 800150c:	b480      	push	{r7}
 800150e:	b083      	sub	sp, #12
 8001510:	af00      	add	r7, sp, #0
 8001512:	4603      	mov	r3, r0
 8001514:	71fb      	strb	r3, [r7, #7]
=======
<<<<<<< HEAD
 80014fc:	b480      	push	{r7}
 80014fe:	b083      	sub	sp, #12
 8001500:	af00      	add	r7, sp, #0
 8001502:	4603      	mov	r3, r0
 8001504:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001506:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800150a:	2b00      	cmp	r3, #0
 800150c:	db0b      	blt.n	8001526 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800150e:	79fb      	ldrb	r3, [r7, #7]
 8001510:	f003 021f 	and.w	r2, r3, #31
 8001514:	4907      	ldr	r1, [pc, #28]	; (8001534 <__NVIC_EnableIRQ+0x38>)
 8001516:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800151a:	095b      	lsrs	r3, r3, #5
 800151c:	2001      	movs	r0, #1
 800151e:	fa00 f202 	lsl.w	r2, r0, r2
 8001522:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001526:	bf00      	nop
 8001528:	370c      	adds	r7, #12
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr
 8001532:	bf00      	nop
 8001534:	e000e100 	.word	0xe000e100

08001538 <__NVIC_SetPriority>:
=======
 80014e8:	b480      	push	{r7}
 80014ea:	b083      	sub	sp, #12
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	4603      	mov	r3, r0
 80014f0:	71fb      	strb	r3, [r7, #7]
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  if ((int32_t)(IRQn) >= 0)
 8001516:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800151a:	2b00      	cmp	r3, #0
 800151c:	db0b      	blt.n	8001536 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800151e:	79fb      	ldrb	r3, [r7, #7]
 8001520:	f003 021f 	and.w	r2, r3, #31
 8001524:	4907      	ldr	r1, [pc, #28]	; (8001544 <__NVIC_EnableIRQ+0x38>)
 8001526:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800152a:	095b      	lsrs	r3, r3, #5
 800152c:	2001      	movs	r0, #1
 800152e:	fa00 f202 	lsl.w	r2, r0, r2
 8001532:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001536:	bf00      	nop
 8001538:	370c      	adds	r7, #12
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr
 8001542:	bf00      	nop
 8001544:	e000e100 	.word	0xe000e100

<<<<<<< HEAD
08001548 <__NVIC_SetPriority>:
=======
08001524 <__NVIC_SetPriority>:
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
<<<<<<< HEAD
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
 800154e:	4603      	mov	r3, r0
 8001550:	6039      	str	r1, [r7, #0]
 8001552:	71fb      	strb	r3, [r7, #7]
=======
<<<<<<< HEAD
 8001538:	b480      	push	{r7}
 800153a:	b083      	sub	sp, #12
 800153c:	af00      	add	r7, sp, #0
 800153e:	4603      	mov	r3, r0
 8001540:	6039      	str	r1, [r7, #0]
 8001542:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001544:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001548:	2b00      	cmp	r3, #0
 800154a:	db0a      	blt.n	8001562 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	b2da      	uxtb	r2, r3
 8001550:	490c      	ldr	r1, [pc, #48]	; (8001584 <__NVIC_SetPriority+0x4c>)
 8001552:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001556:	0112      	lsls	r2, r2, #4
 8001558:	b2d2      	uxtb	r2, r2
 800155a:	440b      	add	r3, r1
 800155c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
=======
 8001524:	b480      	push	{r7}
 8001526:	b083      	sub	sp, #12
 8001528:	af00      	add	r7, sp, #0
 800152a:	4603      	mov	r3, r0
 800152c:	6039      	str	r1, [r7, #0]
 800152e:	71fb      	strb	r3, [r7, #7]
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  if ((int32_t)(IRQn) >= 0)
 8001554:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001558:	2b00      	cmp	r3, #0
 800155a:	db0a      	blt.n	8001572 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
<<<<<<< HEAD
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	b2da      	uxtb	r2, r3
 8001560:	490c      	ldr	r1, [pc, #48]	; (8001594 <__NVIC_SetPriority+0x4c>)
 8001562:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001566:	0112      	lsls	r2, r2, #4
 8001568:	b2d2      	uxtb	r2, r2
 800156a:	440b      	add	r3, r1
 800156c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
=======
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	b2da      	uxtb	r2, r3
 800153c:	490c      	ldr	r1, [pc, #48]	; (8001570 <__NVIC_SetPriority+0x4c>)
 800153e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001542:	0112      	lsls	r2, r2, #4
 8001544:	b2d2      	uxtb	r2, r2
 8001546:	440b      	add	r3, r1
 8001548:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
<<<<<<< HEAD
 8001570:	e00a      	b.n	8001588 <__NVIC_SetPriority+0x40>
=======
<<<<<<< HEAD
 8001560:	e00a      	b.n	8001578 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	b2da      	uxtb	r2, r3
 8001566:	4908      	ldr	r1, [pc, #32]	; (8001588 <__NVIC_SetPriority+0x50>)
 8001568:	79fb      	ldrb	r3, [r7, #7]
 800156a:	f003 030f 	and.w	r3, r3, #15
 800156e:	3b04      	subs	r3, #4
 8001570:	0112      	lsls	r2, r2, #4
 8001572:	b2d2      	uxtb	r2, r2
 8001574:	440b      	add	r3, r1
 8001576:	761a      	strb	r2, [r3, #24]
}
 8001578:	bf00      	nop
 800157a:	370c      	adds	r7, #12
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr
 8001584:	e000e100 	.word	0xe000e100
 8001588:	e000ed00 	.word	0xe000ed00

0800158c <NVIC_EncodePriority>:
=======
 800154c:	e00a      	b.n	8001564 <__NVIC_SetPriority+0x40>
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	b2da      	uxtb	r2, r3
 8001576:	4908      	ldr	r1, [pc, #32]	; (8001598 <__NVIC_SetPriority+0x50>)
 8001578:	79fb      	ldrb	r3, [r7, #7]
 800157a:	f003 030f 	and.w	r3, r3, #15
 800157e:	3b04      	subs	r3, #4
 8001580:	0112      	lsls	r2, r2, #4
 8001582:	b2d2      	uxtb	r2, r2
 8001584:	440b      	add	r3, r1
 8001586:	761a      	strb	r2, [r3, #24]
}
 8001588:	bf00      	nop
 800158a:	370c      	adds	r7, #12
 800158c:	46bd      	mov	sp, r7
 800158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001592:	4770      	bx	lr
 8001594:	e000e100 	.word	0xe000e100
 8001598:	e000ed00 	.word	0xe000ed00

<<<<<<< HEAD
0800159c <NVIC_EncodePriority>:
=======
08001578 <NVIC_EncodePriority>:
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
<<<<<<< HEAD
 800159c:	b480      	push	{r7}
 800159e:	b089      	sub	sp, #36	; 0x24
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	60f8      	str	r0, [r7, #12]
 80015a4:	60b9      	str	r1, [r7, #8]
 80015a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	f003 0307 	and.w	r3, r3, #7
 80015ae:	61fb      	str	r3, [r7, #28]
=======
<<<<<<< HEAD
 800158c:	b480      	push	{r7}
 800158e:	b089      	sub	sp, #36	; 0x24
 8001590:	af00      	add	r7, sp, #0
 8001592:	60f8      	str	r0, [r7, #12]
 8001594:	60b9      	str	r1, [r7, #8]
 8001596:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	f003 0307 	and.w	r3, r3, #7
 800159e:	61fb      	str	r3, [r7, #28]
=======
 8001578:	b480      	push	{r7}
 800157a:	b089      	sub	sp, #36	; 0x24
 800157c:	af00      	add	r7, sp, #0
 800157e:	60f8      	str	r0, [r7, #12]
 8001580:	60b9      	str	r1, [r7, #8]
 8001582:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	f003 0307 	and.w	r3, r3, #7
 800158a:	61fb      	str	r3, [r7, #28]
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
<<<<<<< HEAD
 80015b0:	69fb      	ldr	r3, [r7, #28]
 80015b2:	f1c3 0307 	rsb	r3, r3, #7
 80015b6:	2b04      	cmp	r3, #4
 80015b8:	bf28      	it	cs
 80015ba:	2304      	movcs	r3, #4
 80015bc:	61bb      	str	r3, [r7, #24]
=======
<<<<<<< HEAD
 80015a0:	69fb      	ldr	r3, [r7, #28]
 80015a2:	f1c3 0307 	rsb	r3, r3, #7
 80015a6:	2b04      	cmp	r3, #4
 80015a8:	bf28      	it	cs
 80015aa:	2304      	movcs	r3, #4
 80015ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015ae:	69fb      	ldr	r3, [r7, #28]
 80015b0:	3304      	adds	r3, #4
 80015b2:	2b06      	cmp	r3, #6
 80015b4:	d902      	bls.n	80015bc <NVIC_EncodePriority+0x30>
 80015b6:	69fb      	ldr	r3, [r7, #28]
 80015b8:	3b03      	subs	r3, #3
 80015ba:	e000      	b.n	80015be <NVIC_EncodePriority+0x32>
 80015bc:	2300      	movs	r3, #0
 80015be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015c0:	f04f 32ff 	mov.w	r2, #4294967295
 80015c4:	69bb      	ldr	r3, [r7, #24]
 80015c6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ca:	43da      	mvns	r2, r3
 80015cc:	68bb      	ldr	r3, [r7, #8]
 80015ce:	401a      	ands	r2, r3
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015d4:	f04f 31ff 	mov.w	r1, #4294967295
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	fa01 f303 	lsl.w	r3, r1, r3
 80015de:	43d9      	mvns	r1, r3
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015e4:	4313      	orrs	r3, r2
         );
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	3724      	adds	r7, #36	; 0x24
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr
	...

080015f4 <SysTick_Config>:
=======
 800158c:	69fb      	ldr	r3, [r7, #28]
 800158e:	f1c3 0307 	rsb	r3, r3, #7
 8001592:	2b04      	cmp	r3, #4
 8001594:	bf28      	it	cs
 8001596:	2304      	movcs	r3, #4
 8001598:	61bb      	str	r3, [r7, #24]
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015be:	69fb      	ldr	r3, [r7, #28]
 80015c0:	3304      	adds	r3, #4
 80015c2:	2b06      	cmp	r3, #6
 80015c4:	d902      	bls.n	80015cc <NVIC_EncodePriority+0x30>
 80015c6:	69fb      	ldr	r3, [r7, #28]
 80015c8:	3b03      	subs	r3, #3
 80015ca:	e000      	b.n	80015ce <NVIC_EncodePriority+0x32>
 80015cc:	2300      	movs	r3, #0
 80015ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015d0:	f04f 32ff 	mov.w	r2, #4294967295
 80015d4:	69bb      	ldr	r3, [r7, #24]
 80015d6:	fa02 f303 	lsl.w	r3, r2, r3
 80015da:	43da      	mvns	r2, r3
 80015dc:	68bb      	ldr	r3, [r7, #8]
 80015de:	401a      	ands	r2, r3
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015e4:	f04f 31ff 	mov.w	r1, #4294967295
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	fa01 f303 	lsl.w	r3, r1, r3
 80015ee:	43d9      	mvns	r1, r3
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015f4:	4313      	orrs	r3, r2
         );
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	3724      	adds	r7, #36	; 0x24
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr
	...

<<<<<<< HEAD
08001604 <SysTick_Config>:
=======
080015e0 <SysTick_Config>:
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
<<<<<<< HEAD
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
=======
<<<<<<< HEAD
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	3b01      	subs	r3, #1
 8001600:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001604:	d301      	bcc.n	800160a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001606:	2301      	movs	r3, #1
 8001608:	e00f      	b.n	800162a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800160a:	4a0a      	ldr	r2, [pc, #40]	; (8001634 <SysTick_Config+0x40>)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	3b01      	subs	r3, #1
 8001610:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001612:	210f      	movs	r1, #15
 8001614:	f04f 30ff 	mov.w	r0, #4294967295
 8001618:	f7ff ff8e 	bl	8001538 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800161c:	4b05      	ldr	r3, [pc, #20]	; (8001634 <SysTick_Config+0x40>)
 800161e:	2200      	movs	r2, #0
 8001620:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001622:	4b04      	ldr	r3, [pc, #16]	; (8001634 <SysTick_Config+0x40>)
 8001624:	2207      	movs	r2, #7
 8001626:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001628:	2300      	movs	r3, #0
}
 800162a:	4618      	mov	r0, r3
 800162c:	3708      	adds	r7, #8
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	e000e010 	.word	0xe000e010

08001638 <HAL_NVIC_SetPriorityGrouping>:
=======
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	3b01      	subs	r3, #1
 8001610:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001614:	d301      	bcc.n	800161a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001616:	2301      	movs	r3, #1
 8001618:	e00f      	b.n	800163a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800161a:	4a0a      	ldr	r2, [pc, #40]	; (8001644 <SysTick_Config+0x40>)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	3b01      	subs	r3, #1
 8001620:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001622:	210f      	movs	r1, #15
 8001624:	f04f 30ff 	mov.w	r0, #4294967295
 8001628:	f7ff ff8e 	bl	8001548 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800162c:	4b05      	ldr	r3, [pc, #20]	; (8001644 <SysTick_Config+0x40>)
 800162e:	2200      	movs	r2, #0
 8001630:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001632:	4b04      	ldr	r3, [pc, #16]	; (8001644 <SysTick_Config+0x40>)
 8001634:	2207      	movs	r2, #7
 8001636:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001638:	2300      	movs	r3, #0
}
 800163a:	4618      	mov	r0, r3
 800163c:	3708      	adds	r7, #8
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	e000e010 	.word	0xe000e010

<<<<<<< HEAD
08001648 <HAL_NVIC_SetPriorityGrouping>:
=======
08001624 <HAL_NVIC_SetPriorityGrouping>:
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
<<<<<<< HEAD
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
=======
<<<<<<< HEAD
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
=======
 8001624:	b580      	push	{r7, lr}
 8001626:	b082      	sub	sp, #8
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
<<<<<<< HEAD
 8001650:	6878      	ldr	r0, [r7, #4]
 8001652:	f7ff ff29 	bl	80014a8 <__NVIC_SetPriorityGrouping>
=======
<<<<<<< HEAD
 8001640:	6878      	ldr	r0, [r7, #4]
 8001642:	f7ff ff29 	bl	8001498 <__NVIC_SetPriorityGrouping>
}
 8001646:	bf00      	nop
 8001648:	3708      	adds	r7, #8
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}

0800164e <HAL_NVIC_SetPriority>:
=======
 800162c:	6878      	ldr	r0, [r7, #4]
 800162e:	f7ff ff29 	bl	8001484 <__NVIC_SetPriorityGrouping>
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
}
 8001656:	bf00      	nop
 8001658:	3708      	adds	r7, #8
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}

<<<<<<< HEAD
0800165e <HAL_NVIC_SetPriority>:
=======
0800163a <HAL_NVIC_SetPriority>:
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
<<<<<<< HEAD
 800165e:	b580      	push	{r7, lr}
 8001660:	b086      	sub	sp, #24
 8001662:	af00      	add	r7, sp, #0
 8001664:	4603      	mov	r3, r0
 8001666:	60b9      	str	r1, [r7, #8]
 8001668:	607a      	str	r2, [r7, #4]
 800166a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800166c:	2300      	movs	r3, #0
 800166e:	617b      	str	r3, [r7, #20]
=======
<<<<<<< HEAD
 800164e:	b580      	push	{r7, lr}
 8001650:	b086      	sub	sp, #24
 8001652:	af00      	add	r7, sp, #0
 8001654:	4603      	mov	r3, r0
 8001656:	60b9      	str	r1, [r7, #8]
 8001658:	607a      	str	r2, [r7, #4]
 800165a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800165c:	2300      	movs	r3, #0
 800165e:	617b      	str	r3, [r7, #20]
=======
 800163a:	b580      	push	{r7, lr}
 800163c:	b086      	sub	sp, #24
 800163e:	af00      	add	r7, sp, #0
 8001640:	4603      	mov	r3, r0
 8001642:	60b9      	str	r1, [r7, #8]
 8001644:	607a      	str	r2, [r7, #4]
 8001646:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001648:	2300      	movs	r3, #0
 800164a:	617b      	str	r3, [r7, #20]
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
<<<<<<< HEAD
 8001670:	f7ff ff3e 	bl	80014f0 <__NVIC_GetPriorityGrouping>
 8001674:	6178      	str	r0, [r7, #20]
=======
<<<<<<< HEAD
 8001660:	f7ff ff3e 	bl	80014e0 <__NVIC_GetPriorityGrouping>
 8001664:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001666:	687a      	ldr	r2, [r7, #4]
 8001668:	68b9      	ldr	r1, [r7, #8]
 800166a:	6978      	ldr	r0, [r7, #20]
 800166c:	f7ff ff8e 	bl	800158c <NVIC_EncodePriority>
 8001670:	4602      	mov	r2, r0
 8001672:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001676:	4611      	mov	r1, r2
 8001678:	4618      	mov	r0, r3
 800167a:	f7ff ff5d 	bl	8001538 <__NVIC_SetPriority>
}
 800167e:	bf00      	nop
 8001680:	3718      	adds	r7, #24
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}

08001686 <HAL_NVIC_EnableIRQ>:
=======
 800164c:	f7ff ff3e 	bl	80014cc <__NVIC_GetPriorityGrouping>
 8001650:	6178      	str	r0, [r7, #20]
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001676:	687a      	ldr	r2, [r7, #4]
 8001678:	68b9      	ldr	r1, [r7, #8]
 800167a:	6978      	ldr	r0, [r7, #20]
 800167c:	f7ff ff8e 	bl	800159c <NVIC_EncodePriority>
 8001680:	4602      	mov	r2, r0
 8001682:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001686:	4611      	mov	r1, r2
 8001688:	4618      	mov	r0, r3
 800168a:	f7ff ff5d 	bl	8001548 <__NVIC_SetPriority>
}
 800168e:	bf00      	nop
 8001690:	3718      	adds	r7, #24
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}

<<<<<<< HEAD
08001696 <HAL_NVIC_EnableIRQ>:
=======
08001672 <HAL_NVIC_EnableIRQ>:
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
<<<<<<< HEAD
 8001696:	b580      	push	{r7, lr}
 8001698:	b082      	sub	sp, #8
 800169a:	af00      	add	r7, sp, #0
 800169c:	4603      	mov	r3, r0
 800169e:	71fb      	strb	r3, [r7, #7]
=======
<<<<<<< HEAD
 8001686:	b580      	push	{r7, lr}
 8001688:	b082      	sub	sp, #8
 800168a:	af00      	add	r7, sp, #0
 800168c:	4603      	mov	r3, r0
 800168e:	71fb      	strb	r3, [r7, #7]
=======
 8001672:	b580      	push	{r7, lr}
 8001674:	b082      	sub	sp, #8
 8001676:	af00      	add	r7, sp, #0
 8001678:	4603      	mov	r3, r0
 800167a:	71fb      	strb	r3, [r7, #7]
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
<<<<<<< HEAD
 80016a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a4:	4618      	mov	r0, r3
 80016a6:	f7ff ff31 	bl	800150c <__NVIC_EnableIRQ>
=======
<<<<<<< HEAD
 8001690:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001694:	4618      	mov	r0, r3
 8001696:	f7ff ff31 	bl	80014fc <__NVIC_EnableIRQ>
}
 800169a:	bf00      	nop
 800169c:	3708      	adds	r7, #8
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}

080016a2 <HAL_SYSTICK_Config>:
=======
 800167c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001680:	4618      	mov	r0, r3
 8001682:	f7ff ff31 	bl	80014e8 <__NVIC_EnableIRQ>
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
}
 80016aa:	bf00      	nop
 80016ac:	3708      	adds	r7, #8
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}

<<<<<<< HEAD
080016b2 <HAL_SYSTICK_Config>:
=======
0800168e <HAL_SYSTICK_Config>:
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
<<<<<<< HEAD
 80016b2:	b580      	push	{r7, lr}
 80016b4:	b082      	sub	sp, #8
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	6078      	str	r0, [r7, #4]
=======
<<<<<<< HEAD
 80016a2:	b580      	push	{r7, lr}
 80016a4:	b082      	sub	sp, #8
 80016a6:	af00      	add	r7, sp, #0
 80016a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016aa:	6878      	ldr	r0, [r7, #4]
 80016ac:	f7ff ffa2 	bl	80015f4 <SysTick_Config>
 80016b0:	4603      	mov	r3, r0
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	3708      	adds	r7, #8
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
	...

080016bc <HAL_DMA_Init>:
=======
 800168e:	b580      	push	{r7, lr}
 8001690:	b082      	sub	sp, #8
 8001692:	af00      	add	r7, sp, #0
 8001694:	6078      	str	r0, [r7, #4]
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
   return SysTick_Config(TicksNumb);
 80016ba:	6878      	ldr	r0, [r7, #4]
 80016bc:	f7ff ffa2 	bl	8001604 <SysTick_Config>
 80016c0:	4603      	mov	r3, r0
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	3708      	adds	r7, #8
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
	...

<<<<<<< HEAD
080016cc <HAL_DMA_Init>:
=======
080016a8 <HAL_DMA_Init>:
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b086      	sub	sp, #24
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
=======
<<<<<<< HEAD
 80016bc:	b580      	push	{r7, lr}
 80016be:	b086      	sub	sp, #24
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80016c4:	2300      	movs	r3, #0
 80016c6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80016c8:	f7ff fc22 	bl	8000f10 <HAL_GetTick>
 80016cc:	6138      	str	r0, [r7, #16]
=======
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b086      	sub	sp, #24
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  uint32_t tmp = 0U;
 80016d4:	2300      	movs	r3, #0
 80016d6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
<<<<<<< HEAD
 80016d8:	f7ff fc22 	bl	8000f20 <HAL_GetTick>
 80016dc:	6138      	str	r0, [r7, #16]
=======
 80016b4:	f7ff fc22 	bl	8000efc <HAL_GetTick>
 80016b8:	6138      	str	r0, [r7, #16]
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
<<<<<<< HEAD
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d101      	bne.n	80016e8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80016e4:	2301      	movs	r3, #1
 80016e6:	e099      	b.n	800181c <HAL_DMA_Init+0x150>
=======
<<<<<<< HEAD
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d101      	bne.n	80016d8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80016d4:	2301      	movs	r3, #1
 80016d6:	e099      	b.n	800180c <HAL_DMA_Init+0x150>
=======
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d101      	bne.n	80016c4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80016c0:	2301      	movs	r3, #1
 80016c2:	e099      	b.n	80017f8 <HAL_DMA_Init+0x150>
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
<<<<<<< HEAD
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2202      	movs	r2, #2
 80016ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2200      	movs	r2, #0
 80016f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
=======
<<<<<<< HEAD
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2202      	movs	r2, #2
 80016dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2200      	movs	r2, #0
 80016e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
=======
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2202      	movs	r2, #2
 80016c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2200      	movs	r2, #0
 80016d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
<<<<<<< HEAD
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	681a      	ldr	r2, [r3, #0]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f022 0201 	bic.w	r2, r2, #1
 8001706:	601a      	str	r2, [r3, #0]
=======
<<<<<<< HEAD
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	681a      	ldr	r2, [r3, #0]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f022 0201 	bic.w	r2, r2, #1
 80016f6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80016f8:	e00f      	b.n	800171a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80016fa:	f7ff fc09 	bl	8000f10 <HAL_GetTick>
 80016fe:	4602      	mov	r2, r0
 8001700:	693b      	ldr	r3, [r7, #16]
 8001702:	1ad3      	subs	r3, r2, r3
 8001704:	2b05      	cmp	r3, #5
 8001706:	d908      	bls.n	800171a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2220      	movs	r2, #32
 800170c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2203      	movs	r2, #3
 8001712:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001716:	2303      	movs	r3, #3
 8001718:	e078      	b.n	800180c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f003 0301 	and.w	r3, r3, #1
 8001724:	2b00      	cmp	r3, #0
 8001726:	d1e8      	bne.n	80016fa <HAL_DMA_Init+0x3e>
=======
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	681a      	ldr	r2, [r3, #0]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f022 0201 	bic.w	r2, r2, #1
 80016e2:	601a      	str	r2, [r3, #0]
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001708:	e00f      	b.n	800172a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800170a:	f7ff fc09 	bl	8000f20 <HAL_GetTick>
 800170e:	4602      	mov	r2, r0
 8001710:	693b      	ldr	r3, [r7, #16]
 8001712:	1ad3      	subs	r3, r2, r3
 8001714:	2b05      	cmp	r3, #5
 8001716:	d908      	bls.n	800172a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2220      	movs	r2, #32
 800171c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2203      	movs	r2, #3
 8001722:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001726:	2303      	movs	r3, #3
 8001728:	e078      	b.n	800181c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
<<<<<<< HEAD
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f003 0301 	and.w	r3, r3, #1
 8001734:	2b00      	cmp	r3, #0
 8001736:	d1e8      	bne.n	800170a <HAL_DMA_Init+0x3e>
=======
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f003 0301 	and.w	r3, r3, #1
 8001710:	2b00      	cmp	r3, #0
 8001712:	d1e8      	bne.n	80016e6 <HAL_DMA_Init+0x3e>
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
<<<<<<< HEAD
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001740:	697a      	ldr	r2, [r7, #20]
 8001742:	4b38      	ldr	r3, [pc, #224]	; (8001824 <HAL_DMA_Init+0x158>)
 8001744:	4013      	ands	r3, r2
 8001746:	617b      	str	r3, [r7, #20]
=======
<<<<<<< HEAD
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001730:	697a      	ldr	r2, [r7, #20]
 8001732:	4b38      	ldr	r3, [pc, #224]	; (8001814 <HAL_DMA_Init+0x158>)
 8001734:	4013      	ands	r3, r2
 8001736:	617b      	str	r3, [r7, #20]
=======
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800171c:	697a      	ldr	r2, [r7, #20]
 800171e:	4b38      	ldr	r3, [pc, #224]	; (8001800 <HAL_DMA_Init+0x158>)
 8001720:	4013      	ands	r3, r2
 8001722:	617b      	str	r3, [r7, #20]
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
<<<<<<< HEAD
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	685a      	ldr	r2, [r3, #4]
=======
<<<<<<< HEAD
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	685a      	ldr	r2, [r3, #4]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	689b      	ldr	r3, [r3, #8]
 8001740:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001746:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	691b      	ldr	r3, [r3, #16]
 800174c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001752:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	699b      	ldr	r3, [r3, #24]
 8001758:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800175e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6a1b      	ldr	r3, [r3, #32]
 8001764:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001766:	697a      	ldr	r2, [r7, #20]
 8001768:	4313      	orrs	r3, r2
 800176a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001770:	2b04      	cmp	r3, #4
 8001772:	d107      	bne.n	8001784 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177c:	4313      	orrs	r3, r2
 800177e:	697a      	ldr	r2, [r7, #20]
 8001780:	4313      	orrs	r3, r2
 8001782:	617b      	str	r3, [r7, #20]
=======
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	685a      	ldr	r2, [r3, #4]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	689b      	ldr	r3, [r3, #8]
 800172c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001732:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	691b      	ldr	r3, [r3, #16]
 8001738:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800173e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	699b      	ldr	r3, [r3, #24]
 8001744:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800174a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	689b      	ldr	r3, [r3, #8]
 8001750:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001756:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	691b      	ldr	r3, [r3, #16]
 800175c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001762:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	699b      	ldr	r3, [r3, #24]
 8001768:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800176e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6a1b      	ldr	r3, [r3, #32]
 8001774:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001776:	697a      	ldr	r2, [r7, #20]
 8001778:	4313      	orrs	r3, r2
 800177a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001780:	2b04      	cmp	r3, #4
 8001782:	d107      	bne.n	8001794 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
<<<<<<< HEAD
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178c:	4313      	orrs	r3, r2
 800178e:	697a      	ldr	r2, [r7, #20]
 8001790:	4313      	orrs	r3, r2
 8001792:	617b      	str	r3, [r7, #20]
=======
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001768:	4313      	orrs	r3, r2
 800176a:	697a      	ldr	r2, [r7, #20]
 800176c:	4313      	orrs	r3, r2
 800176e:	617b      	str	r3, [r7, #20]
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
<<<<<<< HEAD
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	697a      	ldr	r2, [r7, #20]
 800179a:	601a      	str	r2, [r3, #0]
=======
<<<<<<< HEAD
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	697a      	ldr	r2, [r7, #20]
 800178a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	695b      	ldr	r3, [r3, #20]
 8001792:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	f023 0307 	bic.w	r3, r3, #7
 800179a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017a0:	697a      	ldr	r2, [r7, #20]
 80017a2:	4313      	orrs	r3, r2
 80017a4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017aa:	2b04      	cmp	r3, #4
 80017ac:	d117      	bne.n	80017de <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017b2:	697a      	ldr	r2, [r7, #20]
 80017b4:	4313      	orrs	r3, r2
 80017b6:	617b      	str	r3, [r7, #20]
=======
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	697a      	ldr	r2, [r7, #20]
 8001776:	601a      	str	r2, [r3, #0]
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	695b      	ldr	r3, [r3, #20]
 80017a2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	f023 0307 	bic.w	r3, r3, #7
 80017aa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017b0:	697a      	ldr	r2, [r7, #20]
 80017b2:	4313      	orrs	r3, r2
 80017b4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ba:	2b04      	cmp	r3, #4
 80017bc:	d117      	bne.n	80017ee <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
<<<<<<< HEAD
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017c2:	697a      	ldr	r2, [r7, #20]
 80017c4:	4313      	orrs	r3, r2
 80017c6:	617b      	str	r3, [r7, #20]
=======
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800179e:	697a      	ldr	r2, [r7, #20]
 80017a0:	4313      	orrs	r3, r2
 80017a2:	617b      	str	r3, [r7, #20]
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
<<<<<<< HEAD
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d00e      	beq.n	80017ee <HAL_DMA_Init+0x122>
=======
<<<<<<< HEAD
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d00e      	beq.n	80017de <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80017c0:	6878      	ldr	r0, [r7, #4]
 80017c2:	f000 fa7b 	bl	8001cbc <DMA_CheckFifoParam>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d008      	beq.n	80017de <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2240      	movs	r2, #64	; 0x40
 80017d0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2201      	movs	r2, #1
 80017d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80017da:	2301      	movs	r3, #1
 80017dc:	e016      	b.n	800180c <HAL_DMA_Init+0x150>
=======
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d00e      	beq.n	80017ca <HAL_DMA_Init+0x122>
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80017d0:	6878      	ldr	r0, [r7, #4]
 80017d2:	f000 fa7b 	bl	8001ccc <DMA_CheckFifoParam>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d008      	beq.n	80017ee <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2240      	movs	r2, #64	; 0x40
 80017e0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2201      	movs	r2, #1
 80017e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
<<<<<<< HEAD
 80017ea:	2301      	movs	r3, #1
 80017ec:	e016      	b.n	800181c <HAL_DMA_Init+0x150>
=======
 80017c6:	2301      	movs	r3, #1
 80017c8:	e016      	b.n	80017f8 <HAL_DMA_Init+0x150>
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
<<<<<<< HEAD
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	697a      	ldr	r2, [r7, #20]
 80017f4:	615a      	str	r2, [r3, #20]
=======
<<<<<<< HEAD
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	697a      	ldr	r2, [r7, #20]
 80017e4:	615a      	str	r2, [r3, #20]
=======
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	697a      	ldr	r2, [r7, #20]
 80017d0:	615a      	str	r2, [r3, #20]
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
<<<<<<< HEAD
 80017f6:	6878      	ldr	r0, [r7, #4]
 80017f8:	f000 fa32 	bl	8001c60 <DMA_CalcBaseAndBitshift>
 80017fc:	4603      	mov	r3, r0
 80017fe:	60fb      	str	r3, [r7, #12]
=======
<<<<<<< HEAD
 80017e6:	6878      	ldr	r0, [r7, #4]
 80017e8:	f000 fa32 	bl	8001c50 <DMA_CalcBaseAndBitshift>
 80017ec:	4603      	mov	r3, r0
 80017ee:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017f4:	223f      	movs	r2, #63	; 0x3f
 80017f6:	409a      	lsls	r2, r3
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2200      	movs	r2, #0
 8001800:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2201      	movs	r2, #1
 8001806:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800180a:	2300      	movs	r3, #0
}
 800180c:	4618      	mov	r0, r3
 800180e:	3718      	adds	r7, #24
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}
 8001814:	f010803f 	.word	0xf010803f

08001818 <HAL_DMA_Abort>:
=======
 80017d2:	6878      	ldr	r0, [r7, #4]
 80017d4:	f000 fa32 	bl	8001c3c <DMA_CalcBaseAndBitshift>
 80017d8:	4603      	mov	r3, r0
 80017da:	60fb      	str	r3, [r7, #12]
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001804:	223f      	movs	r2, #63	; 0x3f
 8001806:	409a      	lsls	r2, r3
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2200      	movs	r2, #0
 8001810:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2201      	movs	r2, #1
 8001816:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800181a:	2300      	movs	r3, #0
}
 800181c:	4618      	mov	r0, r3
 800181e:	3718      	adds	r7, #24
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	f010803f 	.word	0xf010803f

<<<<<<< HEAD
08001828 <HAL_DMA_Abort>:
=======
08001804 <HAL_DMA_Abort>:
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 8001828:	b580      	push	{r7, lr}
 800182a:	b084      	sub	sp, #16
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
=======
<<<<<<< HEAD
 8001818:	b580      	push	{r7, lr}
 800181a:	b084      	sub	sp, #16
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001824:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001826:	f7ff fb73 	bl	8000f10 <HAL_GetTick>
 800182a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001832:	b2db      	uxtb	r3, r3
 8001834:	2b02      	cmp	r3, #2
 8001836:	d008      	beq.n	800184a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2280      	movs	r2, #128	; 0x80
 800183c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2200      	movs	r2, #0
 8001842:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001846:	2301      	movs	r3, #1
 8001848:	e052      	b.n	80018f0 <HAL_DMA_Abort+0xd8>
=======
 8001804:	b580      	push	{r7, lr}
 8001806:	b084      	sub	sp, #16
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001834:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001836:	f7ff fb73 	bl	8000f20 <HAL_GetTick>
 800183a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001842:	b2db      	uxtb	r3, r3
 8001844:	2b02      	cmp	r3, #2
 8001846:	d008      	beq.n	800185a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2280      	movs	r2, #128	; 0x80
 800184c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2200      	movs	r2, #0
 8001852:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
<<<<<<< HEAD
 8001856:	2301      	movs	r3, #1
 8001858:	e052      	b.n	8001900 <HAL_DMA_Abort+0xd8>
=======
 8001832:	2301      	movs	r3, #1
 8001834:	e052      	b.n	80018dc <HAL_DMA_Abort+0xd8>
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
<<<<<<< HEAD
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	681a      	ldr	r2, [r3, #0]
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f022 0216 	bic.w	r2, r2, #22
 8001868:	601a      	str	r2, [r3, #0]
=======
<<<<<<< HEAD
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	681a      	ldr	r2, [r3, #0]
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f022 0216 	bic.w	r2, r2, #22
 8001858:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	695a      	ldr	r2, [r3, #20]
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001868:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186e:	2b00      	cmp	r3, #0
 8001870:	d103      	bne.n	800187a <HAL_DMA_Abort+0x62>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001876:	2b00      	cmp	r3, #0
 8001878:	d007      	beq.n	800188a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f022 0208 	bic.w	r2, r2, #8
 8001888:	601a      	str	r2, [r3, #0]
=======
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f022 0216 	bic.w	r2, r2, #22
 8001844:	601a      	str	r2, [r3, #0]
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	695a      	ldr	r2, [r3, #20]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001878:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187e:	2b00      	cmp	r3, #0
 8001880:	d103      	bne.n	800188a <HAL_DMA_Abort+0x62>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001886:	2b00      	cmp	r3, #0
 8001888:	d007      	beq.n	800189a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
<<<<<<< HEAD
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f022 0208 	bic.w	r2, r2, #8
 8001898:	601a      	str	r2, [r3, #0]
=======
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	681a      	ldr	r2, [r3, #0]
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f022 0208 	bic.w	r2, r2, #8
 8001874:	601a      	str	r2, [r3, #0]
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
<<<<<<< HEAD
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	681a      	ldr	r2, [r3, #0]
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f022 0201 	bic.w	r2, r2, #1
 80018a8:	601a      	str	r2, [r3, #0]
=======
<<<<<<< HEAD
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f022 0201 	bic.w	r2, r2, #1
 8001898:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800189a:	e013      	b.n	80018c4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800189c:	f7ff fb38 	bl	8000f10 <HAL_GetTick>
 80018a0:	4602      	mov	r2, r0
 80018a2:	68bb      	ldr	r3, [r7, #8]
 80018a4:	1ad3      	subs	r3, r2, r3
 80018a6:	2b05      	cmp	r3, #5
 80018a8:	d90c      	bls.n	80018c4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2220      	movs	r2, #32
 80018ae:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2203      	movs	r2, #3
 80018b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2200      	movs	r2, #0
 80018bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80018c0:	2303      	movs	r3, #3
 80018c2:	e015      	b.n	80018f0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f003 0301 	and.w	r3, r3, #1
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d1e4      	bne.n	800189c <HAL_DMA_Abort+0x84>
=======
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	681a      	ldr	r2, [r3, #0]
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f022 0201 	bic.w	r2, r2, #1
 8001884:	601a      	str	r2, [r3, #0]
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80018aa:	e013      	b.n	80018d4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80018ac:	f7ff fb38 	bl	8000f20 <HAL_GetTick>
 80018b0:	4602      	mov	r2, r0
 80018b2:	68bb      	ldr	r3, [r7, #8]
 80018b4:	1ad3      	subs	r3, r2, r3
 80018b6:	2b05      	cmp	r3, #5
 80018b8:	d90c      	bls.n	80018d4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2220      	movs	r2, #32
 80018be:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2203      	movs	r2, #3
 80018c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2200      	movs	r2, #0
 80018cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80018d0:	2303      	movs	r3, #3
 80018d2:	e015      	b.n	8001900 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
<<<<<<< HEAD
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f003 0301 	and.w	r3, r3, #1
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d1e4      	bne.n	80018ac <HAL_DMA_Abort+0x84>
=======
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f003 0301 	and.w	r3, r3, #1
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d1e4      	bne.n	8001888 <HAL_DMA_Abort+0x84>
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
<<<<<<< HEAD
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018e6:	223f      	movs	r2, #63	; 0x3f
 80018e8:	409a      	lsls	r2, r3
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	609a      	str	r2, [r3, #8]
=======
<<<<<<< HEAD
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018d6:	223f      	movs	r2, #63	; 0x3f
 80018d8:	409a      	lsls	r2, r3
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2201      	movs	r2, #1
 80018e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2200      	movs	r2, #0
 80018ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 80018ee:	2300      	movs	r3, #0
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	3710      	adds	r7, #16
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}

080018f8 <HAL_DMA_Abort_IT>:
=======
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018c2:	223f      	movs	r2, #63	; 0x3f
 80018c4:	409a      	lsls	r2, r3
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	609a      	str	r2, [r3, #8]
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2201      	movs	r2, #1
 80018f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2200      	movs	r2, #0
 80018fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 80018fe:	2300      	movs	r3, #0
}
 8001900:	4618      	mov	r0, r3
 8001902:	3710      	adds	r7, #16
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}

<<<<<<< HEAD
08001908 <HAL_DMA_Abort_IT>:
=======
080018e4 <HAL_DMA_Abort_IT>:
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 8001908:	b480      	push	{r7}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
=======
<<<<<<< HEAD
 80018f8:	b480      	push	{r7}
 80018fa:	b083      	sub	sp, #12
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001906:	b2db      	uxtb	r3, r3
 8001908:	2b02      	cmp	r3, #2
 800190a:	d004      	beq.n	8001916 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2280      	movs	r2, #128	; 0x80
 8001910:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	e00c      	b.n	8001930 <HAL_DMA_Abort_IT+0x38>
=======
 80018e4:	b480      	push	{r7}
 80018e6:	b083      	sub	sp, #12
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001916:	b2db      	uxtb	r3, r3
 8001918:	2b02      	cmp	r3, #2
 800191a:	d004      	beq.n	8001926 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2280      	movs	r2, #128	; 0x80
 8001920:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
<<<<<<< HEAD
 8001922:	2301      	movs	r3, #1
 8001924:	e00c      	b.n	8001940 <HAL_DMA_Abort_IT+0x38>
=======
 80018fe:	2301      	movs	r3, #1
 8001900:	e00c      	b.n	800191c <HAL_DMA_Abort_IT+0x38>
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
<<<<<<< HEAD
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2205      	movs	r2, #5
 800192a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
=======
<<<<<<< HEAD
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2205      	movs	r2, #5
 800191a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	681a      	ldr	r2, [r3, #0]
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f022 0201 	bic.w	r2, r2, #1
 800192c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800192e:	2300      	movs	r3, #0
}
 8001930:	4618      	mov	r0, r3
 8001932:	370c      	adds	r7, #12
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr

0800193c <HAL_DMA_IRQHandler>:
=======
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2205      	movs	r2, #5
 8001906:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	681a      	ldr	r2, [r3, #0]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f022 0201 	bic.w	r2, r2, #1
 800193c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800193e:	2300      	movs	r3, #0
}
 8001940:	4618      	mov	r0, r3
 8001942:	370c      	adds	r7, #12
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr

<<<<<<< HEAD
0800194c <HAL_DMA_IRQHandler>:
=======
08001928 <HAL_DMA_IRQHandler>:
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 800194c:	b580      	push	{r7, lr}
 800194e:	b086      	sub	sp, #24
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
=======
<<<<<<< HEAD
 800193c:	b580      	push	{r7, lr}
 800193e:	b086      	sub	sp, #24
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8001944:	2300      	movs	r3, #0
 8001946:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8001948:	4b8e      	ldr	r3, [pc, #568]	; (8001b84 <HAL_DMA_IRQHandler+0x248>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a8e      	ldr	r2, [pc, #568]	; (8001b88 <HAL_DMA_IRQHandler+0x24c>)
 800194e:	fba2 2303 	umull	r2, r3, r2, r3
 8001952:	0a9b      	lsrs	r3, r3, #10
 8001954:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800195a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800195c:	693b      	ldr	r3, [r7, #16]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001966:	2208      	movs	r2, #8
 8001968:	409a      	lsls	r2, r3
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	4013      	ands	r3, r2
 800196e:	2b00      	cmp	r3, #0
 8001970:	d01a      	beq.n	80019a8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f003 0304 	and.w	r3, r3, #4
 800197c:	2b00      	cmp	r3, #0
 800197e:	d013      	beq.n	80019a8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f022 0204 	bic.w	r2, r2, #4
 800198e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001994:	2208      	movs	r2, #8
 8001996:	409a      	lsls	r2, r3
 8001998:	693b      	ldr	r3, [r7, #16]
 800199a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019a0:	f043 0201 	orr.w	r2, r3, #1
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	655a      	str	r2, [r3, #84]	; 0x54
=======
 8001928:	b580      	push	{r7, lr}
 800192a:	b086      	sub	sp, #24
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8001954:	2300      	movs	r3, #0
 8001956:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8001958:	4b8e      	ldr	r3, [pc, #568]	; (8001b94 <HAL_DMA_IRQHandler+0x248>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a8e      	ldr	r2, [pc, #568]	; (8001b98 <HAL_DMA_IRQHandler+0x24c>)
 800195e:	fba2 2303 	umull	r2, r3, r2, r3
 8001962:	0a9b      	lsrs	r3, r3, #10
 8001964:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800196a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800196c:	693b      	ldr	r3, [r7, #16]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001976:	2208      	movs	r2, #8
 8001978:	409a      	lsls	r2, r3
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	4013      	ands	r3, r2
 800197e:	2b00      	cmp	r3, #0
 8001980:	d01a      	beq.n	80019b8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f003 0304 	and.w	r3, r3, #4
 800198c:	2b00      	cmp	r3, #0
 800198e:	d013      	beq.n	80019b8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	681a      	ldr	r2, [r3, #0]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f022 0204 	bic.w	r2, r2, #4
 800199e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019a4:	2208      	movs	r2, #8
 80019a6:	409a      	lsls	r2, r3
 80019a8:	693b      	ldr	r3, [r7, #16]
 80019aa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
<<<<<<< HEAD
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019b0:	f043 0201 	orr.w	r2, r3, #1
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	655a      	str	r2, [r3, #84]	; 0x54
=======
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800198c:	f043 0201 	orr.w	r2, r3, #1
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	655a      	str	r2, [r3, #84]	; 0x54
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
<<<<<<< HEAD
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019bc:	2201      	movs	r2, #1
 80019be:	409a      	lsls	r2, r3
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	4013      	ands	r3, r2
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d012      	beq.n	80019ee <HAL_DMA_IRQHandler+0xa2>
=======
<<<<<<< HEAD
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019ac:	2201      	movs	r2, #1
 80019ae:	409a      	lsls	r2, r3
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	4013      	ands	r3, r2
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d012      	beq.n	80019de <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	695b      	ldr	r3, [r3, #20]
 80019be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d00b      	beq.n	80019de <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019ca:	2201      	movs	r2, #1
 80019cc:	409a      	lsls	r2, r3
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019d6:	f043 0202 	orr.w	r2, r3, #2
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	655a      	str	r2, [r3, #84]	; 0x54
=======
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001998:	2201      	movs	r2, #1
 800199a:	409a      	lsls	r2, r3
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	4013      	ands	r3, r2
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d012      	beq.n	80019ca <HAL_DMA_IRQHandler+0xa2>
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	695b      	ldr	r3, [r3, #20]
 80019ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d00b      	beq.n	80019ee <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019da:	2201      	movs	r2, #1
 80019dc:	409a      	lsls	r2, r3
 80019de:	693b      	ldr	r3, [r7, #16]
 80019e0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
<<<<<<< HEAD
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019e6:	f043 0202 	orr.w	r2, r3, #2
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	655a      	str	r2, [r3, #84]	; 0x54
=======
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019c2:	f043 0202 	orr.w	r2, r3, #2
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	655a      	str	r2, [r3, #84]	; 0x54
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
<<<<<<< HEAD
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019f2:	2204      	movs	r2, #4
 80019f4:	409a      	lsls	r2, r3
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	4013      	ands	r3, r2
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d012      	beq.n	8001a24 <HAL_DMA_IRQHandler+0xd8>
=======
<<<<<<< HEAD
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019e2:	2204      	movs	r2, #4
 80019e4:	409a      	lsls	r2, r3
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	4013      	ands	r3, r2
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d012      	beq.n	8001a14 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f003 0302 	and.w	r3, r3, #2
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d00b      	beq.n	8001a14 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a00:	2204      	movs	r2, #4
 8001a02:	409a      	lsls	r2, r3
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a0c:	f043 0204 	orr.w	r2, r3, #4
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	655a      	str	r2, [r3, #84]	; 0x54
=======
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019ce:	2204      	movs	r2, #4
 80019d0:	409a      	lsls	r2, r3
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	4013      	ands	r3, r2
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d012      	beq.n	8001a00 <HAL_DMA_IRQHandler+0xd8>
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f003 0302 	and.w	r3, r3, #2
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d00b      	beq.n	8001a24 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a10:	2204      	movs	r2, #4
 8001a12:	409a      	lsls	r2, r3
 8001a14:	693b      	ldr	r3, [r7, #16]
 8001a16:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
<<<<<<< HEAD
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a1c:	f043 0204 	orr.w	r2, r3, #4
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	655a      	str	r2, [r3, #84]	; 0x54
=======
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019f8:	f043 0204 	orr.w	r2, r3, #4
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	655a      	str	r2, [r3, #84]	; 0x54
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
<<<<<<< HEAD
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a28:	2210      	movs	r2, #16
 8001a2a:	409a      	lsls	r2, r3
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	4013      	ands	r3, r2
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d043      	beq.n	8001abc <HAL_DMA_IRQHandler+0x170>
=======
<<<<<<< HEAD
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a18:	2210      	movs	r2, #16
 8001a1a:	409a      	lsls	r2, r3
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	4013      	ands	r3, r2
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d043      	beq.n	8001aac <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f003 0308 	and.w	r3, r3, #8
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d03c      	beq.n	8001aac <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a36:	2210      	movs	r2, #16
 8001a38:	409a      	lsls	r2, r3
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d018      	beq.n	8001a7e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d108      	bne.n	8001a6c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d024      	beq.n	8001aac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a66:	6878      	ldr	r0, [r7, #4]
 8001a68:	4798      	blx	r3
 8001a6a:	e01f      	b.n	8001aac <HAL_DMA_IRQHandler+0x170>
=======
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a04:	2210      	movs	r2, #16
 8001a06:	409a      	lsls	r2, r3
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d043      	beq.n	8001a98 <HAL_DMA_IRQHandler+0x170>
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f003 0308 	and.w	r3, r3, #8
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d03c      	beq.n	8001abc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a46:	2210      	movs	r2, #16
 8001a48:	409a      	lsls	r2, r3
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d018      	beq.n	8001a8e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d108      	bne.n	8001a7c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d024      	beq.n	8001abc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
<<<<<<< HEAD
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a76:	6878      	ldr	r0, [r7, #4]
 8001a78:	4798      	blx	r3
 8001a7a:	e01f      	b.n	8001abc <HAL_DMA_IRQHandler+0x170>
=======
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a52:	6878      	ldr	r0, [r7, #4]
 8001a54:	4798      	blx	r3
 8001a56:	e01f      	b.n	8001a98 <HAL_DMA_IRQHandler+0x170>
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
<<<<<<< HEAD
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d01b      	beq.n	8001abc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a88:	6878      	ldr	r0, [r7, #4]
 8001a8a:	4798      	blx	r3
 8001a8c:	e016      	b.n	8001abc <HAL_DMA_IRQHandler+0x170>
=======
<<<<<<< HEAD
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d01b      	beq.n	8001aac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a78:	6878      	ldr	r0, [r7, #4]
 8001a7a:	4798      	blx	r3
 8001a7c:	e016      	b.n	8001aac <HAL_DMA_IRQHandler+0x170>
=======
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d01b      	beq.n	8001a98 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a64:	6878      	ldr	r0, [r7, #4]
 8001a66:	4798      	blx	r3
 8001a68:	e016      	b.n	8001a98 <HAL_DMA_IRQHandler+0x170>
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
<<<<<<< HEAD
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d107      	bne.n	8001aac <HAL_DMA_IRQHandler+0x160>
=======
<<<<<<< HEAD
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d107      	bne.n	8001a9c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	681a      	ldr	r2, [r3, #0]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f022 0208 	bic.w	r2, r2, #8
 8001a9a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d003      	beq.n	8001aac <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa8:	6878      	ldr	r0, [r7, #4]
 8001aaa:	4798      	blx	r3
=======
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d107      	bne.n	8001a88 <HAL_DMA_IRQHandler+0x160>
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	681a      	ldr	r2, [r3, #0]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f022 0208 	bic.w	r2, r2, #8
 8001aaa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d003      	beq.n	8001abc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
<<<<<<< HEAD
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab8:	6878      	ldr	r0, [r7, #4]
 8001aba:	4798      	blx	r3
=======
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a94:	6878      	ldr	r0, [r7, #4]
 8001a96:	4798      	blx	r3
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
<<<<<<< HEAD
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ac0:	2220      	movs	r2, #32
 8001ac2:	409a      	lsls	r2, r3
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	f000 808f 	beq.w	8001bec <HAL_DMA_IRQHandler+0x2a0>
=======
<<<<<<< HEAD
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ab0:	2220      	movs	r2, #32
 8001ab2:	409a      	lsls	r2, r3
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	f000 808f 	beq.w	8001bdc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f003 0310 	and.w	r3, r3, #16
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	f000 8087 	beq.w	8001bdc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ad2:	2220      	movs	r2, #32
 8001ad4:	409a      	lsls	r2, r3
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ae0:	b2db      	uxtb	r3, r3
 8001ae2:	2b05      	cmp	r3, #5
 8001ae4:	d136      	bne.n	8001b54 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f022 0216 	bic.w	r2, r2, #22
 8001af4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	695a      	ldr	r2, [r3, #20]
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b04:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d103      	bne.n	8001b16 <HAL_DMA_IRQHandler+0x1da>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d007      	beq.n	8001b26 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	681a      	ldr	r2, [r3, #0]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f022 0208 	bic.w	r2, r2, #8
 8001b24:	601a      	str	r2, [r3, #0]
=======
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a9c:	2220      	movs	r2, #32
 8001a9e:	409a      	lsls	r2, r3
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	f000 808f 	beq.w	8001bc8 <HAL_DMA_IRQHandler+0x2a0>
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f003 0310 	and.w	r3, r3, #16
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	f000 8087 	beq.w	8001bec <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ae2:	2220      	movs	r2, #32
 8001ae4:	409a      	lsls	r2, r3
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001af0:	b2db      	uxtb	r3, r3
 8001af2:	2b05      	cmp	r3, #5
 8001af4:	d136      	bne.n	8001b64 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	681a      	ldr	r2, [r3, #0]
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f022 0216 	bic.w	r2, r2, #22
 8001b04:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	695a      	ldr	r2, [r3, #20]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b14:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d103      	bne.n	8001b26 <HAL_DMA_IRQHandler+0x1da>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d007      	beq.n	8001b36 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
<<<<<<< HEAD
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	681a      	ldr	r2, [r3, #0]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f022 0208 	bic.w	r2, r2, #8
 8001b34:	601a      	str	r2, [r3, #0]
=======
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	681a      	ldr	r2, [r3, #0]
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f022 0208 	bic.w	r2, r2, #8
 8001b10:	601a      	str	r2, [r3, #0]
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
<<<<<<< HEAD
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b3a:	223f      	movs	r2, #63	; 0x3f
 8001b3c:	409a      	lsls	r2, r3
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	609a      	str	r2, [r3, #8]
=======
<<<<<<< HEAD
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b2a:	223f      	movs	r2, #63	; 0x3f
 8001b2c:	409a      	lsls	r2, r3
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2201      	movs	r2, #1
 8001b36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d07e      	beq.n	8001c48 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b4e:	6878      	ldr	r0, [r7, #4]
 8001b50:	4798      	blx	r3
        }
        return;
 8001b52:	e079      	b.n	8001c48 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d01d      	beq.n	8001b9e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d10d      	bne.n	8001b8c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d031      	beq.n	8001bdc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b7c:	6878      	ldr	r0, [r7, #4]
 8001b7e:	4798      	blx	r3
 8001b80:	e02c      	b.n	8001bdc <HAL_DMA_IRQHandler+0x2a0>
 8001b82:	bf00      	nop
 8001b84:	20000008 	.word	0x20000008
 8001b88:	1b4e81b5 	.word	0x1b4e81b5
=======
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b16:	223f      	movs	r2, #63	; 0x3f
 8001b18:	409a      	lsls	r2, r3
 8001b1a:	693b      	ldr	r3, [r7, #16]
 8001b1c:	609a      	str	r2, [r3, #8]
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2201      	movs	r2, #1
 8001b46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d07e      	beq.n	8001c58 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b5e:	6878      	ldr	r0, [r7, #4]
 8001b60:	4798      	blx	r3
        }
        return;
 8001b62:	e079      	b.n	8001c58 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d01d      	beq.n	8001bae <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d10d      	bne.n	8001b9c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d031      	beq.n	8001bec <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
<<<<<<< HEAD
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b8c:	6878      	ldr	r0, [r7, #4]
 8001b8e:	4798      	blx	r3
 8001b90:	e02c      	b.n	8001bec <HAL_DMA_IRQHandler+0x2a0>
 8001b92:	bf00      	nop
 8001b94:	20000008 	.word	0x20000008
 8001b98:	1b4e81b5 	.word	0x1b4e81b5
=======
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b68:	6878      	ldr	r0, [r7, #4]
 8001b6a:	4798      	blx	r3
 8001b6c:	e02c      	b.n	8001bc8 <HAL_DMA_IRQHandler+0x2a0>
 8001b6e:	bf00      	nop
 8001b70:	20000008 	.word	0x20000008
 8001b74:	1b4e81b5 	.word	0x1b4e81b5
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
<<<<<<< HEAD
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d023      	beq.n	8001bec <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ba8:	6878      	ldr	r0, [r7, #4]
 8001baa:	4798      	blx	r3
 8001bac:	e01e      	b.n	8001bec <HAL_DMA_IRQHandler+0x2a0>
=======
<<<<<<< HEAD
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d023      	beq.n	8001bdc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b98:	6878      	ldr	r0, [r7, #4]
 8001b9a:	4798      	blx	r3
 8001b9c:	e01e      	b.n	8001bdc <HAL_DMA_IRQHandler+0x2a0>
=======
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d023      	beq.n	8001bc8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b84:	6878      	ldr	r0, [r7, #4]
 8001b86:	4798      	blx	r3
 8001b88:	e01e      	b.n	8001bc8 <HAL_DMA_IRQHandler+0x2a0>
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
<<<<<<< HEAD
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d10f      	bne.n	8001bdc <HAL_DMA_IRQHandler+0x290>
=======
<<<<<<< HEAD
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d10f      	bne.n	8001bcc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	681a      	ldr	r2, [r3, #0]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f022 0210 	bic.w	r2, r2, #16
 8001bba:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
=======
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d10f      	bne.n	8001bb8 <HAL_DMA_IRQHandler+0x290>
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f022 0210 	bic.w	r2, r2, #16
 8001bca:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2201      	movs	r2, #1
 8001bd0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
<<<<<<< HEAD
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
=======
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637

        }

        if(hdma->XferCpltCallback != NULL)
<<<<<<< HEAD
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d003      	beq.n	8001bec <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001be8:	6878      	ldr	r0, [r7, #4]
 8001bea:	4798      	blx	r3
=======
<<<<<<< HEAD
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d003      	beq.n	8001bdc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bd8:	6878      	ldr	r0, [r7, #4]
 8001bda:	4798      	blx	r3
=======
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d003      	beq.n	8001bc8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bc4:	6878      	ldr	r0, [r7, #4]
 8001bc6:	4798      	blx	r3
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
<<<<<<< HEAD
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d032      	beq.n	8001c5a <HAL_DMA_IRQHandler+0x30e>
=======
<<<<<<< HEAD
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d032      	beq.n	8001c4a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001be8:	f003 0301 	and.w	r3, r3, #1
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d022      	beq.n	8001c36 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2205      	movs	r2, #5
 8001bf4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	681a      	ldr	r2, [r3, #0]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f022 0201 	bic.w	r2, r2, #1
 8001c06:	601a      	str	r2, [r3, #0]
=======
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d032      	beq.n	8001c36 <HAL_DMA_IRQHandler+0x30e>
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bf8:	f003 0301 	and.w	r3, r3, #1
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d022      	beq.n	8001c46 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2205      	movs	r2, #5
 8001c04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
<<<<<<< HEAD
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	681a      	ldr	r2, [r3, #0]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f022 0201 	bic.w	r2, r2, #1
 8001c16:	601a      	str	r2, [r3, #0]
=======
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	681a      	ldr	r2, [r3, #0]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f022 0201 	bic.w	r2, r2, #1
 8001bf2:	601a      	str	r2, [r3, #0]
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637

      do
      {
        if (++count > timeout)
<<<<<<< HEAD
 8001c18:	68bb      	ldr	r3, [r7, #8]
 8001c1a:	3301      	adds	r3, #1
 8001c1c:	60bb      	str	r3, [r7, #8]
 8001c1e:	697a      	ldr	r2, [r7, #20]
 8001c20:	429a      	cmp	r2, r3
 8001c22:	d307      	bcc.n	8001c34 <HAL_DMA_IRQHandler+0x2e8>
=======
<<<<<<< HEAD
 8001c08:	68bb      	ldr	r3, [r7, #8]
 8001c0a:	3301      	adds	r3, #1
 8001c0c:	60bb      	str	r3, [r7, #8]
 8001c0e:	697a      	ldr	r2, [r7, #20]
 8001c10:	429a      	cmp	r2, r3
 8001c12:	d307      	bcc.n	8001c24 <HAL_DMA_IRQHandler+0x2e8>
=======
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	3301      	adds	r3, #1
 8001bf8:	60bb      	str	r3, [r7, #8]
 8001bfa:	697a      	ldr	r2, [r7, #20]
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	d307      	bcc.n	8001c10 <HAL_DMA_IRQHandler+0x2e8>
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
<<<<<<< HEAD
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f003 0301 	and.w	r3, r3, #1
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d1f2      	bne.n	8001c18 <HAL_DMA_IRQHandler+0x2cc>
 8001c32:	e000      	b.n	8001c36 <HAL_DMA_IRQHandler+0x2ea>
=======
<<<<<<< HEAD
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f003 0301 	and.w	r3, r3, #1
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d1f2      	bne.n	8001c08 <HAL_DMA_IRQHandler+0x2cc>
 8001c22:	e000      	b.n	8001c26 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001c24:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2201      	movs	r2, #1
 8001c2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2200      	movs	r2, #0
 8001c32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
=======
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f003 0301 	and.w	r3, r3, #1
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d1f2      	bne.n	8001bf4 <HAL_DMA_IRQHandler+0x2cc>
 8001c0e:	e000      	b.n	8001c12 <HAL_DMA_IRQHandler+0x2ea>
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
          break;
 8001c34:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2201      	movs	r2, #1
 8001c3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
<<<<<<< HEAD
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2200      	movs	r2, #0
 8001c42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
=======
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637

    }

    if(hdma->XferErrorCallback != NULL)
<<<<<<< HEAD
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d005      	beq.n	8001c5a <HAL_DMA_IRQHandler+0x30e>
=======
<<<<<<< HEAD
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d005      	beq.n	8001c4a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c42:	6878      	ldr	r0, [r7, #4]
 8001c44:	4798      	blx	r3
 8001c46:	e000      	b.n	8001c4a <HAL_DMA_IRQHandler+0x30e>
        return;
 8001c48:	bf00      	nop
    }
  }
}
 8001c4a:	3718      	adds	r7, #24
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}

08001c50 <DMA_CalcBaseAndBitshift>:
=======
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d005      	beq.n	8001c36 <HAL_DMA_IRQHandler+0x30e>
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	4798      	blx	r3
 8001c56:	e000      	b.n	8001c5a <HAL_DMA_IRQHandler+0x30e>
        return;
 8001c58:	bf00      	nop
    }
  }
}
 8001c5a:	3718      	adds	r7, #24
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}

<<<<<<< HEAD
08001c60 <DMA_CalcBaseAndBitshift>:
=======
08001c3c <DMA_CalcBaseAndBitshift>:
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 8001c60:	b480      	push	{r7}
 8001c62:	b085      	sub	sp, #20
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	3b10      	subs	r3, #16
 8001c70:	4a13      	ldr	r2, [pc, #76]	; (8001cc0 <DMA_CalcBaseAndBitshift+0x60>)
 8001c72:	fba2 2303 	umull	r2, r3, r2, r3
 8001c76:	091b      	lsrs	r3, r3, #4
 8001c78:	60fb      	str	r3, [r7, #12]
=======
<<<<<<< HEAD
 8001c50:	b480      	push	{r7}
 8001c52:	b085      	sub	sp, #20
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	b2db      	uxtb	r3, r3
 8001c5e:	3b10      	subs	r3, #16
 8001c60:	4a13      	ldr	r2, [pc, #76]	; (8001cb0 <DMA_CalcBaseAndBitshift+0x60>)
 8001c62:	fba2 2303 	umull	r2, r3, r2, r3
 8001c66:	091b      	lsrs	r3, r3, #4
 8001c68:	60fb      	str	r3, [r7, #12]
=======
 8001c3c:	b480      	push	{r7}
 8001c3e:	b085      	sub	sp, #20
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	b2db      	uxtb	r3, r3
 8001c4a:	3b10      	subs	r3, #16
 8001c4c:	4a13      	ldr	r2, [pc, #76]	; (8001c9c <DMA_CalcBaseAndBitshift+0x60>)
 8001c4e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c52:	091b      	lsrs	r3, r3, #4
 8001c54:	60fb      	str	r3, [r7, #12]
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
<<<<<<< HEAD
 8001c7a:	4a12      	ldr	r2, [pc, #72]	; (8001cc4 <DMA_CalcBaseAndBitshift+0x64>)
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	4413      	add	r3, r2
 8001c80:	781b      	ldrb	r3, [r3, #0]
 8001c82:	461a      	mov	r2, r3
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	65da      	str	r2, [r3, #92]	; 0x5c
=======
<<<<<<< HEAD
 8001c6a:	4a12      	ldr	r2, [pc, #72]	; (8001cb4 <DMA_CalcBaseAndBitshift+0x64>)
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	4413      	add	r3, r2
 8001c70:	781b      	ldrb	r3, [r3, #0]
 8001c72:	461a      	mov	r2, r3
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	2b03      	cmp	r3, #3
 8001c7c:	d908      	bls.n	8001c90 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	461a      	mov	r2, r3
 8001c84:	4b0c      	ldr	r3, [pc, #48]	; (8001cb8 <DMA_CalcBaseAndBitshift+0x68>)
 8001c86:	4013      	ands	r3, r2
 8001c88:	1d1a      	adds	r2, r3, #4
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	659a      	str	r2, [r3, #88]	; 0x58
 8001c8e:	e006      	b.n	8001c9e <DMA_CalcBaseAndBitshift+0x4e>
=======
 8001c56:	4a12      	ldr	r2, [pc, #72]	; (8001ca0 <DMA_CalcBaseAndBitshift+0x64>)
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	4413      	add	r3, r2
 8001c5c:	781b      	ldrb	r3, [r3, #0]
 8001c5e:	461a      	mov	r2, r3
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	65da      	str	r2, [r3, #92]	; 0x5c
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  
  if (stream_number > 3U)
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	2b03      	cmp	r3, #3
 8001c8c:	d908      	bls.n	8001ca0 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
<<<<<<< HEAD
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	461a      	mov	r2, r3
 8001c94:	4b0c      	ldr	r3, [pc, #48]	; (8001cc8 <DMA_CalcBaseAndBitshift+0x68>)
 8001c96:	4013      	ands	r3, r2
 8001c98:	1d1a      	adds	r2, r3, #4
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	659a      	str	r2, [r3, #88]	; 0x58
 8001c9e:	e006      	b.n	8001cae <DMA_CalcBaseAndBitshift+0x4e>
=======
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	461a      	mov	r2, r3
 8001c70:	4b0c      	ldr	r3, [pc, #48]	; (8001ca4 <DMA_CalcBaseAndBitshift+0x68>)
 8001c72:	4013      	ands	r3, r2
 8001c74:	1d1a      	adds	r2, r3, #4
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	659a      	str	r2, [r3, #88]	; 0x58
 8001c7a:	e006      	b.n	8001c8a <DMA_CalcBaseAndBitshift+0x4e>
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
<<<<<<< HEAD
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	461a      	mov	r2, r3
 8001ca6:	4b08      	ldr	r3, [pc, #32]	; (8001cc8 <DMA_CalcBaseAndBitshift+0x68>)
 8001ca8:	4013      	ands	r3, r2
 8001caa:	687a      	ldr	r2, [r7, #4]
 8001cac:	6593      	str	r3, [r2, #88]	; 0x58
=======
<<<<<<< HEAD
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	461a      	mov	r2, r3
 8001c96:	4b08      	ldr	r3, [pc, #32]	; (8001cb8 <DMA_CalcBaseAndBitshift+0x68>)
 8001c98:	4013      	ands	r3, r2
 8001c9a:	687a      	ldr	r2, [r7, #4]
 8001c9c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3714      	adds	r7, #20
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr
 8001cae:	bf00      	nop
 8001cb0:	aaaaaaab 	.word	0xaaaaaaab
 8001cb4:	08005024 	.word	0x08005024
 8001cb8:	fffffc00 	.word	0xfffffc00

08001cbc <DMA_CheckFifoParam>:
=======
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	461a      	mov	r2, r3
 8001c82:	4b08      	ldr	r3, [pc, #32]	; (8001ca4 <DMA_CalcBaseAndBitshift+0x68>)
 8001c84:	4013      	ands	r3, r2
 8001c86:	687a      	ldr	r2, [r7, #4]
 8001c88:	6593      	str	r3, [r2, #88]	; 0x58
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  }
  
  return hdma->StreamBaseAddress;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	3714      	adds	r7, #20
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr
 8001cbe:	bf00      	nop
 8001cc0:	aaaaaaab 	.word	0xaaaaaaab
 8001cc4:	08005034 	.word	0x08005034
 8001cc8:	fffffc00 	.word	0xfffffc00

<<<<<<< HEAD
08001ccc <DMA_CheckFifoParam>:
=======
08001ca8 <DMA_CheckFifoParam>:
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 8001ccc:	b480      	push	{r7}
 8001cce:	b085      	sub	sp, #20
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
=======
<<<<<<< HEAD
 8001cbc:	b480      	push	{r7}
 8001cbe:	b085      	sub	sp, #20
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ccc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	699b      	ldr	r3, [r3, #24]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d11f      	bne.n	8001d16 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001cd6:	68bb      	ldr	r3, [r7, #8]
 8001cd8:	2b03      	cmp	r3, #3
 8001cda:	d856      	bhi.n	8001d8a <DMA_CheckFifoParam+0xce>
 8001cdc:	a201      	add	r2, pc, #4	; (adr r2, 8001ce4 <DMA_CheckFifoParam+0x28>)
 8001cde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ce2:	bf00      	nop
 8001ce4:	08001cf5 	.word	0x08001cf5
 8001ce8:	08001d07 	.word	0x08001d07
 8001cec:	08001cf5 	.word	0x08001cf5
 8001cf0:	08001d8b 	.word	0x08001d8b
=======
 8001ca8:	b480      	push	{r7}
 8001caa:	b085      	sub	sp, #20
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  HAL_StatusTypeDef status = HAL_OK;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cdc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	699b      	ldr	r3, [r3, #24]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d11f      	bne.n	8001d26 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
<<<<<<< HEAD
 8001ce6:	68bb      	ldr	r3, [r7, #8]
 8001ce8:	2b03      	cmp	r3, #3
 8001cea:	d856      	bhi.n	8001d9a <DMA_CheckFifoParam+0xce>
 8001cec:	a201      	add	r2, pc, #4	; (adr r2, 8001cf4 <DMA_CheckFifoParam+0x28>)
 8001cee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cf2:	bf00      	nop
 8001cf4:	08001d05 	.word	0x08001d05
 8001cf8:	08001d17 	.word	0x08001d17
 8001cfc:	08001d05 	.word	0x08001d05
 8001d00:	08001d9b 	.word	0x08001d9b
=======
 8001cc2:	68bb      	ldr	r3, [r7, #8]
 8001cc4:	2b03      	cmp	r3, #3
 8001cc6:	d856      	bhi.n	8001d76 <DMA_CheckFifoParam+0xce>
 8001cc8:	a201      	add	r2, pc, #4	; (adr r2, 8001cd0 <DMA_CheckFifoParam+0x28>)
 8001cca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cce:	bf00      	nop
 8001cd0:	08001ce1 	.word	0x08001ce1
 8001cd4:	08001cf3 	.word	0x08001cf3
 8001cd8:	08001ce1 	.word	0x08001ce1
 8001cdc:	08001d77 	.word	0x08001d77
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
<<<<<<< HEAD
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d08:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d046      	beq.n	8001d9e <DMA_CheckFifoParam+0xd2>
=======
<<<<<<< HEAD
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cf8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d046      	beq.n	8001d8e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001d00:	2301      	movs	r3, #1
 8001d02:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d04:	e043      	b.n	8001d8e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d0a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001d0e:	d140      	bne.n	8001d92 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001d10:	2301      	movs	r3, #1
 8001d12:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d14:	e03d      	b.n	8001d92 <DMA_CheckFifoParam+0xd6>
=======
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ce4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d046      	beq.n	8001d7a <DMA_CheckFifoParam+0xd2>
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
      {
        status = HAL_ERROR;
 8001d10:	2301      	movs	r3, #1
 8001d12:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d14:	e043      	b.n	8001d9e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d1a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001d1e:	d140      	bne.n	8001da2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001d20:	2301      	movs	r3, #1
 8001d22:	73fb      	strb	r3, [r7, #15]
      }
      break;
<<<<<<< HEAD
 8001d24:	e03d      	b.n	8001da2 <DMA_CheckFifoParam+0xd6>
=======
 8001d00:	e03d      	b.n	8001d7e <DMA_CheckFifoParam+0xd6>
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
<<<<<<< HEAD
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	699b      	ldr	r3, [r3, #24]
 8001d2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d2e:	d121      	bne.n	8001d74 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	2b03      	cmp	r3, #3
 8001d34:	d837      	bhi.n	8001da6 <DMA_CheckFifoParam+0xda>
 8001d36:	a201      	add	r2, pc, #4	; (adr r2, 8001d3c <DMA_CheckFifoParam+0x70>)
 8001d38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d3c:	08001d4d 	.word	0x08001d4d
 8001d40:	08001d53 	.word	0x08001d53
 8001d44:	08001d4d 	.word	0x08001d4d
 8001d48:	08001d65 	.word	0x08001d65
=======
<<<<<<< HEAD
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	699b      	ldr	r3, [r3, #24]
 8001d1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d1e:	d121      	bne.n	8001d64 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	2b03      	cmp	r3, #3
 8001d24:	d837      	bhi.n	8001d96 <DMA_CheckFifoParam+0xda>
 8001d26:	a201      	add	r2, pc, #4	; (adr r2, 8001d2c <DMA_CheckFifoParam+0x70>)
 8001d28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d2c:	08001d3d 	.word	0x08001d3d
 8001d30:	08001d43 	.word	0x08001d43
 8001d34:	08001d3d 	.word	0x08001d3d
 8001d38:	08001d55 	.word	0x08001d55
=======
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	699b      	ldr	r3, [r3, #24]
 8001d06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d0a:	d121      	bne.n	8001d50 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	2b03      	cmp	r3, #3
 8001d10:	d837      	bhi.n	8001d82 <DMA_CheckFifoParam+0xda>
 8001d12:	a201      	add	r2, pc, #4	; (adr r2, 8001d18 <DMA_CheckFifoParam+0x70>)
 8001d14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d18:	08001d29 	.word	0x08001d29
 8001d1c:	08001d2f 	.word	0x08001d2f
 8001d20:	08001d29 	.word	0x08001d29
 8001d24:	08001d41 	.word	0x08001d41
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
<<<<<<< HEAD
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	73fb      	strb	r3, [r7, #15]
=======
<<<<<<< HEAD
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	73fb      	strb	r3, [r7, #15]
      break;
 8001d40:	e030      	b.n	8001da4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d46:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d025      	beq.n	8001d9a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d52:	e022      	b.n	8001d9a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d58:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001d5c:	d11f      	bne.n	8001d9e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001d62:	e01c      	b.n	8001d9e <DMA_CheckFifoParam+0xe2>
=======
 8001d28:	2301      	movs	r3, #1
 8001d2a:	73fb      	strb	r3, [r7, #15]
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
      break;
 8001d50:	e030      	b.n	8001db4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d56:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d025      	beq.n	8001daa <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d62:	e022      	b.n	8001daa <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d68:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001d6c:	d11f      	bne.n	8001dae <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	73fb      	strb	r3, [r7, #15]
      }
      break;   
<<<<<<< HEAD
 8001d72:	e01c      	b.n	8001dae <DMA_CheckFifoParam+0xe2>
=======
 8001d4e:	e01c      	b.n	8001d8a <DMA_CheckFifoParam+0xe2>
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
<<<<<<< HEAD
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	2b02      	cmp	r3, #2
 8001d78:	d903      	bls.n	8001d82 <DMA_CheckFifoParam+0xb6>
 8001d7a:	68bb      	ldr	r3, [r7, #8]
 8001d7c:	2b03      	cmp	r3, #3
 8001d7e:	d003      	beq.n	8001d88 <DMA_CheckFifoParam+0xbc>
=======
<<<<<<< HEAD
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	2b02      	cmp	r3, #2
 8001d68:	d903      	bls.n	8001d72 <DMA_CheckFifoParam+0xb6>
 8001d6a:	68bb      	ldr	r3, [r7, #8]
 8001d6c:	2b03      	cmp	r3, #3
 8001d6e:	d003      	beq.n	8001d78 <DMA_CheckFifoParam+0xbc>
=======
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	2b02      	cmp	r3, #2
 8001d54:	d903      	bls.n	8001d5e <DMA_CheckFifoParam+0xb6>
 8001d56:	68bb      	ldr	r3, [r7, #8]
 8001d58:	2b03      	cmp	r3, #3
 8001d5a:	d003      	beq.n	8001d64 <DMA_CheckFifoParam+0xbc>
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
<<<<<<< HEAD
 8001d80:	e018      	b.n	8001db4 <DMA_CheckFifoParam+0xe8>
=======
<<<<<<< HEAD
 8001d70:	e018      	b.n	8001da4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	73fb      	strb	r3, [r7, #15]
      break;
 8001d76:	e015      	b.n	8001da4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d7c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d00e      	beq.n	8001da2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001d84:	2301      	movs	r3, #1
 8001d86:	73fb      	strb	r3, [r7, #15]
      break;
 8001d88:	e00b      	b.n	8001da2 <DMA_CheckFifoParam+0xe6>
      break;
 8001d8a:	bf00      	nop
 8001d8c:	e00a      	b.n	8001da4 <DMA_CheckFifoParam+0xe8>
      break;
 8001d8e:	bf00      	nop
 8001d90:	e008      	b.n	8001da4 <DMA_CheckFifoParam+0xe8>
      break;
 8001d92:	bf00      	nop
 8001d94:	e006      	b.n	8001da4 <DMA_CheckFifoParam+0xe8>
      break;
 8001d96:	bf00      	nop
 8001d98:	e004      	b.n	8001da4 <DMA_CheckFifoParam+0xe8>
      break;
 8001d9a:	bf00      	nop
 8001d9c:	e002      	b.n	8001da4 <DMA_CheckFifoParam+0xe8>
      break;   
 8001d9e:	bf00      	nop
 8001da0:	e000      	b.n	8001da4 <DMA_CheckFifoParam+0xe8>
      break;
 8001da2:	bf00      	nop
=======
 8001d5c:	e018      	b.n	8001d90 <DMA_CheckFifoParam+0xe8>
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
      status = HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	73fb      	strb	r3, [r7, #15]
      break;
 8001d86:	e015      	b.n	8001db4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d8c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d00e      	beq.n	8001db2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001d94:	2301      	movs	r3, #1
 8001d96:	73fb      	strb	r3, [r7, #15]
      break;
 8001d98:	e00b      	b.n	8001db2 <DMA_CheckFifoParam+0xe6>
      break;
 8001d9a:	bf00      	nop
 8001d9c:	e00a      	b.n	8001db4 <DMA_CheckFifoParam+0xe8>
      break;
 8001d9e:	bf00      	nop
 8001da0:	e008      	b.n	8001db4 <DMA_CheckFifoParam+0xe8>
      break;
 8001da2:	bf00      	nop
 8001da4:	e006      	b.n	8001db4 <DMA_CheckFifoParam+0xe8>
      break;
 8001da6:	bf00      	nop
 8001da8:	e004      	b.n	8001db4 <DMA_CheckFifoParam+0xe8>
      break;
 8001daa:	bf00      	nop
 8001dac:	e002      	b.n	8001db4 <DMA_CheckFifoParam+0xe8>
      break;   
 8001dae:	bf00      	nop
 8001db0:	e000      	b.n	8001db4 <DMA_CheckFifoParam+0xe8>
      break;
<<<<<<< HEAD
 8001db2:	bf00      	nop
=======
 8001d8e:	bf00      	nop
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
    }
  } 
  
  return status; 
<<<<<<< HEAD
 8001db4:	7bfb      	ldrb	r3, [r7, #15]
=======
<<<<<<< HEAD
 8001da4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3714      	adds	r7, #20
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr
 8001db2:	bf00      	nop

08001db4 <HAL_GPIO_Init>:
=======
 8001d90:	7bfb      	ldrb	r3, [r7, #15]
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	3714      	adds	r7, #20
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr
 8001dc2:	bf00      	nop

<<<<<<< HEAD
08001dc4 <HAL_GPIO_Init>:
=======
08001da0 <HAL_GPIO_Init>:
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
<<<<<<< HEAD
 8001dc4:	b480      	push	{r7}
 8001dc6:	b089      	sub	sp, #36	; 0x24
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
 8001dcc:	6039      	str	r1, [r7, #0]
=======
<<<<<<< HEAD
 8001db4:	b480      	push	{r7}
 8001db6:	b089      	sub	sp, #36	; 0x24
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
 8001dbc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	61bb      	str	r3, [r7, #24]
=======
 8001da0:	b480      	push	{r7}
 8001da2:	b089      	sub	sp, #36	; 0x24
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
 8001da8:	6039      	str	r1, [r7, #0]
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  uint32_t position = 0x00;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
<<<<<<< HEAD
 8001dda:	2300      	movs	r3, #0
 8001ddc:	61bb      	str	r3, [r7, #24]
=======
 8001db6:	2300      	movs	r3, #0
 8001db8:	61bb      	str	r3, [r7, #24]
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
<<<<<<< HEAD
 8001dde:	2300      	movs	r3, #0
 8001de0:	61fb      	str	r3, [r7, #28]
 8001de2:	e175      	b.n	80020d0 <HAL_GPIO_Init+0x30c>
=======
<<<<<<< HEAD
 8001dce:	2300      	movs	r3, #0
 8001dd0:	61fb      	str	r3, [r7, #28]
 8001dd2:	e175      	b.n	80020c0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	69fb      	ldr	r3, [r7, #28]
 8001dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ddc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	697a      	ldr	r2, [r7, #20]
 8001de4:	4013      	ands	r3, r2
 8001de6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001de8:	693a      	ldr	r2, [r7, #16]
 8001dea:	697b      	ldr	r3, [r7, #20]
 8001dec:	429a      	cmp	r2, r3
 8001dee:	f040 8164 	bne.w	80020ba <HAL_GPIO_Init+0x306>
=======
 8001dba:	2300      	movs	r3, #0
 8001dbc:	61fb      	str	r3, [r7, #28]
 8001dbe:	e175      	b.n	80020ac <HAL_GPIO_Init+0x30c>
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001de4:	2201      	movs	r2, #1
 8001de6:	69fb      	ldr	r3, [r7, #28]
 8001de8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	697a      	ldr	r2, [r7, #20]
 8001df4:	4013      	ands	r3, r2
 8001df6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
<<<<<<< HEAD
 8001df8:	693a      	ldr	r2, [r7, #16]
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	f040 8164 	bne.w	80020ca <HAL_GPIO_Init+0x306>
=======
 8001dd4:	693a      	ldr	r2, [r7, #16]
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	f040 8164 	bne.w	80020a6 <HAL_GPIO_Init+0x306>
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
<<<<<<< HEAD
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	f003 0303 	and.w	r3, r3, #3
 8001e0a:	2b01      	cmp	r3, #1
 8001e0c:	d005      	beq.n	8001e1a <HAL_GPIO_Init+0x56>
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	f003 0303 	and.w	r3, r3, #3
 8001e16:	2b02      	cmp	r3, #2
 8001e18:	d130      	bne.n	8001e7c <HAL_GPIO_Init+0xb8>
=======
<<<<<<< HEAD
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	f003 0303 	and.w	r3, r3, #3
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	d005      	beq.n	8001e0a <HAL_GPIO_Init+0x56>
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	f003 0303 	and.w	r3, r3, #3
 8001e06:	2b02      	cmp	r3, #2
 8001e08:	d130      	bne.n	8001e6c <HAL_GPIO_Init+0xb8>
=======
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	f003 0303 	and.w	r3, r3, #3
 8001de6:	2b01      	cmp	r3, #1
 8001de8:	d005      	beq.n	8001df6 <HAL_GPIO_Init+0x56>
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	f003 0303 	and.w	r3, r3, #3
 8001df2:	2b02      	cmp	r3, #2
 8001df4:	d130      	bne.n	8001e58 <HAL_GPIO_Init+0xb8>
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
<<<<<<< HEAD
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	689b      	ldr	r3, [r3, #8]
=======
<<<<<<< HEAD
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	689b      	ldr	r3, [r3, #8]
 8001e0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001e10:	69fb      	ldr	r3, [r7, #28]
 8001e12:	005b      	lsls	r3, r3, #1
 8001e14:	2203      	movs	r2, #3
 8001e16:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1a:	43db      	mvns	r3, r3
 8001e1c:	69ba      	ldr	r2, [r7, #24]
 8001e1e:	4013      	ands	r3, r2
 8001e20:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	68da      	ldr	r2, [r3, #12]
 8001e26:	69fb      	ldr	r3, [r7, #28]
 8001e28:	005b      	lsls	r3, r3, #1
 8001e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2e:	69ba      	ldr	r2, [r7, #24]
 8001e30:	4313      	orrs	r3, r2
 8001e32:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	69ba      	ldr	r2, [r7, #24]
 8001e38:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e40:	2201      	movs	r2, #1
 8001e42:	69fb      	ldr	r3, [r7, #28]
 8001e44:	fa02 f303 	lsl.w	r3, r2, r3
 8001e48:	43db      	mvns	r3, r3
 8001e4a:	69ba      	ldr	r2, [r7, #24]
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	091b      	lsrs	r3, r3, #4
 8001e56:	f003 0201 	and.w	r2, r3, #1
 8001e5a:	69fb      	ldr	r3, [r7, #28]
 8001e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e60:	69ba      	ldr	r2, [r7, #24]
 8001e62:	4313      	orrs	r3, r2
 8001e64:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	69ba      	ldr	r2, [r7, #24]
 8001e6a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	f003 0303 	and.w	r3, r3, #3
 8001e74:	2b03      	cmp	r3, #3
 8001e76:	d017      	beq.n	8001ea8 <HAL_GPIO_Init+0xf4>
=======
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	689b      	ldr	r3, [r3, #8]
 8001dfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001dfc:	69fb      	ldr	r3, [r7, #28]
 8001dfe:	005b      	lsls	r3, r3, #1
 8001e00:	2203      	movs	r2, #3
 8001e02:	fa02 f303 	lsl.w	r3, r2, r3
 8001e06:	43db      	mvns	r3, r3
 8001e08:	69ba      	ldr	r2, [r7, #24]
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	68da      	ldr	r2, [r3, #12]
 8001e12:	69fb      	ldr	r3, [r7, #28]
 8001e14:	005b      	lsls	r3, r3, #1
 8001e16:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1a:	69ba      	ldr	r2, [r7, #24]
 8001e1c:	4313      	orrs	r3, r2
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
 8001e1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001e20:	69fb      	ldr	r3, [r7, #28]
 8001e22:	005b      	lsls	r3, r3, #1
 8001e24:	2203      	movs	r2, #3
 8001e26:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2a:	43db      	mvns	r3, r3
 8001e2c:	69ba      	ldr	r2, [r7, #24]
 8001e2e:	4013      	ands	r3, r2
 8001e30:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	68da      	ldr	r2, [r3, #12]
 8001e36:	69fb      	ldr	r3, [r7, #28]
 8001e38:	005b      	lsls	r3, r3, #1
 8001e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3e:	69ba      	ldr	r2, [r7, #24]
 8001e40:	4313      	orrs	r3, r2
 8001e42:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	69ba      	ldr	r2, [r7, #24]
 8001e48:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e50:	2201      	movs	r2, #1
 8001e52:	69fb      	ldr	r3, [r7, #28]
 8001e54:	fa02 f303 	lsl.w	r3, r2, r3
 8001e58:	43db      	mvns	r3, r3
 8001e5a:	69ba      	ldr	r2, [r7, #24]
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	091b      	lsrs	r3, r3, #4
 8001e66:	f003 0201 	and.w	r2, r3, #1
 8001e6a:	69fb      	ldr	r3, [r7, #28]
 8001e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e70:	69ba      	ldr	r2, [r7, #24]
 8001e72:	4313      	orrs	r3, r2
 8001e74:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	69ba      	ldr	r2, [r7, #24]
 8001e7a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
<<<<<<< HEAD
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	f003 0303 	and.w	r3, r3, #3
 8001e84:	2b03      	cmp	r3, #3
 8001e86:	d017      	beq.n	8001eb8 <HAL_GPIO_Init+0xf4>
=======
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	f003 0303 	and.w	r3, r3, #3
 8001e60:	2b03      	cmp	r3, #3
 8001e62:	d017      	beq.n	8001e94 <HAL_GPIO_Init+0xf4>
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
<<<<<<< HEAD
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	68db      	ldr	r3, [r3, #12]
=======
<<<<<<< HEAD
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	68db      	ldr	r3, [r3, #12]
 8001e7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001e7e:	69fb      	ldr	r3, [r7, #28]
 8001e80:	005b      	lsls	r3, r3, #1
 8001e82:	2203      	movs	r2, #3
 8001e84:	fa02 f303 	lsl.w	r3, r2, r3
 8001e88:	43db      	mvns	r3, r3
 8001e8a:	69ba      	ldr	r2, [r7, #24]
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	689a      	ldr	r2, [r3, #8]
 8001e94:	69fb      	ldr	r3, [r7, #28]
 8001e96:	005b      	lsls	r3, r3, #1
 8001e98:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9c:	69ba      	ldr	r2, [r7, #24]
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	69ba      	ldr	r2, [r7, #24]
 8001ea6:	60da      	str	r2, [r3, #12]
=======
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001e6a:	69fb      	ldr	r3, [r7, #28]
 8001e6c:	005b      	lsls	r3, r3, #1
 8001e6e:	2203      	movs	r2, #3
 8001e70:	fa02 f303 	lsl.w	r3, r2, r3
 8001e74:	43db      	mvns	r3, r3
 8001e76:	69ba      	ldr	r2, [r7, #24]
 8001e78:	4013      	ands	r3, r2
 8001e7a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	689a      	ldr	r2, [r3, #8]
 8001e80:	69fb      	ldr	r3, [r7, #28]
 8001e82:	005b      	lsls	r3, r3, #1
 8001e84:	fa02 f303 	lsl.w	r3, r2, r3
 8001e88:	69ba      	ldr	r2, [r7, #24]
 8001e8a:	4313      	orrs	r3, r2
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
 8001e8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001e8e:	69fb      	ldr	r3, [r7, #28]
 8001e90:	005b      	lsls	r3, r3, #1
 8001e92:	2203      	movs	r2, #3
 8001e94:	fa02 f303 	lsl.w	r3, r2, r3
 8001e98:	43db      	mvns	r3, r3
 8001e9a:	69ba      	ldr	r2, [r7, #24]
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	689a      	ldr	r2, [r3, #8]
 8001ea4:	69fb      	ldr	r3, [r7, #28]
 8001ea6:	005b      	lsls	r3, r3, #1
 8001ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eac:	69ba      	ldr	r2, [r7, #24]
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
<<<<<<< HEAD
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	69ba      	ldr	r2, [r7, #24]
 8001eb6:	60da      	str	r2, [r3, #12]
=======
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	69ba      	ldr	r2, [r7, #24]
 8001e92:	60da      	str	r2, [r3, #12]
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
<<<<<<< HEAD
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	f003 0303 	and.w	r3, r3, #3
 8001ec0:	2b02      	cmp	r3, #2
 8001ec2:	d123      	bne.n	8001f0c <HAL_GPIO_Init+0x148>
=======
<<<<<<< HEAD
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	f003 0303 	and.w	r3, r3, #3
 8001eb0:	2b02      	cmp	r3, #2
 8001eb2:	d123      	bne.n	8001efc <HAL_GPIO_Init+0x148>
=======
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	f003 0303 	and.w	r3, r3, #3
 8001e9c:	2b02      	cmp	r3, #2
 8001e9e:	d123      	bne.n	8001ee8 <HAL_GPIO_Init+0x148>
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
<<<<<<< HEAD
 8001ec4:	69fb      	ldr	r3, [r7, #28]
 8001ec6:	08da      	lsrs	r2, r3, #3
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	3208      	adds	r2, #8
 8001ecc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ed0:	61bb      	str	r3, [r7, #24]
=======
<<<<<<< HEAD
 8001eb4:	69fb      	ldr	r3, [r7, #28]
 8001eb6:	08da      	lsrs	r2, r3, #3
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	3208      	adds	r2, #8
 8001ebc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ec0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001ec2:	69fb      	ldr	r3, [r7, #28]
 8001ec4:	f003 0307 	and.w	r3, r3, #7
 8001ec8:	009b      	lsls	r3, r3, #2
 8001eca:	220f      	movs	r2, #15
 8001ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed0:	43db      	mvns	r3, r3
 8001ed2:	69ba      	ldr	r2, [r7, #24]
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	691a      	ldr	r2, [r3, #16]
 8001edc:	69fb      	ldr	r3, [r7, #28]
 8001ede:	f003 0307 	and.w	r3, r3, #7
 8001ee2:	009b      	lsls	r3, r3, #2
 8001ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee8:	69ba      	ldr	r2, [r7, #24]
 8001eea:	4313      	orrs	r3, r2
 8001eec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001eee:	69fb      	ldr	r3, [r7, #28]
 8001ef0:	08da      	lsrs	r2, r3, #3
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	3208      	adds	r2, #8
 8001ef6:	69b9      	ldr	r1, [r7, #24]
 8001ef8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
=======
 8001ea0:	69fb      	ldr	r3, [r7, #28]
 8001ea2:	08da      	lsrs	r2, r3, #3
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	3208      	adds	r2, #8
 8001ea8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001eac:	61bb      	str	r3, [r7, #24]
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001ed2:	69fb      	ldr	r3, [r7, #28]
 8001ed4:	f003 0307 	and.w	r3, r3, #7
 8001ed8:	009b      	lsls	r3, r3, #2
 8001eda:	220f      	movs	r2, #15
 8001edc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee0:	43db      	mvns	r3, r3
 8001ee2:	69ba      	ldr	r2, [r7, #24]
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	691a      	ldr	r2, [r3, #16]
 8001eec:	69fb      	ldr	r3, [r7, #28]
 8001eee:	f003 0307 	and.w	r3, r3, #7
 8001ef2:	009b      	lsls	r3, r3, #2
 8001ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef8:	69ba      	ldr	r2, [r7, #24]
 8001efa:	4313      	orrs	r3, r2
 8001efc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
<<<<<<< HEAD
 8001efe:	69fb      	ldr	r3, [r7, #28]
 8001f00:	08da      	lsrs	r2, r3, #3
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	3208      	adds	r2, #8
 8001f06:	69b9      	ldr	r1, [r7, #24]
 8001f08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
=======
 8001eda:	69fb      	ldr	r3, [r7, #28]
 8001edc:	08da      	lsrs	r2, r3, #3
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	3208      	adds	r2, #8
 8001ee2:	69b9      	ldr	r1, [r7, #24]
 8001ee4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
<<<<<<< HEAD
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	61bb      	str	r3, [r7, #24]
=======
<<<<<<< HEAD
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001f02:	69fb      	ldr	r3, [r7, #28]
 8001f04:	005b      	lsls	r3, r3, #1
 8001f06:	2203      	movs	r2, #3
 8001f08:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0c:	43db      	mvns	r3, r3
 8001f0e:	69ba      	ldr	r2, [r7, #24]
 8001f10:	4013      	ands	r3, r2
 8001f12:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	f003 0203 	and.w	r2, r3, #3
 8001f1c:	69fb      	ldr	r3, [r7, #28]
 8001f1e:	005b      	lsls	r3, r3, #1
 8001f20:	fa02 f303 	lsl.w	r3, r2, r3
 8001f24:	69ba      	ldr	r2, [r7, #24]
 8001f26:	4313      	orrs	r3, r2
 8001f28:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	69ba      	ldr	r2, [r7, #24]
 8001f2e:	601a      	str	r2, [r3, #0]
=======
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	61bb      	str	r3, [r7, #24]
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001f12:	69fb      	ldr	r3, [r7, #28]
 8001f14:	005b      	lsls	r3, r3, #1
 8001f16:	2203      	movs	r2, #3
 8001f18:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1c:	43db      	mvns	r3, r3
 8001f1e:	69ba      	ldr	r2, [r7, #24]
 8001f20:	4013      	ands	r3, r2
 8001f22:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	f003 0203 	and.w	r2, r3, #3
 8001f2c:	69fb      	ldr	r3, [r7, #28]
 8001f2e:	005b      	lsls	r3, r3, #1
 8001f30:	fa02 f303 	lsl.w	r3, r2, r3
 8001f34:	69ba      	ldr	r2, [r7, #24]
 8001f36:	4313      	orrs	r3, r2
 8001f38:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
<<<<<<< HEAD
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	69ba      	ldr	r2, [r7, #24]
 8001f3e:	601a      	str	r2, [r3, #0]
=======
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	69ba      	ldr	r2, [r7, #24]
 8001f1a:	601a      	str	r2, [r3, #0]
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
<<<<<<< HEAD
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	f000 80be 	beq.w	80020ca <HAL_GPIO_Init+0x306>
=======
<<<<<<< HEAD
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	f000 80be 	beq.w	80020ba <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f3e:	4b66      	ldr	r3, [pc, #408]	; (80020d8 <HAL_GPIO_Init+0x324>)
 8001f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f42:	4a65      	ldr	r2, [pc, #404]	; (80020d8 <HAL_GPIO_Init+0x324>)
 8001f44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f48:	6453      	str	r3, [r2, #68]	; 0x44
 8001f4a:	4b63      	ldr	r3, [pc, #396]	; (80020d8 <HAL_GPIO_Init+0x324>)
 8001f4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f52:	60fb      	str	r3, [r7, #12]
 8001f54:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001f56:	4a61      	ldr	r2, [pc, #388]	; (80020dc <HAL_GPIO_Init+0x328>)
 8001f58:	69fb      	ldr	r3, [r7, #28]
 8001f5a:	089b      	lsrs	r3, r3, #2
 8001f5c:	3302      	adds	r3, #2
 8001f5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f62:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001f64:	69fb      	ldr	r3, [r7, #28]
 8001f66:	f003 0303 	and.w	r3, r3, #3
 8001f6a:	009b      	lsls	r3, r3, #2
 8001f6c:	220f      	movs	r2, #15
 8001f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f72:	43db      	mvns	r3, r3
 8001f74:	69ba      	ldr	r2, [r7, #24]
 8001f76:	4013      	ands	r3, r2
 8001f78:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	4a58      	ldr	r2, [pc, #352]	; (80020e0 <HAL_GPIO_Init+0x32c>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d037      	beq.n	8001ff2 <HAL_GPIO_Init+0x23e>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	4a57      	ldr	r2, [pc, #348]	; (80020e4 <HAL_GPIO_Init+0x330>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d031      	beq.n	8001fee <HAL_GPIO_Init+0x23a>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	4a56      	ldr	r2, [pc, #344]	; (80020e8 <HAL_GPIO_Init+0x334>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d02b      	beq.n	8001fea <HAL_GPIO_Init+0x236>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	4a55      	ldr	r2, [pc, #340]	; (80020ec <HAL_GPIO_Init+0x338>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d025      	beq.n	8001fe6 <HAL_GPIO_Init+0x232>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	4a54      	ldr	r2, [pc, #336]	; (80020f0 <HAL_GPIO_Init+0x33c>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d01f      	beq.n	8001fe2 <HAL_GPIO_Init+0x22e>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	4a53      	ldr	r2, [pc, #332]	; (80020f4 <HAL_GPIO_Init+0x340>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d019      	beq.n	8001fde <HAL_GPIO_Init+0x22a>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	4a52      	ldr	r2, [pc, #328]	; (80020f8 <HAL_GPIO_Init+0x344>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d013      	beq.n	8001fda <HAL_GPIO_Init+0x226>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	4a51      	ldr	r2, [pc, #324]	; (80020fc <HAL_GPIO_Init+0x348>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d00d      	beq.n	8001fd6 <HAL_GPIO_Init+0x222>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	4a50      	ldr	r2, [pc, #320]	; (8002100 <HAL_GPIO_Init+0x34c>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d007      	beq.n	8001fd2 <HAL_GPIO_Init+0x21e>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	4a4f      	ldr	r2, [pc, #316]	; (8002104 <HAL_GPIO_Init+0x350>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d101      	bne.n	8001fce <HAL_GPIO_Init+0x21a>
 8001fca:	2309      	movs	r3, #9
 8001fcc:	e012      	b.n	8001ff4 <HAL_GPIO_Init+0x240>
 8001fce:	230a      	movs	r3, #10
 8001fd0:	e010      	b.n	8001ff4 <HAL_GPIO_Init+0x240>
 8001fd2:	2308      	movs	r3, #8
 8001fd4:	e00e      	b.n	8001ff4 <HAL_GPIO_Init+0x240>
 8001fd6:	2307      	movs	r3, #7
 8001fd8:	e00c      	b.n	8001ff4 <HAL_GPIO_Init+0x240>
 8001fda:	2306      	movs	r3, #6
 8001fdc:	e00a      	b.n	8001ff4 <HAL_GPIO_Init+0x240>
 8001fde:	2305      	movs	r3, #5
 8001fe0:	e008      	b.n	8001ff4 <HAL_GPIO_Init+0x240>
 8001fe2:	2304      	movs	r3, #4
 8001fe4:	e006      	b.n	8001ff4 <HAL_GPIO_Init+0x240>
 8001fe6:	2303      	movs	r3, #3
 8001fe8:	e004      	b.n	8001ff4 <HAL_GPIO_Init+0x240>
 8001fea:	2302      	movs	r3, #2
 8001fec:	e002      	b.n	8001ff4 <HAL_GPIO_Init+0x240>
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e000      	b.n	8001ff4 <HAL_GPIO_Init+0x240>
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	69fa      	ldr	r2, [r7, #28]
 8001ff6:	f002 0203 	and.w	r2, r2, #3
 8001ffa:	0092      	lsls	r2, r2, #2
 8001ffc:	4093      	lsls	r3, r2
 8001ffe:	69ba      	ldr	r2, [r7, #24]
 8002000:	4313      	orrs	r3, r2
 8002002:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002004:	4935      	ldr	r1, [pc, #212]	; (80020dc <HAL_GPIO_Init+0x328>)
 8002006:	69fb      	ldr	r3, [r7, #28]
 8002008:	089b      	lsrs	r3, r3, #2
 800200a:	3302      	adds	r3, #2
 800200c:	69ba      	ldr	r2, [r7, #24]
 800200e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002012:	4b3d      	ldr	r3, [pc, #244]	; (8002108 <HAL_GPIO_Init+0x354>)
 8002014:	689b      	ldr	r3, [r3, #8]
 8002016:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	43db      	mvns	r3, r3
 800201c:	69ba      	ldr	r2, [r7, #24]
 800201e:	4013      	ands	r3, r2
 8002020:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800202a:	2b00      	cmp	r3, #0
 800202c:	d003      	beq.n	8002036 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800202e:	69ba      	ldr	r2, [r7, #24]
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	4313      	orrs	r3, r2
 8002034:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002036:	4a34      	ldr	r2, [pc, #208]	; (8002108 <HAL_GPIO_Init+0x354>)
 8002038:	69bb      	ldr	r3, [r7, #24]
 800203a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800203c:	4b32      	ldr	r3, [pc, #200]	; (8002108 <HAL_GPIO_Init+0x354>)
 800203e:	68db      	ldr	r3, [r3, #12]
 8002040:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	43db      	mvns	r3, r3
 8002046:	69ba      	ldr	r2, [r7, #24]
 8002048:	4013      	ands	r3, r2
 800204a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002054:	2b00      	cmp	r3, #0
 8002056:	d003      	beq.n	8002060 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002058:	69ba      	ldr	r2, [r7, #24]
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	4313      	orrs	r3, r2
 800205e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002060:	4a29      	ldr	r2, [pc, #164]	; (8002108 <HAL_GPIO_Init+0x354>)
 8002062:	69bb      	ldr	r3, [r7, #24]
 8002064:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002066:	4b28      	ldr	r3, [pc, #160]	; (8002108 <HAL_GPIO_Init+0x354>)
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	43db      	mvns	r3, r3
 8002070:	69ba      	ldr	r2, [r7, #24]
 8002072:	4013      	ands	r3, r2
 8002074:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800207e:	2b00      	cmp	r3, #0
 8002080:	d003      	beq.n	800208a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002082:	69ba      	ldr	r2, [r7, #24]
 8002084:	693b      	ldr	r3, [r7, #16]
 8002086:	4313      	orrs	r3, r2
 8002088:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800208a:	4a1f      	ldr	r2, [pc, #124]	; (8002108 <HAL_GPIO_Init+0x354>)
 800208c:	69bb      	ldr	r3, [r7, #24]
 800208e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002090:	4b1d      	ldr	r3, [pc, #116]	; (8002108 <HAL_GPIO_Init+0x354>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	43db      	mvns	r3, r3
 800209a:	69ba      	ldr	r2, [r7, #24]
 800209c:	4013      	ands	r3, r2
 800209e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d003      	beq.n	80020b4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80020ac:	69ba      	ldr	r2, [r7, #24]
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	4313      	orrs	r3, r2
 80020b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80020b4:	4a14      	ldr	r2, [pc, #80]	; (8002108 <HAL_GPIO_Init+0x354>)
 80020b6:	69bb      	ldr	r3, [r7, #24]
 80020b8:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80020ba:	69fb      	ldr	r3, [r7, #28]
 80020bc:	3301      	adds	r3, #1
 80020be:	61fb      	str	r3, [r7, #28]
 80020c0:	69fb      	ldr	r3, [r7, #28]
 80020c2:	2b0f      	cmp	r3, #15
 80020c4:	f67f ae86 	bls.w	8001dd4 <HAL_GPIO_Init+0x20>
=======
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	f000 80be 	beq.w	80020a6 <HAL_GPIO_Init+0x306>
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f4e:	4b66      	ldr	r3, [pc, #408]	; (80020e8 <HAL_GPIO_Init+0x324>)
 8001f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f52:	4a65      	ldr	r2, [pc, #404]	; (80020e8 <HAL_GPIO_Init+0x324>)
 8001f54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f58:	6453      	str	r3, [r2, #68]	; 0x44
 8001f5a:	4b63      	ldr	r3, [pc, #396]	; (80020e8 <HAL_GPIO_Init+0x324>)
 8001f5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f62:	60fb      	str	r3, [r7, #12]
 8001f64:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001f66:	4a61      	ldr	r2, [pc, #388]	; (80020ec <HAL_GPIO_Init+0x328>)
 8001f68:	69fb      	ldr	r3, [r7, #28]
 8001f6a:	089b      	lsrs	r3, r3, #2
 8001f6c:	3302      	adds	r3, #2
 8001f6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f72:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001f74:	69fb      	ldr	r3, [r7, #28]
 8001f76:	f003 0303 	and.w	r3, r3, #3
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	220f      	movs	r2, #15
 8001f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f82:	43db      	mvns	r3, r3
 8001f84:	69ba      	ldr	r2, [r7, #24]
 8001f86:	4013      	ands	r3, r2
 8001f88:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	4a58      	ldr	r2, [pc, #352]	; (80020f0 <HAL_GPIO_Init+0x32c>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d037      	beq.n	8002002 <HAL_GPIO_Init+0x23e>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	4a57      	ldr	r2, [pc, #348]	; (80020f4 <HAL_GPIO_Init+0x330>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d031      	beq.n	8001ffe <HAL_GPIO_Init+0x23a>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	4a56      	ldr	r2, [pc, #344]	; (80020f8 <HAL_GPIO_Init+0x334>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d02b      	beq.n	8001ffa <HAL_GPIO_Init+0x236>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	4a55      	ldr	r2, [pc, #340]	; (80020fc <HAL_GPIO_Init+0x338>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d025      	beq.n	8001ff6 <HAL_GPIO_Init+0x232>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	4a54      	ldr	r2, [pc, #336]	; (8002100 <HAL_GPIO_Init+0x33c>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d01f      	beq.n	8001ff2 <HAL_GPIO_Init+0x22e>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	4a53      	ldr	r2, [pc, #332]	; (8002104 <HAL_GPIO_Init+0x340>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d019      	beq.n	8001fee <HAL_GPIO_Init+0x22a>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	4a52      	ldr	r2, [pc, #328]	; (8002108 <HAL_GPIO_Init+0x344>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d013      	beq.n	8001fea <HAL_GPIO_Init+0x226>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	4a51      	ldr	r2, [pc, #324]	; (800210c <HAL_GPIO_Init+0x348>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d00d      	beq.n	8001fe6 <HAL_GPIO_Init+0x222>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	4a50      	ldr	r2, [pc, #320]	; (8002110 <HAL_GPIO_Init+0x34c>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d007      	beq.n	8001fe2 <HAL_GPIO_Init+0x21e>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	4a4f      	ldr	r2, [pc, #316]	; (8002114 <HAL_GPIO_Init+0x350>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d101      	bne.n	8001fde <HAL_GPIO_Init+0x21a>
 8001fda:	2309      	movs	r3, #9
 8001fdc:	e012      	b.n	8002004 <HAL_GPIO_Init+0x240>
 8001fde:	230a      	movs	r3, #10
 8001fe0:	e010      	b.n	8002004 <HAL_GPIO_Init+0x240>
 8001fe2:	2308      	movs	r3, #8
 8001fe4:	e00e      	b.n	8002004 <HAL_GPIO_Init+0x240>
 8001fe6:	2307      	movs	r3, #7
 8001fe8:	e00c      	b.n	8002004 <HAL_GPIO_Init+0x240>
 8001fea:	2306      	movs	r3, #6
 8001fec:	e00a      	b.n	8002004 <HAL_GPIO_Init+0x240>
 8001fee:	2305      	movs	r3, #5
 8001ff0:	e008      	b.n	8002004 <HAL_GPIO_Init+0x240>
 8001ff2:	2304      	movs	r3, #4
 8001ff4:	e006      	b.n	8002004 <HAL_GPIO_Init+0x240>
 8001ff6:	2303      	movs	r3, #3
 8001ff8:	e004      	b.n	8002004 <HAL_GPIO_Init+0x240>
 8001ffa:	2302      	movs	r3, #2
 8001ffc:	e002      	b.n	8002004 <HAL_GPIO_Init+0x240>
 8001ffe:	2301      	movs	r3, #1
 8002000:	e000      	b.n	8002004 <HAL_GPIO_Init+0x240>
 8002002:	2300      	movs	r3, #0
 8002004:	69fa      	ldr	r2, [r7, #28]
 8002006:	f002 0203 	and.w	r2, r2, #3
 800200a:	0092      	lsls	r2, r2, #2
 800200c:	4093      	lsls	r3, r2
 800200e:	69ba      	ldr	r2, [r7, #24]
 8002010:	4313      	orrs	r3, r2
 8002012:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002014:	4935      	ldr	r1, [pc, #212]	; (80020ec <HAL_GPIO_Init+0x328>)
 8002016:	69fb      	ldr	r3, [r7, #28]
 8002018:	089b      	lsrs	r3, r3, #2
 800201a:	3302      	adds	r3, #2
 800201c:	69ba      	ldr	r2, [r7, #24]
 800201e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002022:	4b3d      	ldr	r3, [pc, #244]	; (8002118 <HAL_GPIO_Init+0x354>)
 8002024:	689b      	ldr	r3, [r3, #8]
 8002026:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002028:	693b      	ldr	r3, [r7, #16]
 800202a:	43db      	mvns	r3, r3
 800202c:	69ba      	ldr	r2, [r7, #24]
 800202e:	4013      	ands	r3, r2
 8002030:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800203a:	2b00      	cmp	r3, #0
 800203c:	d003      	beq.n	8002046 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800203e:	69ba      	ldr	r2, [r7, #24]
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	4313      	orrs	r3, r2
 8002044:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002046:	4a34      	ldr	r2, [pc, #208]	; (8002118 <HAL_GPIO_Init+0x354>)
 8002048:	69bb      	ldr	r3, [r7, #24]
 800204a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800204c:	4b32      	ldr	r3, [pc, #200]	; (8002118 <HAL_GPIO_Init+0x354>)
 800204e:	68db      	ldr	r3, [r3, #12]
 8002050:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	43db      	mvns	r3, r3
 8002056:	69ba      	ldr	r2, [r7, #24]
 8002058:	4013      	ands	r3, r2
 800205a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002064:	2b00      	cmp	r3, #0
 8002066:	d003      	beq.n	8002070 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002068:	69ba      	ldr	r2, [r7, #24]
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	4313      	orrs	r3, r2
 800206e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002070:	4a29      	ldr	r2, [pc, #164]	; (8002118 <HAL_GPIO_Init+0x354>)
 8002072:	69bb      	ldr	r3, [r7, #24]
 8002074:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002076:	4b28      	ldr	r3, [pc, #160]	; (8002118 <HAL_GPIO_Init+0x354>)
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800207c:	693b      	ldr	r3, [r7, #16]
 800207e:	43db      	mvns	r3, r3
 8002080:	69ba      	ldr	r2, [r7, #24]
 8002082:	4013      	ands	r3, r2
 8002084:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800208e:	2b00      	cmp	r3, #0
 8002090:	d003      	beq.n	800209a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002092:	69ba      	ldr	r2, [r7, #24]
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	4313      	orrs	r3, r2
 8002098:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800209a:	4a1f      	ldr	r2, [pc, #124]	; (8002118 <HAL_GPIO_Init+0x354>)
 800209c:	69bb      	ldr	r3, [r7, #24]
 800209e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020a0:	4b1d      	ldr	r3, [pc, #116]	; (8002118 <HAL_GPIO_Init+0x354>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	43db      	mvns	r3, r3
 80020aa:	69ba      	ldr	r2, [r7, #24]
 80020ac:	4013      	ands	r3, r2
 80020ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d003      	beq.n	80020c4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80020bc:	69ba      	ldr	r2, [r7, #24]
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	4313      	orrs	r3, r2
 80020c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80020c4:	4a14      	ldr	r2, [pc, #80]	; (8002118 <HAL_GPIO_Init+0x354>)
 80020c6:	69bb      	ldr	r3, [r7, #24]
 80020c8:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
<<<<<<< HEAD
 80020ca:	69fb      	ldr	r3, [r7, #28]
 80020cc:	3301      	adds	r3, #1
 80020ce:	61fb      	str	r3, [r7, #28]
 80020d0:	69fb      	ldr	r3, [r7, #28]
 80020d2:	2b0f      	cmp	r3, #15
 80020d4:	f67f ae86 	bls.w	8001de4 <HAL_GPIO_Init+0x20>
=======
 80020a6:	69fb      	ldr	r3, [r7, #28]
 80020a8:	3301      	adds	r3, #1
 80020aa:	61fb      	str	r3, [r7, #28]
 80020ac:	69fb      	ldr	r3, [r7, #28]
 80020ae:	2b0f      	cmp	r3, #15
 80020b0:	f67f ae86 	bls.w	8001dc0 <HAL_GPIO_Init+0x20>
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
      }
    }
  }
}
<<<<<<< HEAD
 80020d8:	bf00      	nop
 80020da:	bf00      	nop
 80020dc:	3724      	adds	r7, #36	; 0x24
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr
 80020e6:	bf00      	nop
 80020e8:	40023800 	.word	0x40023800
 80020ec:	40013800 	.word	0x40013800
 80020f0:	40020000 	.word	0x40020000
 80020f4:	40020400 	.word	0x40020400
 80020f8:	40020800 	.word	0x40020800
 80020fc:	40020c00 	.word	0x40020c00
 8002100:	40021000 	.word	0x40021000
 8002104:	40021400 	.word	0x40021400
 8002108:	40021800 	.word	0x40021800
 800210c:	40021c00 	.word	0x40021c00
 8002110:	40022000 	.word	0x40022000
 8002114:	40022400 	.word	0x40022400
 8002118:	40013c00 	.word	0x40013c00

0800211c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800211c:	b480      	push	{r7}
 800211e:	b085      	sub	sp, #20
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
 8002124:	460b      	mov	r3, r1
 8002126:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	691a      	ldr	r2, [r3, #16]
 800212c:	887b      	ldrh	r3, [r7, #2]
 800212e:	4013      	ands	r3, r2
 8002130:	2b00      	cmp	r3, #0
 8002132:	d002      	beq.n	800213a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002134:	2301      	movs	r3, #1
 8002136:	73fb      	strb	r3, [r7, #15]
 8002138:	e001      	b.n	800213e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800213a:	2300      	movs	r3, #0
 800213c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800213e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002140:	4618      	mov	r0, r3
 8002142:	3714      	adds	r7, #20
 8002144:	46bd      	mov	sp, r7
 8002146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214a:	4770      	bx	lr

0800214c <HAL_GPIO_WritePin>:
=======
<<<<<<< HEAD
 80020c8:	bf00      	nop
 80020ca:	bf00      	nop
 80020cc:	3724      	adds	r7, #36	; 0x24
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr
 80020d6:	bf00      	nop
 80020d8:	40023800 	.word	0x40023800
 80020dc:	40013800 	.word	0x40013800
 80020e0:	40020000 	.word	0x40020000
 80020e4:	40020400 	.word	0x40020400
 80020e8:	40020800 	.word	0x40020800
 80020ec:	40020c00 	.word	0x40020c00
 80020f0:	40021000 	.word	0x40021000
 80020f4:	40021400 	.word	0x40021400
 80020f8:	40021800 	.word	0x40021800
 80020fc:	40021c00 	.word	0x40021c00
 8002100:	40022000 	.word	0x40022000
 8002104:	40022400 	.word	0x40022400
 8002108:	40013c00 	.word	0x40013c00

0800210c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800210c:	b480      	push	{r7}
 800210e:	b085      	sub	sp, #20
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
 8002114:	460b      	mov	r3, r1
 8002116:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	691a      	ldr	r2, [r3, #16]
 800211c:	887b      	ldrh	r3, [r7, #2]
 800211e:	4013      	ands	r3, r2
 8002120:	2b00      	cmp	r3, #0
 8002122:	d002      	beq.n	800212a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002124:	2301      	movs	r3, #1
 8002126:	73fb      	strb	r3, [r7, #15]
 8002128:	e001      	b.n	800212e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800212a:	2300      	movs	r3, #0
 800212c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800212e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002130:	4618      	mov	r0, r3
 8002132:	3714      	adds	r7, #20
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr

0800213c <HAL_GPIO_WritePin>:
=======
 80020b4:	bf00      	nop
 80020b6:	bf00      	nop
 80020b8:	3724      	adds	r7, #36	; 0x24
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr
 80020c2:	bf00      	nop
 80020c4:	40023800 	.word	0x40023800
 80020c8:	40013800 	.word	0x40013800
 80020cc:	40020000 	.word	0x40020000
 80020d0:	40020400 	.word	0x40020400
 80020d4:	40020800 	.word	0x40020800
 80020d8:	40020c00 	.word	0x40020c00
 80020dc:	40021000 	.word	0x40021000
 80020e0:	40021400 	.word	0x40021400
 80020e4:	40021800 	.word	0x40021800
 80020e8:	40021c00 	.word	0x40021c00
 80020ec:	40022000 	.word	0x40022000
 80020f0:	40022400 	.word	0x40022400
 80020f4:	40013c00 	.word	0x40013c00

080020f8 <HAL_GPIO_WritePin>:
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
<<<<<<< HEAD
 800214c:	b480      	push	{r7}
 800214e:	b083      	sub	sp, #12
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
 8002154:	460b      	mov	r3, r1
 8002156:	807b      	strh	r3, [r7, #2]
 8002158:	4613      	mov	r3, r2
 800215a:	707b      	strb	r3, [r7, #1]
=======
<<<<<<< HEAD
 800213c:	b480      	push	{r7}
 800213e:	b083      	sub	sp, #12
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
 8002144:	460b      	mov	r3, r1
 8002146:	807b      	strh	r3, [r7, #2]
 8002148:	4613      	mov	r3, r2
 800214a:	707b      	strb	r3, [r7, #1]
=======
 80020f8:	b480      	push	{r7}
 80020fa:	b083      	sub	sp, #12
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
 8002100:	460b      	mov	r3, r1
 8002102:	807b      	strh	r3, [r7, #2]
 8002104:	4613      	mov	r3, r2
 8002106:	707b      	strb	r3, [r7, #1]
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
<<<<<<< HEAD
 800215c:	787b      	ldrb	r3, [r7, #1]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d003      	beq.n	800216a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002162:	887a      	ldrh	r2, [r7, #2]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	619a      	str	r2, [r3, #24]
=======
<<<<<<< HEAD
 800214c:	787b      	ldrb	r3, [r7, #1]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d003      	beq.n	800215a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002152:	887a      	ldrh	r2, [r7, #2]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	619a      	str	r2, [r3, #24]
=======
 8002108:	787b      	ldrb	r3, [r7, #1]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d003      	beq.n	8002116 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800210e:	887a      	ldrh	r2, [r7, #2]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	619a      	str	r2, [r3, #24]
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
<<<<<<< HEAD
 8002168:	e003      	b.n	8002172 <HAL_GPIO_WritePin+0x26>
=======
<<<<<<< HEAD
 8002158:	e003      	b.n	8002162 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800215a:	887b      	ldrh	r3, [r7, #2]
 800215c:	041a      	lsls	r2, r3, #16
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	619a      	str	r2, [r3, #24]
}
 8002162:	bf00      	nop
 8002164:	370c      	adds	r7, #12
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr

0800216e <HAL_GPIO_TogglePin>:
=======
 8002114:	e003      	b.n	800211e <HAL_GPIO_WritePin+0x26>
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800216a:	887b      	ldrh	r3, [r7, #2]
 800216c:	041a      	lsls	r2, r3, #16
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	619a      	str	r2, [r3, #24]
}
 8002172:	bf00      	nop
 8002174:	370c      	adds	r7, #12
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr

<<<<<<< HEAD
0800217e <HAL_GPIO_TogglePin>:
=======
0800212a <HAL_GPIO_TogglePin>:
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
<<<<<<< HEAD
 800217e:	b480      	push	{r7}
 8002180:	b085      	sub	sp, #20
 8002182:	af00      	add	r7, sp, #0
 8002184:	6078      	str	r0, [r7, #4]
 8002186:	460b      	mov	r3, r1
 8002188:	807b      	strh	r3, [r7, #2]
=======
<<<<<<< HEAD
 800216e:	b480      	push	{r7}
 8002170:	b085      	sub	sp, #20
 8002172:	af00      	add	r7, sp, #0
 8002174:	6078      	str	r0, [r7, #4]
 8002176:	460b      	mov	r3, r1
 8002178:	807b      	strh	r3, [r7, #2]
=======
 800212a:	b480      	push	{r7}
 800212c:	b085      	sub	sp, #20
 800212e:	af00      	add	r7, sp, #0
 8002130:	6078      	str	r0, [r7, #4]
 8002132:	460b      	mov	r3, r1
 8002134:	807b      	strh	r3, [r7, #2]
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
<<<<<<< HEAD
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	695b      	ldr	r3, [r3, #20]
 800218e:	60fb      	str	r3, [r7, #12]
=======
<<<<<<< HEAD
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	695b      	ldr	r3, [r3, #20]
 800217e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002180:	887a      	ldrh	r2, [r7, #2]
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	4013      	ands	r3, r2
 8002186:	041a      	lsls	r2, r3, #16
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	43d9      	mvns	r1, r3
 800218c:	887b      	ldrh	r3, [r7, #2]
 800218e:	400b      	ands	r3, r1
 8002190:	431a      	orrs	r2, r3
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	619a      	str	r2, [r3, #24]
}
 8002196:	bf00      	nop
 8002198:	3714      	adds	r7, #20
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr
	...

080021a4 <HAL_PWR_EnableBkUpAccess>:
=======
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	695b      	ldr	r3, [r3, #20]
 800213a:	60fb      	str	r3, [r7, #12]
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002190:	887a      	ldrh	r2, [r7, #2]
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	4013      	ands	r3, r2
 8002196:	041a      	lsls	r2, r3, #16
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	43d9      	mvns	r1, r3
 800219c:	887b      	ldrh	r3, [r7, #2]
 800219e:	400b      	ands	r3, r1
 80021a0:	431a      	orrs	r2, r3
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	619a      	str	r2, [r3, #24]
}
 80021a6:	bf00      	nop
 80021a8:	3714      	adds	r7, #20
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr
	...

<<<<<<< HEAD
080021b4 <HAL_PWR_EnableBkUpAccess>:
=======
08002160 <HAL_PWR_EnableBkUpAccess>:
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
<<<<<<< HEAD
 80021b4:	b480      	push	{r7}
 80021b6:	af00      	add	r7, sp, #0
=======
<<<<<<< HEAD
 80021a4:	b480      	push	{r7}
 80021a6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80021a8:	4b05      	ldr	r3, [pc, #20]	; (80021c0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a04      	ldr	r2, [pc, #16]	; (80021c0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80021ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021b2:	6013      	str	r3, [r2, #0]
}
 80021b4:	bf00      	nop
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr
 80021be:	bf00      	nop
 80021c0:	40007000 	.word	0x40007000

080021c4 <HAL_PWREx_EnableOverDrive>:
=======
 8002160:	b480      	push	{r7}
 8002162:	af00      	add	r7, sp, #0
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80021b8:	4b05      	ldr	r3, [pc, #20]	; (80021d0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a04      	ldr	r2, [pc, #16]	; (80021d0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80021be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021c2:	6013      	str	r3, [r2, #0]
}
 80021c4:	bf00      	nop
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr
 80021ce:	bf00      	nop
 80021d0:	40007000 	.word	0x40007000

<<<<<<< HEAD
080021d4 <HAL_PWREx_EnableOverDrive>:
=======
08002180 <HAL_PWREx_EnableOverDrive>:
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
<<<<<<< HEAD
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b082      	sub	sp, #8
 80021d8:	af00      	add	r7, sp, #0
=======
<<<<<<< HEAD
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b082      	sub	sp, #8
 80021c8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80021ca:	2300      	movs	r3, #0
 80021cc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80021ce:	4b23      	ldr	r3, [pc, #140]	; (800225c <HAL_PWREx_EnableOverDrive+0x98>)
 80021d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d2:	4a22      	ldr	r2, [pc, #136]	; (800225c <HAL_PWREx_EnableOverDrive+0x98>)
 80021d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021d8:	6413      	str	r3, [r2, #64]	; 0x40
 80021da:	4b20      	ldr	r3, [pc, #128]	; (800225c <HAL_PWREx_EnableOverDrive+0x98>)
 80021dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021e2:	603b      	str	r3, [r7, #0]
 80021e4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80021e6:	4b1e      	ldr	r3, [pc, #120]	; (8002260 <HAL_PWREx_EnableOverDrive+0x9c>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a1d      	ldr	r2, [pc, #116]	; (8002260 <HAL_PWREx_EnableOverDrive+0x9c>)
 80021ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021f0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80021f2:	f7fe fe8d 	bl	8000f10 <HAL_GetTick>
 80021f6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80021f8:	e009      	b.n	800220e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80021fa:	f7fe fe89 	bl	8000f10 <HAL_GetTick>
 80021fe:	4602      	mov	r2, r0
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	1ad3      	subs	r3, r2, r3
 8002204:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002208:	d901      	bls.n	800220e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800220a:	2303      	movs	r3, #3
 800220c:	e022      	b.n	8002254 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800220e:	4b14      	ldr	r3, [pc, #80]	; (8002260 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002216:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800221a:	d1ee      	bne.n	80021fa <HAL_PWREx_EnableOverDrive+0x36>
=======
 8002180:	b580      	push	{r7, lr}
 8002182:	b082      	sub	sp, #8
 8002184:	af00      	add	r7, sp, #0
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  uint32_t tickstart = 0;
 80021da:	2300      	movs	r3, #0
 80021dc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80021de:	4b23      	ldr	r3, [pc, #140]	; (800226c <HAL_PWREx_EnableOverDrive+0x98>)
 80021e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e2:	4a22      	ldr	r2, [pc, #136]	; (800226c <HAL_PWREx_EnableOverDrive+0x98>)
 80021e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021e8:	6413      	str	r3, [r2, #64]	; 0x40
 80021ea:	4b20      	ldr	r3, [pc, #128]	; (800226c <HAL_PWREx_EnableOverDrive+0x98>)
 80021ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021f2:	603b      	str	r3, [r7, #0]
 80021f4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80021f6:	4b1e      	ldr	r3, [pc, #120]	; (8002270 <HAL_PWREx_EnableOverDrive+0x9c>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a1d      	ldr	r2, [pc, #116]	; (8002270 <HAL_PWREx_EnableOverDrive+0x9c>)
 80021fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002200:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002202:	f7fe fe8d 	bl	8000f20 <HAL_GetTick>
 8002206:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002208:	e009      	b.n	800221e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800220a:	f7fe fe89 	bl	8000f20 <HAL_GetTick>
 800220e:	4602      	mov	r2, r0
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	1ad3      	subs	r3, r2, r3
 8002214:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002218:	d901      	bls.n	800221e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800221a:	2303      	movs	r3, #3
 800221c:	e022      	b.n	8002264 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
<<<<<<< HEAD
 800221e:	4b14      	ldr	r3, [pc, #80]	; (8002270 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002226:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800222a:	d1ee      	bne.n	800220a <HAL_PWREx_EnableOverDrive+0x36>
=======
 80021ca:	4b14      	ldr	r3, [pc, #80]	; (800221c <HAL_PWREx_EnableOverDrive+0x9c>)
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021d6:	d1ee      	bne.n	80021b6 <HAL_PWREx_EnableOverDrive+0x36>
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
<<<<<<< HEAD
 800222c:	4b10      	ldr	r3, [pc, #64]	; (8002270 <HAL_PWREx_EnableOverDrive+0x9c>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a0f      	ldr	r2, [pc, #60]	; (8002270 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002232:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002236:	6013      	str	r3, [r2, #0]
=======
<<<<<<< HEAD
 800221c:	4b10      	ldr	r3, [pc, #64]	; (8002260 <HAL_PWREx_EnableOverDrive+0x9c>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a0f      	ldr	r2, [pc, #60]	; (8002260 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002222:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002226:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002228:	f7fe fe72 	bl	8000f10 <HAL_GetTick>
 800222c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800222e:	e009      	b.n	8002244 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002230:	f7fe fe6e 	bl	8000f10 <HAL_GetTick>
 8002234:	4602      	mov	r2, r0
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	1ad3      	subs	r3, r2, r3
 800223a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800223e:	d901      	bls.n	8002244 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002240:	2303      	movs	r3, #3
 8002242:	e007      	b.n	8002254 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002244:	4b06      	ldr	r3, [pc, #24]	; (8002260 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800224c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002250:	d1ee      	bne.n	8002230 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002252:	2300      	movs	r3, #0
}
 8002254:	4618      	mov	r0, r3
 8002256:	3708      	adds	r7, #8
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}
 800225c:	40023800 	.word	0x40023800
 8002260:	40007000 	.word	0x40007000

08002264 <HAL_RCC_OscConfig>:
=======
 80021d8:	4b10      	ldr	r3, [pc, #64]	; (800221c <HAL_PWREx_EnableOverDrive+0x9c>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a0f      	ldr	r2, [pc, #60]	; (800221c <HAL_PWREx_EnableOverDrive+0x9c>)
 80021de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021e2:	6013      	str	r3, [r2, #0]
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637

  /* Get tick */
  tickstart = HAL_GetTick();
 8002238:	f7fe fe72 	bl	8000f20 <HAL_GetTick>
 800223c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800223e:	e009      	b.n	8002254 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002240:	f7fe fe6e 	bl	8000f20 <HAL_GetTick>
 8002244:	4602      	mov	r2, r0
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	1ad3      	subs	r3, r2, r3
 800224a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800224e:	d901      	bls.n	8002254 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002250:	2303      	movs	r3, #3
 8002252:	e007      	b.n	8002264 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002254:	4b06      	ldr	r3, [pc, #24]	; (8002270 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800225c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002260:	d1ee      	bne.n	8002240 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002262:	2300      	movs	r3, #0
}
 8002264:	4618      	mov	r0, r3
 8002266:	3708      	adds	r7, #8
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}
 800226c:	40023800 	.word	0x40023800
 8002270:	40007000 	.word	0x40007000

<<<<<<< HEAD
08002274 <HAL_RCC_OscConfig>:
=======
08002220 <HAL_RCC_OscConfig>:
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
<<<<<<< HEAD
 8002274:	b580      	push	{r7, lr}
 8002276:	b086      	sub	sp, #24
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
=======
<<<<<<< HEAD
 8002264:	b580      	push	{r7, lr}
 8002266:	b086      	sub	sp, #24
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800226c:	2300      	movs	r3, #0
 800226e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d101      	bne.n	800227a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	e291      	b.n	800279e <HAL_RCC_OscConfig+0x53a>
=======
 8002220:	b580      	push	{r7, lr}
 8002222:	b086      	sub	sp, #24
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800227c:	2300      	movs	r3, #0
 800227e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d101      	bne.n	800228a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
<<<<<<< HEAD
 8002286:	2301      	movs	r3, #1
 8002288:	e291      	b.n	80027ae <HAL_RCC_OscConfig+0x53a>
=======
 8002232:	2301      	movs	r3, #1
 8002234:	e291      	b.n	800275a <HAL_RCC_OscConfig+0x53a>
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
<<<<<<< HEAD
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f003 0301 	and.w	r3, r3, #1
 8002292:	2b00      	cmp	r3, #0
 8002294:	f000 8087 	beq.w	80023a6 <HAL_RCC_OscConfig+0x132>
=======
<<<<<<< HEAD
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 0301 	and.w	r3, r3, #1
 8002282:	2b00      	cmp	r3, #0
 8002284:	f000 8087 	beq.w	8002396 <HAL_RCC_OscConfig+0x132>
=======
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f003 0301 	and.w	r3, r3, #1
 800223e:	2b00      	cmp	r3, #0
 8002240:	f000 8087 	beq.w	8002352 <HAL_RCC_OscConfig+0x132>
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
<<<<<<< HEAD
 8002298:	4b96      	ldr	r3, [pc, #600]	; (80024f4 <HAL_RCC_OscConfig+0x280>)
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	f003 030c 	and.w	r3, r3, #12
 80022a0:	2b04      	cmp	r3, #4
 80022a2:	d00c      	beq.n	80022be <HAL_RCC_OscConfig+0x4a>
=======
<<<<<<< HEAD
 8002288:	4b96      	ldr	r3, [pc, #600]	; (80024e4 <HAL_RCC_OscConfig+0x280>)
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	f003 030c 	and.w	r3, r3, #12
 8002290:	2b04      	cmp	r3, #4
 8002292:	d00c      	beq.n	80022ae <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002294:	4b93      	ldr	r3, [pc, #588]	; (80024e4 <HAL_RCC_OscConfig+0x280>)
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	f003 030c 	and.w	r3, r3, #12
 800229c:	2b08      	cmp	r3, #8
 800229e:	d112      	bne.n	80022c6 <HAL_RCC_OscConfig+0x62>
 80022a0:	4b90      	ldr	r3, [pc, #576]	; (80024e4 <HAL_RCC_OscConfig+0x280>)
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80022ac:	d10b      	bne.n	80022c6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022ae:	4b8d      	ldr	r3, [pc, #564]	; (80024e4 <HAL_RCC_OscConfig+0x280>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d06c      	beq.n	8002394 <HAL_RCC_OscConfig+0x130>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d168      	bne.n	8002394 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	e26b      	b.n	800279e <HAL_RCC_OscConfig+0x53a>
=======
 8002244:	4b96      	ldr	r3, [pc, #600]	; (80024a0 <HAL_RCC_OscConfig+0x280>)
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	f003 030c 	and.w	r3, r3, #12
 800224c:	2b04      	cmp	r3, #4
 800224e:	d00c      	beq.n	800226a <HAL_RCC_OscConfig+0x4a>
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022a4:	4b93      	ldr	r3, [pc, #588]	; (80024f4 <HAL_RCC_OscConfig+0x280>)
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	f003 030c 	and.w	r3, r3, #12
 80022ac:	2b08      	cmp	r3, #8
 80022ae:	d112      	bne.n	80022d6 <HAL_RCC_OscConfig+0x62>
 80022b0:	4b90      	ldr	r3, [pc, #576]	; (80024f4 <HAL_RCC_OscConfig+0x280>)
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80022bc:	d10b      	bne.n	80022d6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022be:	4b8d      	ldr	r3, [pc, #564]	; (80024f4 <HAL_RCC_OscConfig+0x280>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d06c      	beq.n	80023a4 <HAL_RCC_OscConfig+0x130>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d168      	bne.n	80023a4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
<<<<<<< HEAD
 80022d2:	2301      	movs	r3, #1
 80022d4:	e26b      	b.n	80027ae <HAL_RCC_OscConfig+0x53a>
=======
 800227e:	2301      	movs	r3, #1
 8002280:	e26b      	b.n	800275a <HAL_RCC_OscConfig+0x53a>
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
<<<<<<< HEAD
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022de:	d106      	bne.n	80022ee <HAL_RCC_OscConfig+0x7a>
 80022e0:	4b84      	ldr	r3, [pc, #528]	; (80024f4 <HAL_RCC_OscConfig+0x280>)
=======
<<<<<<< HEAD
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022ce:	d106      	bne.n	80022de <HAL_RCC_OscConfig+0x7a>
 80022d0:	4b84      	ldr	r3, [pc, #528]	; (80024e4 <HAL_RCC_OscConfig+0x280>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a83      	ldr	r2, [pc, #524]	; (80024e4 <HAL_RCC_OscConfig+0x280>)
 80022d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022da:	6013      	str	r3, [r2, #0]
 80022dc:	e02e      	b.n	800233c <HAL_RCC_OscConfig+0xd8>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d10c      	bne.n	8002300 <HAL_RCC_OscConfig+0x9c>
 80022e6:	4b7f      	ldr	r3, [pc, #508]	; (80024e4 <HAL_RCC_OscConfig+0x280>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a7e      	ldr	r2, [pc, #504]	; (80024e4 <HAL_RCC_OscConfig+0x280>)
 80022ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022f0:	6013      	str	r3, [r2, #0]
 80022f2:	4b7c      	ldr	r3, [pc, #496]	; (80024e4 <HAL_RCC_OscConfig+0x280>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a7b      	ldr	r2, [pc, #492]	; (80024e4 <HAL_RCC_OscConfig+0x280>)
 80022f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022fc:	6013      	str	r3, [r2, #0]
 80022fe:	e01d      	b.n	800233c <HAL_RCC_OscConfig+0xd8>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002308:	d10c      	bne.n	8002324 <HAL_RCC_OscConfig+0xc0>
 800230a:	4b76      	ldr	r3, [pc, #472]	; (80024e4 <HAL_RCC_OscConfig+0x280>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a75      	ldr	r2, [pc, #468]	; (80024e4 <HAL_RCC_OscConfig+0x280>)
 8002310:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002314:	6013      	str	r3, [r2, #0]
 8002316:	4b73      	ldr	r3, [pc, #460]	; (80024e4 <HAL_RCC_OscConfig+0x280>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a72      	ldr	r2, [pc, #456]	; (80024e4 <HAL_RCC_OscConfig+0x280>)
 800231c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002320:	6013      	str	r3, [r2, #0]
 8002322:	e00b      	b.n	800233c <HAL_RCC_OscConfig+0xd8>
 8002324:	4b6f      	ldr	r3, [pc, #444]	; (80024e4 <HAL_RCC_OscConfig+0x280>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a6e      	ldr	r2, [pc, #440]	; (80024e4 <HAL_RCC_OscConfig+0x280>)
 800232a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800232e:	6013      	str	r3, [r2, #0]
 8002330:	4b6c      	ldr	r3, [pc, #432]	; (80024e4 <HAL_RCC_OscConfig+0x280>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a6b      	ldr	r2, [pc, #428]	; (80024e4 <HAL_RCC_OscConfig+0x280>)
 8002336:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800233a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d013      	beq.n	800236c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002344:	f7fe fde4 	bl	8000f10 <HAL_GetTick>
 8002348:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800234a:	e008      	b.n	800235e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800234c:	f7fe fde0 	bl	8000f10 <HAL_GetTick>
 8002350:	4602      	mov	r2, r0
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	1ad3      	subs	r3, r2, r3
 8002356:	2b64      	cmp	r3, #100	; 0x64
 8002358:	d901      	bls.n	800235e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800235a:	2303      	movs	r3, #3
 800235c:	e21f      	b.n	800279e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800235e:	4b61      	ldr	r3, [pc, #388]	; (80024e4 <HAL_RCC_OscConfig+0x280>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002366:	2b00      	cmp	r3, #0
 8002368:	d0f0      	beq.n	800234c <HAL_RCC_OscConfig+0xe8>
 800236a:	e014      	b.n	8002396 <HAL_RCC_OscConfig+0x132>
=======
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800228a:	d106      	bne.n	800229a <HAL_RCC_OscConfig+0x7a>
 800228c:	4b84      	ldr	r3, [pc, #528]	; (80024a0 <HAL_RCC_OscConfig+0x280>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a83      	ldr	r2, [pc, #524]	; (80024a0 <HAL_RCC_OscConfig+0x280>)
 8002292:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002296:	6013      	str	r3, [r2, #0]
 8002298:	e02e      	b.n	80022f8 <HAL_RCC_OscConfig+0xd8>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d10c      	bne.n	80022bc <HAL_RCC_OscConfig+0x9c>
 80022a2:	4b7f      	ldr	r3, [pc, #508]	; (80024a0 <HAL_RCC_OscConfig+0x280>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4a7e      	ldr	r2, [pc, #504]	; (80024a0 <HAL_RCC_OscConfig+0x280>)
 80022a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022ac:	6013      	str	r3, [r2, #0]
 80022ae:	4b7c      	ldr	r3, [pc, #496]	; (80024a0 <HAL_RCC_OscConfig+0x280>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a7b      	ldr	r2, [pc, #492]	; (80024a0 <HAL_RCC_OscConfig+0x280>)
 80022b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022b8:	6013      	str	r3, [r2, #0]
 80022ba:	e01d      	b.n	80022f8 <HAL_RCC_OscConfig+0xd8>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022c4:	d10c      	bne.n	80022e0 <HAL_RCC_OscConfig+0xc0>
 80022c6:	4b76      	ldr	r3, [pc, #472]	; (80024a0 <HAL_RCC_OscConfig+0x280>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a75      	ldr	r2, [pc, #468]	; (80024a0 <HAL_RCC_OscConfig+0x280>)
 80022cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022d0:	6013      	str	r3, [r2, #0]
 80022d2:	4b73      	ldr	r3, [pc, #460]	; (80024a0 <HAL_RCC_OscConfig+0x280>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a72      	ldr	r2, [pc, #456]	; (80024a0 <HAL_RCC_OscConfig+0x280>)
 80022d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022dc:	6013      	str	r3, [r2, #0]
 80022de:	e00b      	b.n	80022f8 <HAL_RCC_OscConfig+0xd8>
 80022e0:	4b6f      	ldr	r3, [pc, #444]	; (80024a0 <HAL_RCC_OscConfig+0x280>)
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a83      	ldr	r2, [pc, #524]	; (80024f4 <HAL_RCC_OscConfig+0x280>)
 80022e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022ea:	6013      	str	r3, [r2, #0]
 80022ec:	e02e      	b.n	800234c <HAL_RCC_OscConfig+0xd8>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d10c      	bne.n	8002310 <HAL_RCC_OscConfig+0x9c>
 80022f6:	4b7f      	ldr	r3, [pc, #508]	; (80024f4 <HAL_RCC_OscConfig+0x280>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a7e      	ldr	r2, [pc, #504]	; (80024f4 <HAL_RCC_OscConfig+0x280>)
 80022fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002300:	6013      	str	r3, [r2, #0]
 8002302:	4b7c      	ldr	r3, [pc, #496]	; (80024f4 <HAL_RCC_OscConfig+0x280>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a7b      	ldr	r2, [pc, #492]	; (80024f4 <HAL_RCC_OscConfig+0x280>)
 8002308:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800230c:	6013      	str	r3, [r2, #0]
 800230e:	e01d      	b.n	800234c <HAL_RCC_OscConfig+0xd8>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002318:	d10c      	bne.n	8002334 <HAL_RCC_OscConfig+0xc0>
 800231a:	4b76      	ldr	r3, [pc, #472]	; (80024f4 <HAL_RCC_OscConfig+0x280>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a75      	ldr	r2, [pc, #468]	; (80024f4 <HAL_RCC_OscConfig+0x280>)
 8002320:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002324:	6013      	str	r3, [r2, #0]
 8002326:	4b73      	ldr	r3, [pc, #460]	; (80024f4 <HAL_RCC_OscConfig+0x280>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a72      	ldr	r2, [pc, #456]	; (80024f4 <HAL_RCC_OscConfig+0x280>)
 800232c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002330:	6013      	str	r3, [r2, #0]
 8002332:	e00b      	b.n	800234c <HAL_RCC_OscConfig+0xd8>
 8002334:	4b6f      	ldr	r3, [pc, #444]	; (80024f4 <HAL_RCC_OscConfig+0x280>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a6e      	ldr	r2, [pc, #440]	; (80024f4 <HAL_RCC_OscConfig+0x280>)
 800233a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800233e:	6013      	str	r3, [r2, #0]
 8002340:	4b6c      	ldr	r3, [pc, #432]	; (80024f4 <HAL_RCC_OscConfig+0x280>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a6b      	ldr	r2, [pc, #428]	; (80024f4 <HAL_RCC_OscConfig+0x280>)
 8002346:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800234a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d013      	beq.n	800237c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002354:	f7fe fde4 	bl	8000f20 <HAL_GetTick>
 8002358:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800235a:	e008      	b.n	800236e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800235c:	f7fe fde0 	bl	8000f20 <HAL_GetTick>
 8002360:	4602      	mov	r2, r0
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	1ad3      	subs	r3, r2, r3
 8002366:	2b64      	cmp	r3, #100	; 0x64
 8002368:	d901      	bls.n	800236e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800236a:	2303      	movs	r3, #3
 800236c:	e21f      	b.n	80027ae <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
<<<<<<< HEAD
 800236e:	4b61      	ldr	r3, [pc, #388]	; (80024f4 <HAL_RCC_OscConfig+0x280>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002376:	2b00      	cmp	r3, #0
 8002378:	d0f0      	beq.n	800235c <HAL_RCC_OscConfig+0xe8>
 800237a:	e014      	b.n	80023a6 <HAL_RCC_OscConfig+0x132>
=======
 800231a:	4b61      	ldr	r3, [pc, #388]	; (80024a0 <HAL_RCC_OscConfig+0x280>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002322:	2b00      	cmp	r3, #0
 8002324:	d0f0      	beq.n	8002308 <HAL_RCC_OscConfig+0xe8>
 8002326:	e014      	b.n	8002352 <HAL_RCC_OscConfig+0x132>
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
<<<<<<< HEAD
 800237c:	f7fe fdd0 	bl	8000f20 <HAL_GetTick>
 8002380:	6138      	str	r0, [r7, #16]
=======
<<<<<<< HEAD
 800236c:	f7fe fdd0 	bl	8000f10 <HAL_GetTick>
 8002370:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002372:	e008      	b.n	8002386 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002374:	f7fe fdcc 	bl	8000f10 <HAL_GetTick>
 8002378:	4602      	mov	r2, r0
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	1ad3      	subs	r3, r2, r3
 800237e:	2b64      	cmp	r3, #100	; 0x64
 8002380:	d901      	bls.n	8002386 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002382:	2303      	movs	r3, #3
 8002384:	e20b      	b.n	800279e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002386:	4b57      	ldr	r3, [pc, #348]	; (80024e4 <HAL_RCC_OscConfig+0x280>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800238e:	2b00      	cmp	r3, #0
 8002390:	d1f0      	bne.n	8002374 <HAL_RCC_OscConfig+0x110>
 8002392:	e000      	b.n	8002396 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002394:	bf00      	nop
=======
 8002328:	f7fe fde8 	bl	8000efc <HAL_GetTick>
 800232c:	6138      	str	r0, [r7, #16]
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002382:	e008      	b.n	8002396 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002384:	f7fe fdcc 	bl	8000f20 <HAL_GetTick>
 8002388:	4602      	mov	r2, r0
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	2b64      	cmp	r3, #100	; 0x64
 8002390:	d901      	bls.n	8002396 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002392:	2303      	movs	r3, #3
 8002394:	e20b      	b.n	80027ae <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002396:	4b57      	ldr	r3, [pc, #348]	; (80024f4 <HAL_RCC_OscConfig+0x280>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d1f0      	bne.n	8002384 <HAL_RCC_OscConfig+0x110>
 80023a2:	e000      	b.n	80023a6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
<<<<<<< HEAD
 80023a4:	bf00      	nop
=======
 8002350:	bf00      	nop
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
<<<<<<< HEAD
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f003 0302 	and.w	r3, r3, #2
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d069      	beq.n	8002486 <HAL_RCC_OscConfig+0x212>
=======
<<<<<<< HEAD
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f003 0302 	and.w	r3, r3, #2
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d069      	beq.n	8002476 <HAL_RCC_OscConfig+0x212>
=======
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 0302 	and.w	r3, r3, #2
 800235a:	2b00      	cmp	r3, #0
 800235c:	d069      	beq.n	8002432 <HAL_RCC_OscConfig+0x212>
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
<<<<<<< HEAD
 80023b2:	4b50      	ldr	r3, [pc, #320]	; (80024f4 <HAL_RCC_OscConfig+0x280>)
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	f003 030c 	and.w	r3, r3, #12
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d00b      	beq.n	80023d6 <HAL_RCC_OscConfig+0x162>
=======
<<<<<<< HEAD
 80023a2:	4b50      	ldr	r3, [pc, #320]	; (80024e4 <HAL_RCC_OscConfig+0x280>)
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	f003 030c 	and.w	r3, r3, #12
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d00b      	beq.n	80023c6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023ae:	4b4d      	ldr	r3, [pc, #308]	; (80024e4 <HAL_RCC_OscConfig+0x280>)
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	f003 030c 	and.w	r3, r3, #12
 80023b6:	2b08      	cmp	r3, #8
 80023b8:	d11c      	bne.n	80023f4 <HAL_RCC_OscConfig+0x190>
 80023ba:	4b4a      	ldr	r3, [pc, #296]	; (80024e4 <HAL_RCC_OscConfig+0x280>)
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d116      	bne.n	80023f4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023c6:	4b47      	ldr	r3, [pc, #284]	; (80024e4 <HAL_RCC_OscConfig+0x280>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f003 0302 	and.w	r3, r3, #2
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d005      	beq.n	80023de <HAL_RCC_OscConfig+0x17a>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	68db      	ldr	r3, [r3, #12]
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	d001      	beq.n	80023de <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	e1df      	b.n	800279e <HAL_RCC_OscConfig+0x53a>
=======
 800235e:	4b50      	ldr	r3, [pc, #320]	; (80024a0 <HAL_RCC_OscConfig+0x280>)
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	f003 030c 	and.w	r3, r3, #12
 8002366:	2b00      	cmp	r3, #0
 8002368:	d00b      	beq.n	8002382 <HAL_RCC_OscConfig+0x162>
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023be:	4b4d      	ldr	r3, [pc, #308]	; (80024f4 <HAL_RCC_OscConfig+0x280>)
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	f003 030c 	and.w	r3, r3, #12
 80023c6:	2b08      	cmp	r3, #8
 80023c8:	d11c      	bne.n	8002404 <HAL_RCC_OscConfig+0x190>
 80023ca:	4b4a      	ldr	r3, [pc, #296]	; (80024f4 <HAL_RCC_OscConfig+0x280>)
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d116      	bne.n	8002404 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023d6:	4b47      	ldr	r3, [pc, #284]	; (80024f4 <HAL_RCC_OscConfig+0x280>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f003 0302 	and.w	r3, r3, #2
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d005      	beq.n	80023ee <HAL_RCC_OscConfig+0x17a>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	68db      	ldr	r3, [r3, #12]
 80023e6:	2b01      	cmp	r3, #1
 80023e8:	d001      	beq.n	80023ee <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
<<<<<<< HEAD
 80023ea:	2301      	movs	r3, #1
 80023ec:	e1df      	b.n	80027ae <HAL_RCC_OscConfig+0x53a>
=======
 8002396:	2301      	movs	r3, #1
 8002398:	e1df      	b.n	800275a <HAL_RCC_OscConfig+0x53a>
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
<<<<<<< HEAD
 80023ee:	4b41      	ldr	r3, [pc, #260]	; (80024f4 <HAL_RCC_OscConfig+0x280>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	691b      	ldr	r3, [r3, #16]
 80023fa:	00db      	lsls	r3, r3, #3
 80023fc:	493d      	ldr	r1, [pc, #244]	; (80024f4 <HAL_RCC_OscConfig+0x280>)
 80023fe:	4313      	orrs	r3, r2
 8002400:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002402:	e040      	b.n	8002486 <HAL_RCC_OscConfig+0x212>
=======
<<<<<<< HEAD
 80023de:	4b41      	ldr	r3, [pc, #260]	; (80024e4 <HAL_RCC_OscConfig+0x280>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	691b      	ldr	r3, [r3, #16]
 80023ea:	00db      	lsls	r3, r3, #3
 80023ec:	493d      	ldr	r1, [pc, #244]	; (80024e4 <HAL_RCC_OscConfig+0x280>)
 80023ee:	4313      	orrs	r3, r2
 80023f0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023f2:	e040      	b.n	8002476 <HAL_RCC_OscConfig+0x212>
=======
 800239a:	4b41      	ldr	r3, [pc, #260]	; (80024a0 <HAL_RCC_OscConfig+0x280>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	691b      	ldr	r3, [r3, #16]
 80023a6:	00db      	lsls	r3, r3, #3
 80023a8:	493d      	ldr	r1, [pc, #244]	; (80024a0 <HAL_RCC_OscConfig+0x280>)
 80023aa:	4313      	orrs	r3, r2
 80023ac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023ae:	e040      	b.n	8002432 <HAL_RCC_OscConfig+0x212>
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
<<<<<<< HEAD
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d023      	beq.n	8002454 <HAL_RCC_OscConfig+0x1e0>
=======
<<<<<<< HEAD
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	68db      	ldr	r3, [r3, #12]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d023      	beq.n	8002444 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023fc:	4b39      	ldr	r3, [pc, #228]	; (80024e4 <HAL_RCC_OscConfig+0x280>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a38      	ldr	r2, [pc, #224]	; (80024e4 <HAL_RCC_OscConfig+0x280>)
 8002402:	f043 0301 	orr.w	r3, r3, #1
 8002406:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002408:	f7fe fd82 	bl	8000f10 <HAL_GetTick>
 800240c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800240e:	e008      	b.n	8002422 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002410:	f7fe fd7e 	bl	8000f10 <HAL_GetTick>
 8002414:	4602      	mov	r2, r0
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	2b02      	cmp	r3, #2
 800241c:	d901      	bls.n	8002422 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800241e:	2303      	movs	r3, #3
 8002420:	e1bd      	b.n	800279e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002422:	4b30      	ldr	r3, [pc, #192]	; (80024e4 <HAL_RCC_OscConfig+0x280>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 0302 	and.w	r3, r3, #2
 800242a:	2b00      	cmp	r3, #0
 800242c:	d0f0      	beq.n	8002410 <HAL_RCC_OscConfig+0x1ac>
=======
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	68db      	ldr	r3, [r3, #12]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d023      	beq.n	8002400 <HAL_RCC_OscConfig+0x1e0>
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800240c:	4b39      	ldr	r3, [pc, #228]	; (80024f4 <HAL_RCC_OscConfig+0x280>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a38      	ldr	r2, [pc, #224]	; (80024f4 <HAL_RCC_OscConfig+0x280>)
 8002412:	f043 0301 	orr.w	r3, r3, #1
 8002416:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002418:	f7fe fd82 	bl	8000f20 <HAL_GetTick>
 800241c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800241e:	e008      	b.n	8002432 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002420:	f7fe fd7e 	bl	8000f20 <HAL_GetTick>
 8002424:	4602      	mov	r2, r0
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	2b02      	cmp	r3, #2
 800242c:	d901      	bls.n	8002432 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800242e:	2303      	movs	r3, #3
 8002430:	e1bd      	b.n	80027ae <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
<<<<<<< HEAD
 8002432:	4b30      	ldr	r3, [pc, #192]	; (80024f4 <HAL_RCC_OscConfig+0x280>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 0302 	and.w	r3, r3, #2
 800243a:	2b00      	cmp	r3, #0
 800243c:	d0f0      	beq.n	8002420 <HAL_RCC_OscConfig+0x1ac>
=======
 80023de:	4b30      	ldr	r3, [pc, #192]	; (80024a0 <HAL_RCC_OscConfig+0x280>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f003 0302 	and.w	r3, r3, #2
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d0f0      	beq.n	80023cc <HAL_RCC_OscConfig+0x1ac>
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
<<<<<<< HEAD
 800243e:	4b2d      	ldr	r3, [pc, #180]	; (80024f4 <HAL_RCC_OscConfig+0x280>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	691b      	ldr	r3, [r3, #16]
 800244a:	00db      	lsls	r3, r3, #3
 800244c:	4929      	ldr	r1, [pc, #164]	; (80024f4 <HAL_RCC_OscConfig+0x280>)
 800244e:	4313      	orrs	r3, r2
 8002450:	600b      	str	r3, [r1, #0]
 8002452:	e018      	b.n	8002486 <HAL_RCC_OscConfig+0x212>
=======
<<<<<<< HEAD
 800242e:	4b2d      	ldr	r3, [pc, #180]	; (80024e4 <HAL_RCC_OscConfig+0x280>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	691b      	ldr	r3, [r3, #16]
 800243a:	00db      	lsls	r3, r3, #3
 800243c:	4929      	ldr	r1, [pc, #164]	; (80024e4 <HAL_RCC_OscConfig+0x280>)
 800243e:	4313      	orrs	r3, r2
 8002440:	600b      	str	r3, [r1, #0]
 8002442:	e018      	b.n	8002476 <HAL_RCC_OscConfig+0x212>
=======
 80023ea:	4b2d      	ldr	r3, [pc, #180]	; (80024a0 <HAL_RCC_OscConfig+0x280>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	691b      	ldr	r3, [r3, #16]
 80023f6:	00db      	lsls	r3, r3, #3
 80023f8:	4929      	ldr	r1, [pc, #164]	; (80024a0 <HAL_RCC_OscConfig+0x280>)
 80023fa:	4313      	orrs	r3, r2
 80023fc:	600b      	str	r3, [r1, #0]
 80023fe:	e018      	b.n	8002432 <HAL_RCC_OscConfig+0x212>
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
<<<<<<< HEAD
 8002454:	4b27      	ldr	r3, [pc, #156]	; (80024f4 <HAL_RCC_OscConfig+0x280>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a26      	ldr	r2, [pc, #152]	; (80024f4 <HAL_RCC_OscConfig+0x280>)
 800245a:	f023 0301 	bic.w	r3, r3, #1
 800245e:	6013      	str	r3, [r2, #0]
=======
<<<<<<< HEAD
 8002444:	4b27      	ldr	r3, [pc, #156]	; (80024e4 <HAL_RCC_OscConfig+0x280>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a26      	ldr	r2, [pc, #152]	; (80024e4 <HAL_RCC_OscConfig+0x280>)
 800244a:	f023 0301 	bic.w	r3, r3, #1
 800244e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002450:	f7fe fd5e 	bl	8000f10 <HAL_GetTick>
 8002454:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002456:	e008      	b.n	800246a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002458:	f7fe fd5a 	bl	8000f10 <HAL_GetTick>
 800245c:	4602      	mov	r2, r0
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	2b02      	cmp	r3, #2
 8002464:	d901      	bls.n	800246a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002466:	2303      	movs	r3, #3
 8002468:	e199      	b.n	800279e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800246a:	4b1e      	ldr	r3, [pc, #120]	; (80024e4 <HAL_RCC_OscConfig+0x280>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f003 0302 	and.w	r3, r3, #2
 8002472:	2b00      	cmp	r3, #0
 8002474:	d1f0      	bne.n	8002458 <HAL_RCC_OscConfig+0x1f4>
=======
 8002400:	4b27      	ldr	r3, [pc, #156]	; (80024a0 <HAL_RCC_OscConfig+0x280>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a26      	ldr	r2, [pc, #152]	; (80024a0 <HAL_RCC_OscConfig+0x280>)
 8002406:	f023 0301 	bic.w	r3, r3, #1
 800240a:	6013      	str	r3, [r2, #0]
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002460:	f7fe fd5e 	bl	8000f20 <HAL_GetTick>
 8002464:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002466:	e008      	b.n	800247a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002468:	f7fe fd5a 	bl	8000f20 <HAL_GetTick>
 800246c:	4602      	mov	r2, r0
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	1ad3      	subs	r3, r2, r3
 8002472:	2b02      	cmp	r3, #2
 8002474:	d901      	bls.n	800247a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002476:	2303      	movs	r3, #3
 8002478:	e199      	b.n	80027ae <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
<<<<<<< HEAD
 800247a:	4b1e      	ldr	r3, [pc, #120]	; (80024f4 <HAL_RCC_OscConfig+0x280>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 0302 	and.w	r3, r3, #2
 8002482:	2b00      	cmp	r3, #0
 8002484:	d1f0      	bne.n	8002468 <HAL_RCC_OscConfig+0x1f4>
=======
 8002426:	4b1e      	ldr	r3, [pc, #120]	; (80024a0 <HAL_RCC_OscConfig+0x280>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 0302 	and.w	r3, r3, #2
 800242e:	2b00      	cmp	r3, #0
 8002430:	d1f0      	bne.n	8002414 <HAL_RCC_OscConfig+0x1f4>
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
<<<<<<< HEAD
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f003 0308 	and.w	r3, r3, #8
 800248e:	2b00      	cmp	r3, #0
 8002490:	d038      	beq.n	8002504 <HAL_RCC_OscConfig+0x290>
=======
<<<<<<< HEAD
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 0308 	and.w	r3, r3, #8
 800247e:	2b00      	cmp	r3, #0
 8002480:	d038      	beq.n	80024f4 <HAL_RCC_OscConfig+0x290>
=======
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 0308 	and.w	r3, r3, #8
 800243a:	2b00      	cmp	r3, #0
 800243c:	d038      	beq.n	80024b0 <HAL_RCC_OscConfig+0x290>
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
<<<<<<< HEAD
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	695b      	ldr	r3, [r3, #20]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d019      	beq.n	80024ce <HAL_RCC_OscConfig+0x25a>
=======
<<<<<<< HEAD
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	695b      	ldr	r3, [r3, #20]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d019      	beq.n	80024be <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800248a:	4b16      	ldr	r3, [pc, #88]	; (80024e4 <HAL_RCC_OscConfig+0x280>)
 800248c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800248e:	4a15      	ldr	r2, [pc, #84]	; (80024e4 <HAL_RCC_OscConfig+0x280>)
 8002490:	f043 0301 	orr.w	r3, r3, #1
 8002494:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002496:	f7fe fd3b 	bl	8000f10 <HAL_GetTick>
 800249a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800249c:	e008      	b.n	80024b0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800249e:	f7fe fd37 	bl	8000f10 <HAL_GetTick>
 80024a2:	4602      	mov	r2, r0
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	1ad3      	subs	r3, r2, r3
 80024a8:	2b02      	cmp	r3, #2
 80024aa:	d901      	bls.n	80024b0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80024ac:	2303      	movs	r3, #3
 80024ae:	e176      	b.n	800279e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024b0:	4b0c      	ldr	r3, [pc, #48]	; (80024e4 <HAL_RCC_OscConfig+0x280>)
 80024b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024b4:	f003 0302 	and.w	r3, r3, #2
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d0f0      	beq.n	800249e <HAL_RCC_OscConfig+0x23a>
 80024bc:	e01a      	b.n	80024f4 <HAL_RCC_OscConfig+0x290>
=======
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	695b      	ldr	r3, [r3, #20]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d019      	beq.n	800247a <HAL_RCC_OscConfig+0x25a>
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800249a:	4b16      	ldr	r3, [pc, #88]	; (80024f4 <HAL_RCC_OscConfig+0x280>)
 800249c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800249e:	4a15      	ldr	r2, [pc, #84]	; (80024f4 <HAL_RCC_OscConfig+0x280>)
 80024a0:	f043 0301 	orr.w	r3, r3, #1
 80024a4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024a6:	f7fe fd3b 	bl	8000f20 <HAL_GetTick>
 80024aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024ac:	e008      	b.n	80024c0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024ae:	f7fe fd37 	bl	8000f20 <HAL_GetTick>
 80024b2:	4602      	mov	r2, r0
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	1ad3      	subs	r3, r2, r3
 80024b8:	2b02      	cmp	r3, #2
 80024ba:	d901      	bls.n	80024c0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80024bc:	2303      	movs	r3, #3
 80024be:	e176      	b.n	80027ae <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
<<<<<<< HEAD
 80024c0:	4b0c      	ldr	r3, [pc, #48]	; (80024f4 <HAL_RCC_OscConfig+0x280>)
 80024c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024c4:	f003 0302 	and.w	r3, r3, #2
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d0f0      	beq.n	80024ae <HAL_RCC_OscConfig+0x23a>
 80024cc:	e01a      	b.n	8002504 <HAL_RCC_OscConfig+0x290>
=======
 800246c:	4b0c      	ldr	r3, [pc, #48]	; (80024a0 <HAL_RCC_OscConfig+0x280>)
 800246e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002470:	f003 0302 	and.w	r3, r3, #2
 8002474:	2b00      	cmp	r3, #0
 8002476:	d0f0      	beq.n	800245a <HAL_RCC_OscConfig+0x23a>
 8002478:	e01a      	b.n	80024b0 <HAL_RCC_OscConfig+0x290>
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
<<<<<<< HEAD
 80024ce:	4b09      	ldr	r3, [pc, #36]	; (80024f4 <HAL_RCC_OscConfig+0x280>)
 80024d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024d2:	4a08      	ldr	r2, [pc, #32]	; (80024f4 <HAL_RCC_OscConfig+0x280>)
 80024d4:	f023 0301 	bic.w	r3, r3, #1
 80024d8:	6753      	str	r3, [r2, #116]	; 0x74
=======
<<<<<<< HEAD
 80024be:	4b09      	ldr	r3, [pc, #36]	; (80024e4 <HAL_RCC_OscConfig+0x280>)
 80024c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024c2:	4a08      	ldr	r2, [pc, #32]	; (80024e4 <HAL_RCC_OscConfig+0x280>)
 80024c4:	f023 0301 	bic.w	r3, r3, #1
 80024c8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024ca:	f7fe fd21 	bl	8000f10 <HAL_GetTick>
 80024ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024d0:	e00a      	b.n	80024e8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024d2:	f7fe fd1d 	bl	8000f10 <HAL_GetTick>
 80024d6:	4602      	mov	r2, r0
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	1ad3      	subs	r3, r2, r3
 80024dc:	2b02      	cmp	r3, #2
 80024de:	d903      	bls.n	80024e8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80024e0:	2303      	movs	r3, #3
 80024e2:	e15c      	b.n	800279e <HAL_RCC_OscConfig+0x53a>
 80024e4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024e8:	4b91      	ldr	r3, [pc, #580]	; (8002730 <HAL_RCC_OscConfig+0x4cc>)
 80024ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024ec:	f003 0302 	and.w	r3, r3, #2
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d1ee      	bne.n	80024d2 <HAL_RCC_OscConfig+0x26e>
=======
 800247a:	4b09      	ldr	r3, [pc, #36]	; (80024a0 <HAL_RCC_OscConfig+0x280>)
 800247c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800247e:	4a08      	ldr	r2, [pc, #32]	; (80024a0 <HAL_RCC_OscConfig+0x280>)
 8002480:	f023 0301 	bic.w	r3, r3, #1
 8002484:	6753      	str	r3, [r2, #116]	; 0x74
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024da:	f7fe fd21 	bl	8000f20 <HAL_GetTick>
 80024de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024e0:	e00a      	b.n	80024f8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024e2:	f7fe fd1d 	bl	8000f20 <HAL_GetTick>
 80024e6:	4602      	mov	r2, r0
 80024e8:	693b      	ldr	r3, [r7, #16]
 80024ea:	1ad3      	subs	r3, r2, r3
 80024ec:	2b02      	cmp	r3, #2
 80024ee:	d903      	bls.n	80024f8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80024f0:	2303      	movs	r3, #3
 80024f2:	e15c      	b.n	80027ae <HAL_RCC_OscConfig+0x53a>
 80024f4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
<<<<<<< HEAD
 80024f8:	4b91      	ldr	r3, [pc, #580]	; (8002740 <HAL_RCC_OscConfig+0x4cc>)
 80024fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024fc:	f003 0302 	and.w	r3, r3, #2
 8002500:	2b00      	cmp	r3, #0
 8002502:	d1ee      	bne.n	80024e2 <HAL_RCC_OscConfig+0x26e>
=======
 80024a4:	4b91      	ldr	r3, [pc, #580]	; (80026ec <HAL_RCC_OscConfig+0x4cc>)
 80024a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024a8:	f003 0302 	and.w	r3, r3, #2
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d1ee      	bne.n	800248e <HAL_RCC_OscConfig+0x26e>
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
<<<<<<< HEAD
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f003 0304 	and.w	r3, r3, #4
 800250c:	2b00      	cmp	r3, #0
 800250e:	f000 80a4 	beq.w	800265a <HAL_RCC_OscConfig+0x3e6>
=======
<<<<<<< HEAD
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f003 0304 	and.w	r3, r3, #4
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	f000 80a4 	beq.w	800264a <HAL_RCC_OscConfig+0x3e6>
=======
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f003 0304 	and.w	r3, r3, #4
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	f000 80a4 	beq.w	8002606 <HAL_RCC_OscConfig+0x3e6>
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
<<<<<<< HEAD
 8002512:	4b8b      	ldr	r3, [pc, #556]	; (8002740 <HAL_RCC_OscConfig+0x4cc>)
 8002514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002516:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800251a:	2b00      	cmp	r3, #0
 800251c:	d10d      	bne.n	800253a <HAL_RCC_OscConfig+0x2c6>
=======
<<<<<<< HEAD
 8002502:	4b8b      	ldr	r3, [pc, #556]	; (8002730 <HAL_RCC_OscConfig+0x4cc>)
 8002504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002506:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800250a:	2b00      	cmp	r3, #0
 800250c:	d10d      	bne.n	800252a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800250e:	4b88      	ldr	r3, [pc, #544]	; (8002730 <HAL_RCC_OscConfig+0x4cc>)
 8002510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002512:	4a87      	ldr	r2, [pc, #540]	; (8002730 <HAL_RCC_OscConfig+0x4cc>)
 8002514:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002518:	6413      	str	r3, [r2, #64]	; 0x40
 800251a:	4b85      	ldr	r3, [pc, #532]	; (8002730 <HAL_RCC_OscConfig+0x4cc>)
 800251c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002522:	60bb      	str	r3, [r7, #8]
 8002524:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002526:	2301      	movs	r3, #1
 8002528:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800252a:	4b82      	ldr	r3, [pc, #520]	; (8002734 <HAL_RCC_OscConfig+0x4d0>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002532:	2b00      	cmp	r3, #0
 8002534:	d118      	bne.n	8002568 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002536:	4b7f      	ldr	r3, [pc, #508]	; (8002734 <HAL_RCC_OscConfig+0x4d0>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a7e      	ldr	r2, [pc, #504]	; (8002734 <HAL_RCC_OscConfig+0x4d0>)
 800253c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002540:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002542:	f7fe fce5 	bl	8000f10 <HAL_GetTick>
 8002546:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002548:	e008      	b.n	800255c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800254a:	f7fe fce1 	bl	8000f10 <HAL_GetTick>
 800254e:	4602      	mov	r2, r0
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	1ad3      	subs	r3, r2, r3
 8002554:	2b64      	cmp	r3, #100	; 0x64
 8002556:	d901      	bls.n	800255c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002558:	2303      	movs	r3, #3
 800255a:	e120      	b.n	800279e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800255c:	4b75      	ldr	r3, [pc, #468]	; (8002734 <HAL_RCC_OscConfig+0x4d0>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002564:	2b00      	cmp	r3, #0
 8002566:	d0f0      	beq.n	800254a <HAL_RCC_OscConfig+0x2e6>
=======
 80024be:	4b8b      	ldr	r3, [pc, #556]	; (80026ec <HAL_RCC_OscConfig+0x4cc>)
 80024c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d10d      	bne.n	80024e6 <HAL_RCC_OscConfig+0x2c6>
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800251e:	4b88      	ldr	r3, [pc, #544]	; (8002740 <HAL_RCC_OscConfig+0x4cc>)
 8002520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002522:	4a87      	ldr	r2, [pc, #540]	; (8002740 <HAL_RCC_OscConfig+0x4cc>)
 8002524:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002528:	6413      	str	r3, [r2, #64]	; 0x40
 800252a:	4b85      	ldr	r3, [pc, #532]	; (8002740 <HAL_RCC_OscConfig+0x4cc>)
 800252c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800252e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002532:	60bb      	str	r3, [r7, #8]
 8002534:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002536:	2301      	movs	r3, #1
 8002538:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800253a:	4b82      	ldr	r3, [pc, #520]	; (8002744 <HAL_RCC_OscConfig+0x4d0>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002542:	2b00      	cmp	r3, #0
 8002544:	d118      	bne.n	8002578 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002546:	4b7f      	ldr	r3, [pc, #508]	; (8002744 <HAL_RCC_OscConfig+0x4d0>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a7e      	ldr	r2, [pc, #504]	; (8002744 <HAL_RCC_OscConfig+0x4d0>)
 800254c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002550:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002552:	f7fe fce5 	bl	8000f20 <HAL_GetTick>
 8002556:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002558:	e008      	b.n	800256c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800255a:	f7fe fce1 	bl	8000f20 <HAL_GetTick>
 800255e:	4602      	mov	r2, r0
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	1ad3      	subs	r3, r2, r3
 8002564:	2b64      	cmp	r3, #100	; 0x64
 8002566:	d901      	bls.n	800256c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002568:	2303      	movs	r3, #3
 800256a:	e120      	b.n	80027ae <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
<<<<<<< HEAD
 800256c:	4b75      	ldr	r3, [pc, #468]	; (8002744 <HAL_RCC_OscConfig+0x4d0>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002574:	2b00      	cmp	r3, #0
 8002576:	d0f0      	beq.n	800255a <HAL_RCC_OscConfig+0x2e6>
=======
 8002518:	4b75      	ldr	r3, [pc, #468]	; (80026f0 <HAL_RCC_OscConfig+0x4d0>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002520:	2b00      	cmp	r3, #0
 8002522:	d0f0      	beq.n	8002506 <HAL_RCC_OscConfig+0x2e6>
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
<<<<<<< HEAD
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	2b01      	cmp	r3, #1
 800257e:	d106      	bne.n	800258e <HAL_RCC_OscConfig+0x31a>
 8002580:	4b6f      	ldr	r3, [pc, #444]	; (8002740 <HAL_RCC_OscConfig+0x4cc>)
 8002582:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002584:	4a6e      	ldr	r2, [pc, #440]	; (8002740 <HAL_RCC_OscConfig+0x4cc>)
 8002586:	f043 0301 	orr.w	r3, r3, #1
 800258a:	6713      	str	r3, [r2, #112]	; 0x70
 800258c:	e02d      	b.n	80025ea <HAL_RCC_OscConfig+0x376>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d10c      	bne.n	80025b0 <HAL_RCC_OscConfig+0x33c>
 8002596:	4b6a      	ldr	r3, [pc, #424]	; (8002740 <HAL_RCC_OscConfig+0x4cc>)
 8002598:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800259a:	4a69      	ldr	r2, [pc, #420]	; (8002740 <HAL_RCC_OscConfig+0x4cc>)
 800259c:	f023 0301 	bic.w	r3, r3, #1
 80025a0:	6713      	str	r3, [r2, #112]	; 0x70
 80025a2:	4b67      	ldr	r3, [pc, #412]	; (8002740 <HAL_RCC_OscConfig+0x4cc>)
 80025a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025a6:	4a66      	ldr	r2, [pc, #408]	; (8002740 <HAL_RCC_OscConfig+0x4cc>)
 80025a8:	f023 0304 	bic.w	r3, r3, #4
 80025ac:	6713      	str	r3, [r2, #112]	; 0x70
 80025ae:	e01c      	b.n	80025ea <HAL_RCC_OscConfig+0x376>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	2b05      	cmp	r3, #5
 80025b6:	d10c      	bne.n	80025d2 <HAL_RCC_OscConfig+0x35e>
 80025b8:	4b61      	ldr	r3, [pc, #388]	; (8002740 <HAL_RCC_OscConfig+0x4cc>)
 80025ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025bc:	4a60      	ldr	r2, [pc, #384]	; (8002740 <HAL_RCC_OscConfig+0x4cc>)
 80025be:	f043 0304 	orr.w	r3, r3, #4
 80025c2:	6713      	str	r3, [r2, #112]	; 0x70
 80025c4:	4b5e      	ldr	r3, [pc, #376]	; (8002740 <HAL_RCC_OscConfig+0x4cc>)
 80025c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025c8:	4a5d      	ldr	r2, [pc, #372]	; (8002740 <HAL_RCC_OscConfig+0x4cc>)
 80025ca:	f043 0301 	orr.w	r3, r3, #1
 80025ce:	6713      	str	r3, [r2, #112]	; 0x70
 80025d0:	e00b      	b.n	80025ea <HAL_RCC_OscConfig+0x376>
 80025d2:	4b5b      	ldr	r3, [pc, #364]	; (8002740 <HAL_RCC_OscConfig+0x4cc>)
 80025d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025d6:	4a5a      	ldr	r2, [pc, #360]	; (8002740 <HAL_RCC_OscConfig+0x4cc>)
 80025d8:	f023 0301 	bic.w	r3, r3, #1
 80025dc:	6713      	str	r3, [r2, #112]	; 0x70
 80025de:	4b58      	ldr	r3, [pc, #352]	; (8002740 <HAL_RCC_OscConfig+0x4cc>)
 80025e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025e2:	4a57      	ldr	r2, [pc, #348]	; (8002740 <HAL_RCC_OscConfig+0x4cc>)
 80025e4:	f023 0304 	bic.w	r3, r3, #4
 80025e8:	6713      	str	r3, [r2, #112]	; 0x70
=======
<<<<<<< HEAD
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	2b01      	cmp	r3, #1
 800256e:	d106      	bne.n	800257e <HAL_RCC_OscConfig+0x31a>
 8002570:	4b6f      	ldr	r3, [pc, #444]	; (8002730 <HAL_RCC_OscConfig+0x4cc>)
 8002572:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002574:	4a6e      	ldr	r2, [pc, #440]	; (8002730 <HAL_RCC_OscConfig+0x4cc>)
 8002576:	f043 0301 	orr.w	r3, r3, #1
 800257a:	6713      	str	r3, [r2, #112]	; 0x70
 800257c:	e02d      	b.n	80025da <HAL_RCC_OscConfig+0x376>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d10c      	bne.n	80025a0 <HAL_RCC_OscConfig+0x33c>
 8002586:	4b6a      	ldr	r3, [pc, #424]	; (8002730 <HAL_RCC_OscConfig+0x4cc>)
 8002588:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800258a:	4a69      	ldr	r2, [pc, #420]	; (8002730 <HAL_RCC_OscConfig+0x4cc>)
 800258c:	f023 0301 	bic.w	r3, r3, #1
 8002590:	6713      	str	r3, [r2, #112]	; 0x70
 8002592:	4b67      	ldr	r3, [pc, #412]	; (8002730 <HAL_RCC_OscConfig+0x4cc>)
 8002594:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002596:	4a66      	ldr	r2, [pc, #408]	; (8002730 <HAL_RCC_OscConfig+0x4cc>)
 8002598:	f023 0304 	bic.w	r3, r3, #4
 800259c:	6713      	str	r3, [r2, #112]	; 0x70
 800259e:	e01c      	b.n	80025da <HAL_RCC_OscConfig+0x376>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	689b      	ldr	r3, [r3, #8]
 80025a4:	2b05      	cmp	r3, #5
 80025a6:	d10c      	bne.n	80025c2 <HAL_RCC_OscConfig+0x35e>
 80025a8:	4b61      	ldr	r3, [pc, #388]	; (8002730 <HAL_RCC_OscConfig+0x4cc>)
 80025aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025ac:	4a60      	ldr	r2, [pc, #384]	; (8002730 <HAL_RCC_OscConfig+0x4cc>)
 80025ae:	f043 0304 	orr.w	r3, r3, #4
 80025b2:	6713      	str	r3, [r2, #112]	; 0x70
 80025b4:	4b5e      	ldr	r3, [pc, #376]	; (8002730 <HAL_RCC_OscConfig+0x4cc>)
 80025b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025b8:	4a5d      	ldr	r2, [pc, #372]	; (8002730 <HAL_RCC_OscConfig+0x4cc>)
 80025ba:	f043 0301 	orr.w	r3, r3, #1
 80025be:	6713      	str	r3, [r2, #112]	; 0x70
 80025c0:	e00b      	b.n	80025da <HAL_RCC_OscConfig+0x376>
 80025c2:	4b5b      	ldr	r3, [pc, #364]	; (8002730 <HAL_RCC_OscConfig+0x4cc>)
 80025c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025c6:	4a5a      	ldr	r2, [pc, #360]	; (8002730 <HAL_RCC_OscConfig+0x4cc>)
 80025c8:	f023 0301 	bic.w	r3, r3, #1
 80025cc:	6713      	str	r3, [r2, #112]	; 0x70
 80025ce:	4b58      	ldr	r3, [pc, #352]	; (8002730 <HAL_RCC_OscConfig+0x4cc>)
 80025d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025d2:	4a57      	ldr	r2, [pc, #348]	; (8002730 <HAL_RCC_OscConfig+0x4cc>)
 80025d4:	f023 0304 	bic.w	r3, r3, #4
 80025d8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d015      	beq.n	800260e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025e2:	f7fe fc95 	bl	8000f10 <HAL_GetTick>
 80025e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025e8:	e00a      	b.n	8002600 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025ea:	f7fe fc91 	bl	8000f10 <HAL_GetTick>
 80025ee:	4602      	mov	r2, r0
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	1ad3      	subs	r3, r2, r3
 80025f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d901      	bls.n	8002600 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80025fc:	2303      	movs	r3, #3
 80025fe:	e0ce      	b.n	800279e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002600:	4b4b      	ldr	r3, [pc, #300]	; (8002730 <HAL_RCC_OscConfig+0x4cc>)
 8002602:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002604:	f003 0302 	and.w	r3, r3, #2
 8002608:	2b00      	cmp	r3, #0
 800260a:	d0ee      	beq.n	80025ea <HAL_RCC_OscConfig+0x386>
 800260c:	e014      	b.n	8002638 <HAL_RCC_OscConfig+0x3d4>
=======
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	2b01      	cmp	r3, #1
 800252a:	d106      	bne.n	800253a <HAL_RCC_OscConfig+0x31a>
 800252c:	4b6f      	ldr	r3, [pc, #444]	; (80026ec <HAL_RCC_OscConfig+0x4cc>)
 800252e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002530:	4a6e      	ldr	r2, [pc, #440]	; (80026ec <HAL_RCC_OscConfig+0x4cc>)
 8002532:	f043 0301 	orr.w	r3, r3, #1
 8002536:	6713      	str	r3, [r2, #112]	; 0x70
 8002538:	e02d      	b.n	8002596 <HAL_RCC_OscConfig+0x376>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d10c      	bne.n	800255c <HAL_RCC_OscConfig+0x33c>
 8002542:	4b6a      	ldr	r3, [pc, #424]	; (80026ec <HAL_RCC_OscConfig+0x4cc>)
 8002544:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002546:	4a69      	ldr	r2, [pc, #420]	; (80026ec <HAL_RCC_OscConfig+0x4cc>)
 8002548:	f023 0301 	bic.w	r3, r3, #1
 800254c:	6713      	str	r3, [r2, #112]	; 0x70
 800254e:	4b67      	ldr	r3, [pc, #412]	; (80026ec <HAL_RCC_OscConfig+0x4cc>)
 8002550:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002552:	4a66      	ldr	r2, [pc, #408]	; (80026ec <HAL_RCC_OscConfig+0x4cc>)
 8002554:	f023 0304 	bic.w	r3, r3, #4
 8002558:	6713      	str	r3, [r2, #112]	; 0x70
 800255a:	e01c      	b.n	8002596 <HAL_RCC_OscConfig+0x376>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	2b05      	cmp	r3, #5
 8002562:	d10c      	bne.n	800257e <HAL_RCC_OscConfig+0x35e>
 8002564:	4b61      	ldr	r3, [pc, #388]	; (80026ec <HAL_RCC_OscConfig+0x4cc>)
 8002566:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002568:	4a60      	ldr	r2, [pc, #384]	; (80026ec <HAL_RCC_OscConfig+0x4cc>)
 800256a:	f043 0304 	orr.w	r3, r3, #4
 800256e:	6713      	str	r3, [r2, #112]	; 0x70
 8002570:	4b5e      	ldr	r3, [pc, #376]	; (80026ec <HAL_RCC_OscConfig+0x4cc>)
 8002572:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002574:	4a5d      	ldr	r2, [pc, #372]	; (80026ec <HAL_RCC_OscConfig+0x4cc>)
 8002576:	f043 0301 	orr.w	r3, r3, #1
 800257a:	6713      	str	r3, [r2, #112]	; 0x70
 800257c:	e00b      	b.n	8002596 <HAL_RCC_OscConfig+0x376>
 800257e:	4b5b      	ldr	r3, [pc, #364]	; (80026ec <HAL_RCC_OscConfig+0x4cc>)
 8002580:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002582:	4a5a      	ldr	r2, [pc, #360]	; (80026ec <HAL_RCC_OscConfig+0x4cc>)
 8002584:	f023 0301 	bic.w	r3, r3, #1
 8002588:	6713      	str	r3, [r2, #112]	; 0x70
 800258a:	4b58      	ldr	r3, [pc, #352]	; (80026ec <HAL_RCC_OscConfig+0x4cc>)
 800258c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800258e:	4a57      	ldr	r2, [pc, #348]	; (80026ec <HAL_RCC_OscConfig+0x4cc>)
 8002590:	f023 0304 	bic.w	r3, r3, #4
 8002594:	6713      	str	r3, [r2, #112]	; 0x70
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d015      	beq.n	800261e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025f2:	f7fe fc95 	bl	8000f20 <HAL_GetTick>
 80025f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025f8:	e00a      	b.n	8002610 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025fa:	f7fe fc91 	bl	8000f20 <HAL_GetTick>
 80025fe:	4602      	mov	r2, r0
 8002600:	693b      	ldr	r3, [r7, #16]
 8002602:	1ad3      	subs	r3, r2, r3
 8002604:	f241 3288 	movw	r2, #5000	; 0x1388
 8002608:	4293      	cmp	r3, r2
 800260a:	d901      	bls.n	8002610 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800260c:	2303      	movs	r3, #3
 800260e:	e0ce      	b.n	80027ae <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
<<<<<<< HEAD
 8002610:	4b4b      	ldr	r3, [pc, #300]	; (8002740 <HAL_RCC_OscConfig+0x4cc>)
 8002612:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002614:	f003 0302 	and.w	r3, r3, #2
 8002618:	2b00      	cmp	r3, #0
 800261a:	d0ee      	beq.n	80025fa <HAL_RCC_OscConfig+0x386>
 800261c:	e014      	b.n	8002648 <HAL_RCC_OscConfig+0x3d4>
=======
 80025bc:	4b4b      	ldr	r3, [pc, #300]	; (80026ec <HAL_RCC_OscConfig+0x4cc>)
 80025be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025c0:	f003 0302 	and.w	r3, r3, #2
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d0ee      	beq.n	80025a6 <HAL_RCC_OscConfig+0x386>
 80025c8:	e014      	b.n	80025f4 <HAL_RCC_OscConfig+0x3d4>
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
<<<<<<< HEAD
 800261e:	f7fe fc7f 	bl	8000f20 <HAL_GetTick>
 8002622:	6138      	str	r0, [r7, #16]
=======
<<<<<<< HEAD
 800260e:	f7fe fc7f 	bl	8000f10 <HAL_GetTick>
 8002612:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002614:	e00a      	b.n	800262c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002616:	f7fe fc7b 	bl	8000f10 <HAL_GetTick>
 800261a:	4602      	mov	r2, r0
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	1ad3      	subs	r3, r2, r3
 8002620:	f241 3288 	movw	r2, #5000	; 0x1388
 8002624:	4293      	cmp	r3, r2
 8002626:	d901      	bls.n	800262c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002628:	2303      	movs	r3, #3
 800262a:	e0b8      	b.n	800279e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800262c:	4b40      	ldr	r3, [pc, #256]	; (8002730 <HAL_RCC_OscConfig+0x4cc>)
 800262e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002630:	f003 0302 	and.w	r3, r3, #2
 8002634:	2b00      	cmp	r3, #0
 8002636:	d1ee      	bne.n	8002616 <HAL_RCC_OscConfig+0x3b2>
=======
 80025ca:	f7fe fc97 	bl	8000efc <HAL_GetTick>
 80025ce:	6138      	str	r0, [r7, #16]
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002624:	e00a      	b.n	800263c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002626:	f7fe fc7b 	bl	8000f20 <HAL_GetTick>
 800262a:	4602      	mov	r2, r0
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	1ad3      	subs	r3, r2, r3
 8002630:	f241 3288 	movw	r2, #5000	; 0x1388
 8002634:	4293      	cmp	r3, r2
 8002636:	d901      	bls.n	800263c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002638:	2303      	movs	r3, #3
 800263a:	e0b8      	b.n	80027ae <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
<<<<<<< HEAD
 800263c:	4b40      	ldr	r3, [pc, #256]	; (8002740 <HAL_RCC_OscConfig+0x4cc>)
 800263e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002640:	f003 0302 	and.w	r3, r3, #2
 8002644:	2b00      	cmp	r3, #0
 8002646:	d1ee      	bne.n	8002626 <HAL_RCC_OscConfig+0x3b2>
=======
 80025e8:	4b40      	ldr	r3, [pc, #256]	; (80026ec <HAL_RCC_OscConfig+0x4cc>)
 80025ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025ec:	f003 0302 	and.w	r3, r3, #2
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d1ee      	bne.n	80025d2 <HAL_RCC_OscConfig+0x3b2>
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
<<<<<<< HEAD
 8002648:	7dfb      	ldrb	r3, [r7, #23]
 800264a:	2b01      	cmp	r3, #1
 800264c:	d105      	bne.n	800265a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800264e:	4b3c      	ldr	r3, [pc, #240]	; (8002740 <HAL_RCC_OscConfig+0x4cc>)
 8002650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002652:	4a3b      	ldr	r2, [pc, #236]	; (8002740 <HAL_RCC_OscConfig+0x4cc>)
 8002654:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002658:	6413      	str	r3, [r2, #64]	; 0x40
=======
<<<<<<< HEAD
 8002638:	7dfb      	ldrb	r3, [r7, #23]
 800263a:	2b01      	cmp	r3, #1
 800263c:	d105      	bne.n	800264a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800263e:	4b3c      	ldr	r3, [pc, #240]	; (8002730 <HAL_RCC_OscConfig+0x4cc>)
 8002640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002642:	4a3b      	ldr	r2, [pc, #236]	; (8002730 <HAL_RCC_OscConfig+0x4cc>)
 8002644:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002648:	6413      	str	r3, [r2, #64]	; 0x40
=======
 80025f4:	7dfb      	ldrb	r3, [r7, #23]
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d105      	bne.n	8002606 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025fa:	4b3c      	ldr	r3, [pc, #240]	; (80026ec <HAL_RCC_OscConfig+0x4cc>)
 80025fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fe:	4a3b      	ldr	r2, [pc, #236]	; (80026ec <HAL_RCC_OscConfig+0x4cc>)
 8002600:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002604:	6413      	str	r3, [r2, #64]	; 0x40
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
<<<<<<< HEAD
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	699b      	ldr	r3, [r3, #24]
 800265e:	2b00      	cmp	r3, #0
 8002660:	f000 80a4 	beq.w	80027ac <HAL_RCC_OscConfig+0x538>
=======
<<<<<<< HEAD
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	699b      	ldr	r3, [r3, #24]
 800264e:	2b00      	cmp	r3, #0
 8002650:	f000 80a4 	beq.w	800279c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002654:	4b36      	ldr	r3, [pc, #216]	; (8002730 <HAL_RCC_OscConfig+0x4cc>)
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	f003 030c 	and.w	r3, r3, #12
 800265c:	2b08      	cmp	r3, #8
 800265e:	d06b      	beq.n	8002738 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	699b      	ldr	r3, [r3, #24]
 8002664:	2b02      	cmp	r3, #2
 8002666:	d149      	bne.n	80026fc <HAL_RCC_OscConfig+0x498>
=======
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	699b      	ldr	r3, [r3, #24]
 800260a:	2b00      	cmp	r3, #0
 800260c:	f000 80a4 	beq.w	8002758 <HAL_RCC_OscConfig+0x538>
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002664:	4b36      	ldr	r3, [pc, #216]	; (8002740 <HAL_RCC_OscConfig+0x4cc>)
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	f003 030c 	and.w	r3, r3, #12
 800266c:	2b08      	cmp	r3, #8
 800266e:	d06b      	beq.n	8002748 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
<<<<<<< HEAD
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	699b      	ldr	r3, [r3, #24]
 8002674:	2b02      	cmp	r3, #2
 8002676:	d149      	bne.n	800270c <HAL_RCC_OscConfig+0x498>
=======
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	699b      	ldr	r3, [r3, #24]
 8002620:	2b02      	cmp	r3, #2
 8002622:	d149      	bne.n	80026b8 <HAL_RCC_OscConfig+0x498>
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
<<<<<<< HEAD
 8002678:	4b31      	ldr	r3, [pc, #196]	; (8002740 <HAL_RCC_OscConfig+0x4cc>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a30      	ldr	r2, [pc, #192]	; (8002740 <HAL_RCC_OscConfig+0x4cc>)
 800267e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002682:	6013      	str	r3, [r2, #0]
=======
<<<<<<< HEAD
 8002668:	4b31      	ldr	r3, [pc, #196]	; (8002730 <HAL_RCC_OscConfig+0x4cc>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a30      	ldr	r2, [pc, #192]	; (8002730 <HAL_RCC_OscConfig+0x4cc>)
 800266e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002672:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002674:	f7fe fc4c 	bl	8000f10 <HAL_GetTick>
 8002678:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800267a:	e008      	b.n	800268e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800267c:	f7fe fc48 	bl	8000f10 <HAL_GetTick>
 8002680:	4602      	mov	r2, r0
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	1ad3      	subs	r3, r2, r3
 8002686:	2b02      	cmp	r3, #2
 8002688:	d901      	bls.n	800268e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800268a:	2303      	movs	r3, #3
 800268c:	e087      	b.n	800279e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800268e:	4b28      	ldr	r3, [pc, #160]	; (8002730 <HAL_RCC_OscConfig+0x4cc>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002696:	2b00      	cmp	r3, #0
 8002698:	d1f0      	bne.n	800267c <HAL_RCC_OscConfig+0x418>
=======
 8002624:	4b31      	ldr	r3, [pc, #196]	; (80026ec <HAL_RCC_OscConfig+0x4cc>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a30      	ldr	r2, [pc, #192]	; (80026ec <HAL_RCC_OscConfig+0x4cc>)
 800262a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800262e:	6013      	str	r3, [r2, #0]
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002684:	f7fe fc4c 	bl	8000f20 <HAL_GetTick>
 8002688:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800268a:	e008      	b.n	800269e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800268c:	f7fe fc48 	bl	8000f20 <HAL_GetTick>
 8002690:	4602      	mov	r2, r0
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	1ad3      	subs	r3, r2, r3
 8002696:	2b02      	cmp	r3, #2
 8002698:	d901      	bls.n	800269e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800269a:	2303      	movs	r3, #3
 800269c:	e087      	b.n	80027ae <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
<<<<<<< HEAD
 800269e:	4b28      	ldr	r3, [pc, #160]	; (8002740 <HAL_RCC_OscConfig+0x4cc>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d1f0      	bne.n	800268c <HAL_RCC_OscConfig+0x418>
=======
 800264a:	4b28      	ldr	r3, [pc, #160]	; (80026ec <HAL_RCC_OscConfig+0x4cc>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002652:	2b00      	cmp	r3, #0
 8002654:	d1f0      	bne.n	8002638 <HAL_RCC_OscConfig+0x418>
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
<<<<<<< HEAD
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	69da      	ldr	r2, [r3, #28]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6a1b      	ldr	r3, [r3, #32]
 80026b2:	431a      	orrs	r2, r3
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b8:	019b      	lsls	r3, r3, #6
 80026ba:	431a      	orrs	r2, r3
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026c0:	085b      	lsrs	r3, r3, #1
 80026c2:	3b01      	subs	r3, #1
 80026c4:	041b      	lsls	r3, r3, #16
 80026c6:	431a      	orrs	r2, r3
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026cc:	061b      	lsls	r3, r3, #24
 80026ce:	4313      	orrs	r3, r2
 80026d0:	4a1b      	ldr	r2, [pc, #108]	; (8002740 <HAL_RCC_OscConfig+0x4cc>)
 80026d2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80026d6:	6053      	str	r3, [r2, #4]
=======
<<<<<<< HEAD
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	69da      	ldr	r2, [r3, #28]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6a1b      	ldr	r3, [r3, #32]
 80026a2:	431a      	orrs	r2, r3
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a8:	019b      	lsls	r3, r3, #6
 80026aa:	431a      	orrs	r2, r3
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026b0:	085b      	lsrs	r3, r3, #1
 80026b2:	3b01      	subs	r3, #1
 80026b4:	041b      	lsls	r3, r3, #16
 80026b6:	431a      	orrs	r2, r3
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026bc:	061b      	lsls	r3, r3, #24
 80026be:	4313      	orrs	r3, r2
 80026c0:	4a1b      	ldr	r2, [pc, #108]	; (8002730 <HAL_RCC_OscConfig+0x4cc>)
 80026c2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80026c6:	6053      	str	r3, [r2, #4]
=======
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	69da      	ldr	r2, [r3, #28]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6a1b      	ldr	r3, [r3, #32]
 800265e:	431a      	orrs	r2, r3
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002664:	019b      	lsls	r3, r3, #6
 8002666:	431a      	orrs	r2, r3
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800266c:	085b      	lsrs	r3, r3, #1
 800266e:	3b01      	subs	r3, #1
 8002670:	041b      	lsls	r3, r3, #16
 8002672:	431a      	orrs	r2, r3
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002678:	061b      	lsls	r3, r3, #24
 800267a:	4313      	orrs	r3, r2
 800267c:	4a1b      	ldr	r2, [pc, #108]	; (80026ec <HAL_RCC_OscConfig+0x4cc>)
 800267e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002682:	6053      	str	r3, [r2, #4]
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
<<<<<<< HEAD
 80026d8:	4b19      	ldr	r3, [pc, #100]	; (8002740 <HAL_RCC_OscConfig+0x4cc>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a18      	ldr	r2, [pc, #96]	; (8002740 <HAL_RCC_OscConfig+0x4cc>)
 80026de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026e2:	6013      	str	r3, [r2, #0]
=======
<<<<<<< HEAD
 80026c8:	4b19      	ldr	r3, [pc, #100]	; (8002730 <HAL_RCC_OscConfig+0x4cc>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a18      	ldr	r2, [pc, #96]	; (8002730 <HAL_RCC_OscConfig+0x4cc>)
 80026ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026d4:	f7fe fc1c 	bl	8000f10 <HAL_GetTick>
 80026d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026da:	e008      	b.n	80026ee <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026dc:	f7fe fc18 	bl	8000f10 <HAL_GetTick>
 80026e0:	4602      	mov	r2, r0
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	1ad3      	subs	r3, r2, r3
 80026e6:	2b02      	cmp	r3, #2
 80026e8:	d901      	bls.n	80026ee <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80026ea:	2303      	movs	r3, #3
 80026ec:	e057      	b.n	800279e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026ee:	4b10      	ldr	r3, [pc, #64]	; (8002730 <HAL_RCC_OscConfig+0x4cc>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d0f0      	beq.n	80026dc <HAL_RCC_OscConfig+0x478>
 80026fa:	e04f      	b.n	800279c <HAL_RCC_OscConfig+0x538>
=======
 8002684:	4b19      	ldr	r3, [pc, #100]	; (80026ec <HAL_RCC_OscConfig+0x4cc>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a18      	ldr	r2, [pc, #96]	; (80026ec <HAL_RCC_OscConfig+0x4cc>)
 800268a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800268e:	6013      	str	r3, [r2, #0]
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026e4:	f7fe fc1c 	bl	8000f20 <HAL_GetTick>
 80026e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026ea:	e008      	b.n	80026fe <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026ec:	f7fe fc18 	bl	8000f20 <HAL_GetTick>
 80026f0:	4602      	mov	r2, r0
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	1ad3      	subs	r3, r2, r3
 80026f6:	2b02      	cmp	r3, #2
 80026f8:	d901      	bls.n	80026fe <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80026fa:	2303      	movs	r3, #3
 80026fc:	e057      	b.n	80027ae <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
<<<<<<< HEAD
 80026fe:	4b10      	ldr	r3, [pc, #64]	; (8002740 <HAL_RCC_OscConfig+0x4cc>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002706:	2b00      	cmp	r3, #0
 8002708:	d0f0      	beq.n	80026ec <HAL_RCC_OscConfig+0x478>
 800270a:	e04f      	b.n	80027ac <HAL_RCC_OscConfig+0x538>
=======
 80026aa:	4b10      	ldr	r3, [pc, #64]	; (80026ec <HAL_RCC_OscConfig+0x4cc>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d0f0      	beq.n	8002698 <HAL_RCC_OscConfig+0x478>
 80026b6:	e04f      	b.n	8002758 <HAL_RCC_OscConfig+0x538>
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
<<<<<<< HEAD
 800270c:	4b0c      	ldr	r3, [pc, #48]	; (8002740 <HAL_RCC_OscConfig+0x4cc>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a0b      	ldr	r2, [pc, #44]	; (8002740 <HAL_RCC_OscConfig+0x4cc>)
 8002712:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002716:	6013      	str	r3, [r2, #0]
=======
<<<<<<< HEAD
 80026fc:	4b0c      	ldr	r3, [pc, #48]	; (8002730 <HAL_RCC_OscConfig+0x4cc>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a0b      	ldr	r2, [pc, #44]	; (8002730 <HAL_RCC_OscConfig+0x4cc>)
 8002702:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002706:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002708:	f7fe fc02 	bl	8000f10 <HAL_GetTick>
 800270c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800270e:	e008      	b.n	8002722 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002710:	f7fe fbfe 	bl	8000f10 <HAL_GetTick>
 8002714:	4602      	mov	r2, r0
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	1ad3      	subs	r3, r2, r3
 800271a:	2b02      	cmp	r3, #2
 800271c:	d901      	bls.n	8002722 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800271e:	2303      	movs	r3, #3
 8002720:	e03d      	b.n	800279e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002722:	4b03      	ldr	r3, [pc, #12]	; (8002730 <HAL_RCC_OscConfig+0x4cc>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800272a:	2b00      	cmp	r3, #0
 800272c:	d1f0      	bne.n	8002710 <HAL_RCC_OscConfig+0x4ac>
 800272e:	e035      	b.n	800279c <HAL_RCC_OscConfig+0x538>
 8002730:	40023800 	.word	0x40023800
 8002734:	40007000 	.word	0x40007000
=======
 80026b8:	4b0c      	ldr	r3, [pc, #48]	; (80026ec <HAL_RCC_OscConfig+0x4cc>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a0b      	ldr	r2, [pc, #44]	; (80026ec <HAL_RCC_OscConfig+0x4cc>)
 80026be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80026c2:	6013      	str	r3, [r2, #0]
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002718:	f7fe fc02 	bl	8000f20 <HAL_GetTick>
 800271c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800271e:	e008      	b.n	8002732 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002720:	f7fe fbfe 	bl	8000f20 <HAL_GetTick>
 8002724:	4602      	mov	r2, r0
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	1ad3      	subs	r3, r2, r3
 800272a:	2b02      	cmp	r3, #2
 800272c:	d901      	bls.n	8002732 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800272e:	2303      	movs	r3, #3
 8002730:	e03d      	b.n	80027ae <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
<<<<<<< HEAD
 8002732:	4b03      	ldr	r3, [pc, #12]	; (8002740 <HAL_RCC_OscConfig+0x4cc>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800273a:	2b00      	cmp	r3, #0
 800273c:	d1f0      	bne.n	8002720 <HAL_RCC_OscConfig+0x4ac>
 800273e:	e035      	b.n	80027ac <HAL_RCC_OscConfig+0x538>
 8002740:	40023800 	.word	0x40023800
 8002744:	40007000 	.word	0x40007000
=======
 80026de:	4b03      	ldr	r3, [pc, #12]	; (80026ec <HAL_RCC_OscConfig+0x4cc>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d1f0      	bne.n	80026cc <HAL_RCC_OscConfig+0x4ac>
 80026ea:	e035      	b.n	8002758 <HAL_RCC_OscConfig+0x538>
 80026ec:	40023800 	.word	0x40023800
 80026f0:	40007000 	.word	0x40007000
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
<<<<<<< HEAD
 8002748:	4b1b      	ldr	r3, [pc, #108]	; (80027b8 <HAL_RCC_OscConfig+0x544>)
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	60fb      	str	r3, [r7, #12]
=======
<<<<<<< HEAD
 8002738:	4b1b      	ldr	r3, [pc, #108]	; (80027a8 <HAL_RCC_OscConfig+0x544>)
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	60fb      	str	r3, [r7, #12]
=======
 80026f4:	4b1b      	ldr	r3, [pc, #108]	; (8002764 <HAL_RCC_OscConfig+0x544>)
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	60fb      	str	r3, [r7, #12]
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
<<<<<<< HEAD
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	699b      	ldr	r3, [r3, #24]
 8002752:	2b01      	cmp	r3, #1
 8002754:	d028      	beq.n	80027a8 <HAL_RCC_OscConfig+0x534>
=======
<<<<<<< HEAD
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	699b      	ldr	r3, [r3, #24]
 8002742:	2b01      	cmp	r3, #1
 8002744:	d028      	beq.n	8002798 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002750:	429a      	cmp	r2, r3
 8002752:	d121      	bne.n	8002798 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800275e:	429a      	cmp	r2, r3
 8002760:	d11a      	bne.n	8002798 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002762:	68fa      	ldr	r2, [r7, #12]
 8002764:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002768:	4013      	ands	r3, r2
 800276a:	687a      	ldr	r2, [r7, #4]
 800276c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800276e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002770:	4293      	cmp	r3, r2
 8002772:	d111      	bne.n	8002798 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800277e:	085b      	lsrs	r3, r3, #1
 8002780:	3b01      	subs	r3, #1
 8002782:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002784:	429a      	cmp	r2, r3
 8002786:	d107      	bne.n	8002798 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002792:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002794:	429a      	cmp	r2, r3
 8002796:	d001      	beq.n	800279c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002798:	2301      	movs	r3, #1
 800279a:	e000      	b.n	800279e <HAL_RCC_OscConfig+0x53a>
=======
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	699b      	ldr	r3, [r3, #24]
 80026fe:	2b01      	cmp	r3, #1
 8002700:	d028      	beq.n	8002754 <HAL_RCC_OscConfig+0x534>
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002760:	429a      	cmp	r2, r3
 8002762:	d121      	bne.n	80027a8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800276e:	429a      	cmp	r2, r3
 8002770:	d11a      	bne.n	80027a8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002772:	68fa      	ldr	r2, [r7, #12]
 8002774:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002778:	4013      	ands	r3, r2
 800277a:	687a      	ldr	r2, [r7, #4]
 800277c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800277e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002780:	4293      	cmp	r3, r2
 8002782:	d111      	bne.n	80027a8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800278e:	085b      	lsrs	r3, r3, #1
 8002790:	3b01      	subs	r3, #1
 8002792:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002794:	429a      	cmp	r2, r3
 8002796:	d107      	bne.n	80027a8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027a2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d001      	beq.n	80027ac <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
<<<<<<< HEAD
 80027a8:	2301      	movs	r3, #1
 80027aa:	e000      	b.n	80027ae <HAL_RCC_OscConfig+0x53a>
=======
 8002754:	2301      	movs	r3, #1
 8002756:	e000      	b.n	800275a <HAL_RCC_OscConfig+0x53a>
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
      }
    }
  }
  return HAL_OK;
<<<<<<< HEAD
 80027ac:	2300      	movs	r3, #0
=======
<<<<<<< HEAD
 800279c:	2300      	movs	r3, #0
}
 800279e:	4618      	mov	r0, r3
 80027a0:	3718      	adds	r7, #24
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop
 80027a8:	40023800 	.word	0x40023800

080027ac <HAL_RCC_ClockConfig>:
=======
 8002758:	2300      	movs	r3, #0
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	3718      	adds	r7, #24
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	bf00      	nop
 80027b8:	40023800 	.word	0x40023800

<<<<<<< HEAD
080027bc <HAL_RCC_ClockConfig>:
=======
08002768 <HAL_RCC_ClockConfig>:
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
<<<<<<< HEAD
 80027bc:	b580      	push	{r7, lr}
 80027be:	b084      	sub	sp, #16
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
 80027c4:	6039      	str	r1, [r7, #0]
=======
<<<<<<< HEAD
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b084      	sub	sp, #16
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
 80027b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80027b6:	2300      	movs	r3, #0
 80027b8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d101      	bne.n	80027c4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	e0d0      	b.n	8002966 <HAL_RCC_ClockConfig+0x1ba>
=======
 8002768:	b580      	push	{r7, lr}
 800276a:	b084      	sub	sp, #16
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
 8002770:	6039      	str	r1, [r7, #0]
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  uint32_t tickstart = 0;
 80027c6:	2300      	movs	r3, #0
 80027c8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d101      	bne.n	80027d4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
<<<<<<< HEAD
 80027d0:	2301      	movs	r3, #1
 80027d2:	e0d0      	b.n	8002976 <HAL_RCC_ClockConfig+0x1ba>
=======
 800277c:	2301      	movs	r3, #1
 800277e:	e0d0      	b.n	8002922 <HAL_RCC_ClockConfig+0x1ba>
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
<<<<<<< HEAD
 80027d4:	4b6a      	ldr	r3, [pc, #424]	; (8002980 <HAL_RCC_ClockConfig+0x1c4>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f003 030f 	and.w	r3, r3, #15
 80027dc:	683a      	ldr	r2, [r7, #0]
 80027de:	429a      	cmp	r2, r3
 80027e0:	d910      	bls.n	8002804 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027e2:	4b67      	ldr	r3, [pc, #412]	; (8002980 <HAL_RCC_ClockConfig+0x1c4>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f023 020f 	bic.w	r2, r3, #15
 80027ea:	4965      	ldr	r1, [pc, #404]	; (8002980 <HAL_RCC_ClockConfig+0x1c4>)
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	4313      	orrs	r3, r2
 80027f0:	600b      	str	r3, [r1, #0]
=======
<<<<<<< HEAD
 80027c4:	4b6a      	ldr	r3, [pc, #424]	; (8002970 <HAL_RCC_ClockConfig+0x1c4>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f003 030f 	and.w	r3, r3, #15
 80027cc:	683a      	ldr	r2, [r7, #0]
 80027ce:	429a      	cmp	r2, r3
 80027d0:	d910      	bls.n	80027f4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027d2:	4b67      	ldr	r3, [pc, #412]	; (8002970 <HAL_RCC_ClockConfig+0x1c4>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f023 020f 	bic.w	r2, r3, #15
 80027da:	4965      	ldr	r1, [pc, #404]	; (8002970 <HAL_RCC_ClockConfig+0x1c4>)
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	4313      	orrs	r3, r2
 80027e0:	600b      	str	r3, [r1, #0]
=======
 8002780:	4b6a      	ldr	r3, [pc, #424]	; (800292c <HAL_RCC_ClockConfig+0x1c4>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f003 030f 	and.w	r3, r3, #15
 8002788:	683a      	ldr	r2, [r7, #0]
 800278a:	429a      	cmp	r2, r3
 800278c:	d910      	bls.n	80027b0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800278e:	4b67      	ldr	r3, [pc, #412]	; (800292c <HAL_RCC_ClockConfig+0x1c4>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f023 020f 	bic.w	r2, r3, #15
 8002796:	4965      	ldr	r1, [pc, #404]	; (800292c <HAL_RCC_ClockConfig+0x1c4>)
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	4313      	orrs	r3, r2
 800279c:	600b      	str	r3, [r1, #0]
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
<<<<<<< HEAD
 80027f2:	4b63      	ldr	r3, [pc, #396]	; (8002980 <HAL_RCC_ClockConfig+0x1c4>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 030f 	and.w	r3, r3, #15
 80027fa:	683a      	ldr	r2, [r7, #0]
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d001      	beq.n	8002804 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	e0b8      	b.n	8002976 <HAL_RCC_ClockConfig+0x1ba>
=======
<<<<<<< HEAD
 80027e2:	4b63      	ldr	r3, [pc, #396]	; (8002970 <HAL_RCC_ClockConfig+0x1c4>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f003 030f 	and.w	r3, r3, #15
 80027ea:	683a      	ldr	r2, [r7, #0]
 80027ec:	429a      	cmp	r2, r3
 80027ee:	d001      	beq.n	80027f4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80027f0:	2301      	movs	r3, #1
 80027f2:	e0b8      	b.n	8002966 <HAL_RCC_ClockConfig+0x1ba>
=======
 800279e:	4b63      	ldr	r3, [pc, #396]	; (800292c <HAL_RCC_ClockConfig+0x1c4>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 030f 	and.w	r3, r3, #15
 80027a6:	683a      	ldr	r2, [r7, #0]
 80027a8:	429a      	cmp	r2, r3
 80027aa:	d001      	beq.n	80027b0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80027ac:	2301      	movs	r3, #1
 80027ae:	e0b8      	b.n	8002922 <HAL_RCC_ClockConfig+0x1ba>
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
<<<<<<< HEAD
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 0302 	and.w	r3, r3, #2
 800280c:	2b00      	cmp	r3, #0
 800280e:	d020      	beq.n	8002852 <HAL_RCC_ClockConfig+0x96>
=======
<<<<<<< HEAD
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f003 0302 	and.w	r3, r3, #2
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d020      	beq.n	8002842 <HAL_RCC_ClockConfig+0x96>
=======
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f003 0302 	and.w	r3, r3, #2
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d020      	beq.n	80027fe <HAL_RCC_ClockConfig+0x96>
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
<<<<<<< HEAD
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 0304 	and.w	r3, r3, #4
 8002818:	2b00      	cmp	r3, #0
 800281a:	d005      	beq.n	8002828 <HAL_RCC_ClockConfig+0x6c>
=======
<<<<<<< HEAD
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 0304 	and.w	r3, r3, #4
 8002808:	2b00      	cmp	r3, #0
 800280a:	d005      	beq.n	8002818 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800280c:	4b59      	ldr	r3, [pc, #356]	; (8002974 <HAL_RCC_ClockConfig+0x1c8>)
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	4a58      	ldr	r2, [pc, #352]	; (8002974 <HAL_RCC_ClockConfig+0x1c8>)
 8002812:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002816:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f003 0308 	and.w	r3, r3, #8
 8002820:	2b00      	cmp	r3, #0
 8002822:	d005      	beq.n	8002830 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002824:	4b53      	ldr	r3, [pc, #332]	; (8002974 <HAL_RCC_ClockConfig+0x1c8>)
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	4a52      	ldr	r2, [pc, #328]	; (8002974 <HAL_RCC_ClockConfig+0x1c8>)
 800282a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800282e:	6093      	str	r3, [r2, #8]
=======
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f003 0304 	and.w	r3, r3, #4
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d005      	beq.n	80027d4 <HAL_RCC_ClockConfig+0x6c>
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800281c:	4b59      	ldr	r3, [pc, #356]	; (8002984 <HAL_RCC_ClockConfig+0x1c8>)
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	4a58      	ldr	r2, [pc, #352]	; (8002984 <HAL_RCC_ClockConfig+0x1c8>)
 8002822:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002826:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 0308 	and.w	r3, r3, #8
 8002830:	2b00      	cmp	r3, #0
 8002832:	d005      	beq.n	8002840 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
<<<<<<< HEAD
 8002834:	4b53      	ldr	r3, [pc, #332]	; (8002984 <HAL_RCC_ClockConfig+0x1c8>)
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	4a52      	ldr	r2, [pc, #328]	; (8002984 <HAL_RCC_ClockConfig+0x1c8>)
 800283a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800283e:	6093      	str	r3, [r2, #8]
=======
 80027e0:	4b53      	ldr	r3, [pc, #332]	; (8002930 <HAL_RCC_ClockConfig+0x1c8>)
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	4a52      	ldr	r2, [pc, #328]	; (8002930 <HAL_RCC_ClockConfig+0x1c8>)
 80027e6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80027ea:	6093      	str	r3, [r2, #8]
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
<<<<<<< HEAD
 8002840:	4b50      	ldr	r3, [pc, #320]	; (8002984 <HAL_RCC_ClockConfig+0x1c8>)
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	494d      	ldr	r1, [pc, #308]	; (8002984 <HAL_RCC_ClockConfig+0x1c8>)
 800284e:	4313      	orrs	r3, r2
 8002850:	608b      	str	r3, [r1, #8]
=======
<<<<<<< HEAD
 8002830:	4b50      	ldr	r3, [pc, #320]	; (8002974 <HAL_RCC_ClockConfig+0x1c8>)
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	494d      	ldr	r1, [pc, #308]	; (8002974 <HAL_RCC_ClockConfig+0x1c8>)
 800283e:	4313      	orrs	r3, r2
 8002840:	608b      	str	r3, [r1, #8]
=======
 80027ec:	4b50      	ldr	r3, [pc, #320]	; (8002930 <HAL_RCC_ClockConfig+0x1c8>)
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	494d      	ldr	r1, [pc, #308]	; (8002930 <HAL_RCC_ClockConfig+0x1c8>)
 80027fa:	4313      	orrs	r3, r2
 80027fc:	608b      	str	r3, [r1, #8]
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
<<<<<<< HEAD
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f003 0301 	and.w	r3, r3, #1
 800285a:	2b00      	cmp	r3, #0
 800285c:	d040      	beq.n	80028e0 <HAL_RCC_ClockConfig+0x124>
=======
<<<<<<< HEAD
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 0301 	and.w	r3, r3, #1
 800284a:	2b00      	cmp	r3, #0
 800284c:	d040      	beq.n	80028d0 <HAL_RCC_ClockConfig+0x124>
=======
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f003 0301 	and.w	r3, r3, #1
 8002806:	2b00      	cmp	r3, #0
 8002808:	d040      	beq.n	800288c <HAL_RCC_ClockConfig+0x124>
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
<<<<<<< HEAD
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	2b01      	cmp	r3, #1
 8002864:	d107      	bne.n	8002876 <HAL_RCC_ClockConfig+0xba>
=======
<<<<<<< HEAD
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	2b01      	cmp	r3, #1
 8002854:	d107      	bne.n	8002866 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002856:	4b47      	ldr	r3, [pc, #284]	; (8002974 <HAL_RCC_ClockConfig+0x1c8>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800285e:	2b00      	cmp	r3, #0
 8002860:	d115      	bne.n	800288e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	e07f      	b.n	8002966 <HAL_RCC_ClockConfig+0x1ba>
=======
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	2b01      	cmp	r3, #1
 8002810:	d107      	bne.n	8002822 <HAL_RCC_ClockConfig+0xba>
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002866:	4b47      	ldr	r3, [pc, #284]	; (8002984 <HAL_RCC_ClockConfig+0x1c8>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800286e:	2b00      	cmp	r3, #0
 8002870:	d115      	bne.n	800289e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
<<<<<<< HEAD
 8002872:	2301      	movs	r3, #1
 8002874:	e07f      	b.n	8002976 <HAL_RCC_ClockConfig+0x1ba>
=======
 800281e:	2301      	movs	r3, #1
 8002820:	e07f      	b.n	8002922 <HAL_RCC_ClockConfig+0x1ba>
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
<<<<<<< HEAD
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	2b02      	cmp	r3, #2
 800287c:	d107      	bne.n	800288e <HAL_RCC_ClockConfig+0xd2>
=======
<<<<<<< HEAD
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	2b02      	cmp	r3, #2
 800286c:	d107      	bne.n	800287e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800286e:	4b41      	ldr	r3, [pc, #260]	; (8002974 <HAL_RCC_ClockConfig+0x1c8>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002876:	2b00      	cmp	r3, #0
 8002878:	d109      	bne.n	800288e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	e073      	b.n	8002966 <HAL_RCC_ClockConfig+0x1ba>
=======
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	2b02      	cmp	r3, #2
 8002828:	d107      	bne.n	800283a <HAL_RCC_ClockConfig+0xd2>
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800287e:	4b41      	ldr	r3, [pc, #260]	; (8002984 <HAL_RCC_ClockConfig+0x1c8>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002886:	2b00      	cmp	r3, #0
 8002888:	d109      	bne.n	800289e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
<<<<<<< HEAD
 800288a:	2301      	movs	r3, #1
 800288c:	e073      	b.n	8002976 <HAL_RCC_ClockConfig+0x1ba>
=======
 8002836:	2301      	movs	r3, #1
 8002838:	e073      	b.n	8002922 <HAL_RCC_ClockConfig+0x1ba>
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
<<<<<<< HEAD
 800288e:	4b3d      	ldr	r3, [pc, #244]	; (8002984 <HAL_RCC_ClockConfig+0x1c8>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f003 0302 	and.w	r3, r3, #2
 8002896:	2b00      	cmp	r3, #0
 8002898:	d101      	bne.n	800289e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e06b      	b.n	8002976 <HAL_RCC_ClockConfig+0x1ba>
=======
<<<<<<< HEAD
 800287e:	4b3d      	ldr	r3, [pc, #244]	; (8002974 <HAL_RCC_ClockConfig+0x1c8>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 0302 	and.w	r3, r3, #2
 8002886:	2b00      	cmp	r3, #0
 8002888:	d101      	bne.n	800288e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	e06b      	b.n	8002966 <HAL_RCC_ClockConfig+0x1ba>
=======
 800283a:	4b3d      	ldr	r3, [pc, #244]	; (8002930 <HAL_RCC_ClockConfig+0x1c8>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 0302 	and.w	r3, r3, #2
 8002842:	2b00      	cmp	r3, #0
 8002844:	d101      	bne.n	800284a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	e06b      	b.n	8002922 <HAL_RCC_ClockConfig+0x1ba>
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
<<<<<<< HEAD
 800289e:	4b39      	ldr	r3, [pc, #228]	; (8002984 <HAL_RCC_ClockConfig+0x1c8>)
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	f023 0203 	bic.w	r2, r3, #3
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	4936      	ldr	r1, [pc, #216]	; (8002984 <HAL_RCC_ClockConfig+0x1c8>)
 80028ac:	4313      	orrs	r3, r2
 80028ae:	608b      	str	r3, [r1, #8]
=======
<<<<<<< HEAD
 800288e:	4b39      	ldr	r3, [pc, #228]	; (8002974 <HAL_RCC_ClockConfig+0x1c8>)
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	f023 0203 	bic.w	r2, r3, #3
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	4936      	ldr	r1, [pc, #216]	; (8002974 <HAL_RCC_ClockConfig+0x1c8>)
 800289c:	4313      	orrs	r3, r2
 800289e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028a0:	f7fe fb36 	bl	8000f10 <HAL_GetTick>
 80028a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028a6:	e00a      	b.n	80028be <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028a8:	f7fe fb32 	bl	8000f10 <HAL_GetTick>
 80028ac:	4602      	mov	r2, r0
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	1ad3      	subs	r3, r2, r3
 80028b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d901      	bls.n	80028be <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80028ba:	2303      	movs	r3, #3
 80028bc:	e053      	b.n	8002966 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028be:	4b2d      	ldr	r3, [pc, #180]	; (8002974 <HAL_RCC_ClockConfig+0x1c8>)
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	f003 020c 	and.w	r2, r3, #12
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	009b      	lsls	r3, r3, #2
 80028cc:	429a      	cmp	r2, r3
 80028ce:	d1eb      	bne.n	80028a8 <HAL_RCC_ClockConfig+0xfc>
=======
 800284a:	4b39      	ldr	r3, [pc, #228]	; (8002930 <HAL_RCC_ClockConfig+0x1c8>)
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	f023 0203 	bic.w	r2, r3, #3
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	4936      	ldr	r1, [pc, #216]	; (8002930 <HAL_RCC_ClockConfig+0x1c8>)
 8002858:	4313      	orrs	r3, r2
 800285a:	608b      	str	r3, [r1, #8]
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028b0:	f7fe fb36 	bl	8000f20 <HAL_GetTick>
 80028b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028b6:	e00a      	b.n	80028ce <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028b8:	f7fe fb32 	bl	8000f20 <HAL_GetTick>
 80028bc:	4602      	mov	r2, r0
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	1ad3      	subs	r3, r2, r3
 80028c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d901      	bls.n	80028ce <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80028ca:	2303      	movs	r3, #3
 80028cc:	e053      	b.n	8002976 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
<<<<<<< HEAD
 80028ce:	4b2d      	ldr	r3, [pc, #180]	; (8002984 <HAL_RCC_ClockConfig+0x1c8>)
 80028d0:	689b      	ldr	r3, [r3, #8]
 80028d2:	f003 020c 	and.w	r2, r3, #12
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	429a      	cmp	r2, r3
 80028de:	d1eb      	bne.n	80028b8 <HAL_RCC_ClockConfig+0xfc>
=======
 800287a:	4b2d      	ldr	r3, [pc, #180]	; (8002930 <HAL_RCC_ClockConfig+0x1c8>)
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	f003 020c 	and.w	r2, r3, #12
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	009b      	lsls	r3, r3, #2
 8002888:	429a      	cmp	r2, r3
 800288a:	d1eb      	bne.n	8002864 <HAL_RCC_ClockConfig+0xfc>
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
<<<<<<< HEAD
 80028e0:	4b27      	ldr	r3, [pc, #156]	; (8002980 <HAL_RCC_ClockConfig+0x1c4>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f003 030f 	and.w	r3, r3, #15
 80028e8:	683a      	ldr	r2, [r7, #0]
 80028ea:	429a      	cmp	r2, r3
 80028ec:	d210      	bcs.n	8002910 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028ee:	4b24      	ldr	r3, [pc, #144]	; (8002980 <HAL_RCC_ClockConfig+0x1c4>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f023 020f 	bic.w	r2, r3, #15
 80028f6:	4922      	ldr	r1, [pc, #136]	; (8002980 <HAL_RCC_ClockConfig+0x1c4>)
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	4313      	orrs	r3, r2
 80028fc:	600b      	str	r3, [r1, #0]
=======
<<<<<<< HEAD
 80028d0:	4b27      	ldr	r3, [pc, #156]	; (8002970 <HAL_RCC_ClockConfig+0x1c4>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f003 030f 	and.w	r3, r3, #15
 80028d8:	683a      	ldr	r2, [r7, #0]
 80028da:	429a      	cmp	r2, r3
 80028dc:	d210      	bcs.n	8002900 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028de:	4b24      	ldr	r3, [pc, #144]	; (8002970 <HAL_RCC_ClockConfig+0x1c4>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f023 020f 	bic.w	r2, r3, #15
 80028e6:	4922      	ldr	r1, [pc, #136]	; (8002970 <HAL_RCC_ClockConfig+0x1c4>)
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	4313      	orrs	r3, r2
 80028ec:	600b      	str	r3, [r1, #0]
=======
 800288c:	4b27      	ldr	r3, [pc, #156]	; (800292c <HAL_RCC_ClockConfig+0x1c4>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f003 030f 	and.w	r3, r3, #15
 8002894:	683a      	ldr	r2, [r7, #0]
 8002896:	429a      	cmp	r2, r3
 8002898:	d210      	bcs.n	80028bc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800289a:	4b24      	ldr	r3, [pc, #144]	; (800292c <HAL_RCC_ClockConfig+0x1c4>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f023 020f 	bic.w	r2, r3, #15
 80028a2:	4922      	ldr	r1, [pc, #136]	; (800292c <HAL_RCC_ClockConfig+0x1c4>)
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	4313      	orrs	r3, r2
 80028a8:	600b      	str	r3, [r1, #0]
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
<<<<<<< HEAD
 80028fe:	4b20      	ldr	r3, [pc, #128]	; (8002980 <HAL_RCC_ClockConfig+0x1c4>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 030f 	and.w	r3, r3, #15
 8002906:	683a      	ldr	r2, [r7, #0]
 8002908:	429a      	cmp	r2, r3
 800290a:	d001      	beq.n	8002910 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800290c:	2301      	movs	r3, #1
 800290e:	e032      	b.n	8002976 <HAL_RCC_ClockConfig+0x1ba>
=======
<<<<<<< HEAD
 80028ee:	4b20      	ldr	r3, [pc, #128]	; (8002970 <HAL_RCC_ClockConfig+0x1c4>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 030f 	and.w	r3, r3, #15
 80028f6:	683a      	ldr	r2, [r7, #0]
 80028f8:	429a      	cmp	r2, r3
 80028fa:	d001      	beq.n	8002900 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	e032      	b.n	8002966 <HAL_RCC_ClockConfig+0x1ba>
=======
 80028aa:	4b20      	ldr	r3, [pc, #128]	; (800292c <HAL_RCC_ClockConfig+0x1c4>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 030f 	and.w	r3, r3, #15
 80028b2:	683a      	ldr	r2, [r7, #0]
 80028b4:	429a      	cmp	r2, r3
 80028b6:	d001      	beq.n	80028bc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80028b8:	2301      	movs	r3, #1
 80028ba:	e032      	b.n	8002922 <HAL_RCC_ClockConfig+0x1ba>
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
<<<<<<< HEAD
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f003 0304 	and.w	r3, r3, #4
 8002918:	2b00      	cmp	r3, #0
 800291a:	d008      	beq.n	800292e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800291c:	4b19      	ldr	r3, [pc, #100]	; (8002984 <HAL_RCC_ClockConfig+0x1c8>)
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	68db      	ldr	r3, [r3, #12]
 8002928:	4916      	ldr	r1, [pc, #88]	; (8002984 <HAL_RCC_ClockConfig+0x1c8>)
 800292a:	4313      	orrs	r3, r2
 800292c:	608b      	str	r3, [r1, #8]
=======
<<<<<<< HEAD
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 0304 	and.w	r3, r3, #4
 8002908:	2b00      	cmp	r3, #0
 800290a:	d008      	beq.n	800291e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800290c:	4b19      	ldr	r3, [pc, #100]	; (8002974 <HAL_RCC_ClockConfig+0x1c8>)
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	68db      	ldr	r3, [r3, #12]
 8002918:	4916      	ldr	r1, [pc, #88]	; (8002974 <HAL_RCC_ClockConfig+0x1c8>)
 800291a:	4313      	orrs	r3, r2
 800291c:	608b      	str	r3, [r1, #8]
=======
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f003 0304 	and.w	r3, r3, #4
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d008      	beq.n	80028da <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028c8:	4b19      	ldr	r3, [pc, #100]	; (8002930 <HAL_RCC_ClockConfig+0x1c8>)
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	68db      	ldr	r3, [r3, #12]
 80028d4:	4916      	ldr	r1, [pc, #88]	; (8002930 <HAL_RCC_ClockConfig+0x1c8>)
 80028d6:	4313      	orrs	r3, r2
 80028d8:	608b      	str	r3, [r1, #8]
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
<<<<<<< HEAD
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 0308 	and.w	r3, r3, #8
 8002936:	2b00      	cmp	r3, #0
 8002938:	d009      	beq.n	800294e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800293a:	4b12      	ldr	r3, [pc, #72]	; (8002984 <HAL_RCC_ClockConfig+0x1c8>)
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	691b      	ldr	r3, [r3, #16]
 8002946:	00db      	lsls	r3, r3, #3
 8002948:	490e      	ldr	r1, [pc, #56]	; (8002984 <HAL_RCC_ClockConfig+0x1c8>)
 800294a:	4313      	orrs	r3, r2
 800294c:	608b      	str	r3, [r1, #8]
=======
<<<<<<< HEAD
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 0308 	and.w	r3, r3, #8
 8002926:	2b00      	cmp	r3, #0
 8002928:	d009      	beq.n	800293e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800292a:	4b12      	ldr	r3, [pc, #72]	; (8002974 <HAL_RCC_ClockConfig+0x1c8>)
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	691b      	ldr	r3, [r3, #16]
 8002936:	00db      	lsls	r3, r3, #3
 8002938:	490e      	ldr	r1, [pc, #56]	; (8002974 <HAL_RCC_ClockConfig+0x1c8>)
 800293a:	4313      	orrs	r3, r2
 800293c:	608b      	str	r3, [r1, #8]
=======
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f003 0308 	and.w	r3, r3, #8
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d009      	beq.n	80028fa <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80028e6:	4b12      	ldr	r3, [pc, #72]	; (8002930 <HAL_RCC_ClockConfig+0x1c8>)
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	691b      	ldr	r3, [r3, #16]
 80028f2:	00db      	lsls	r3, r3, #3
 80028f4:	490e      	ldr	r1, [pc, #56]	; (8002930 <HAL_RCC_ClockConfig+0x1c8>)
 80028f6:	4313      	orrs	r3, r2
 80028f8:	608b      	str	r3, [r1, #8]
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
<<<<<<< HEAD
 800294e:	f000 f821 	bl	8002994 <HAL_RCC_GetSysClockFreq>
 8002952:	4602      	mov	r2, r0
 8002954:	4b0b      	ldr	r3, [pc, #44]	; (8002984 <HAL_RCC_ClockConfig+0x1c8>)
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	091b      	lsrs	r3, r3, #4
 800295a:	f003 030f 	and.w	r3, r3, #15
 800295e:	490a      	ldr	r1, [pc, #40]	; (8002988 <HAL_RCC_ClockConfig+0x1cc>)
 8002960:	5ccb      	ldrb	r3, [r1, r3]
 8002962:	fa22 f303 	lsr.w	r3, r2, r3
 8002966:	4a09      	ldr	r2, [pc, #36]	; (800298c <HAL_RCC_ClockConfig+0x1d0>)
 8002968:	6013      	str	r3, [r2, #0]
=======
<<<<<<< HEAD
 800293e:	f000 f821 	bl	8002984 <HAL_RCC_GetSysClockFreq>
 8002942:	4602      	mov	r2, r0
 8002944:	4b0b      	ldr	r3, [pc, #44]	; (8002974 <HAL_RCC_ClockConfig+0x1c8>)
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	091b      	lsrs	r3, r3, #4
 800294a:	f003 030f 	and.w	r3, r3, #15
 800294e:	490a      	ldr	r1, [pc, #40]	; (8002978 <HAL_RCC_ClockConfig+0x1cc>)
 8002950:	5ccb      	ldrb	r3, [r1, r3]
 8002952:	fa22 f303 	lsr.w	r3, r2, r3
 8002956:	4a09      	ldr	r2, [pc, #36]	; (800297c <HAL_RCC_ClockConfig+0x1d0>)
 8002958:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800295a:	4b09      	ldr	r3, [pc, #36]	; (8002980 <HAL_RCC_ClockConfig+0x1d4>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4618      	mov	r0, r3
 8002960:	f7fe fa92 	bl	8000e88 <HAL_InitTick>

  return HAL_OK;
 8002964:	2300      	movs	r3, #0
}
 8002966:	4618      	mov	r0, r3
 8002968:	3710      	adds	r7, #16
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	40023c00 	.word	0x40023c00
 8002974:	40023800 	.word	0x40023800
 8002978:	0800500c 	.word	0x0800500c
 800297c:	20000008 	.word	0x20000008
 8002980:	2000000c 	.word	0x2000000c

08002984 <HAL_RCC_GetSysClockFreq>:
=======
 80028fa:	f000 f821 	bl	8002940 <HAL_RCC_GetSysClockFreq>
 80028fe:	4602      	mov	r2, r0
 8002900:	4b0b      	ldr	r3, [pc, #44]	; (8002930 <HAL_RCC_ClockConfig+0x1c8>)
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	091b      	lsrs	r3, r3, #4
 8002906:	f003 030f 	and.w	r3, r3, #15
 800290a:	490a      	ldr	r1, [pc, #40]	; (8002934 <HAL_RCC_ClockConfig+0x1cc>)
 800290c:	5ccb      	ldrb	r3, [r1, r3]
 800290e:	fa22 f303 	lsr.w	r3, r2, r3
 8002912:	4a09      	ldr	r2, [pc, #36]	; (8002938 <HAL_RCC_ClockConfig+0x1d0>)
 8002914:	6013      	str	r3, [r2, #0]
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800296a:	4b09      	ldr	r3, [pc, #36]	; (8002990 <HAL_RCC_ClockConfig+0x1d4>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4618      	mov	r0, r3
 8002970:	f7fe fa92 	bl	8000e98 <HAL_InitTick>

  return HAL_OK;
 8002974:	2300      	movs	r3, #0
}
 8002976:	4618      	mov	r0, r3
 8002978:	3710      	adds	r7, #16
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}
 800297e:	bf00      	nop
 8002980:	40023c00 	.word	0x40023c00
 8002984:	40023800 	.word	0x40023800
 8002988:	0800501c 	.word	0x0800501c
 800298c:	20000008 	.word	0x20000008
 8002990:	2000000c 	.word	0x2000000c

<<<<<<< HEAD
08002994 <HAL_RCC_GetSysClockFreq>:
=======
08002940 <HAL_RCC_GetSysClockFreq>:
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
<<<<<<< HEAD
 8002994:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002998:	b090      	sub	sp, #64	; 0x40
 800299a:	af00      	add	r7, sp, #0
=======
<<<<<<< HEAD
 8002984:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002988:	b090      	sub	sp, #64	; 0x40
 800298a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800298c:	2300      	movs	r3, #0
 800298e:	637b      	str	r3, [r7, #52]	; 0x34
 8002990:	2300      	movs	r3, #0
 8002992:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002994:	2300      	movs	r3, #0
 8002996:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8002998:	2300      	movs	r3, #0
 800299a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800299c:	4b59      	ldr	r3, [pc, #356]	; (8002b04 <HAL_RCC_GetSysClockFreq+0x180>)
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	f003 030c 	and.w	r3, r3, #12
 80029a4:	2b08      	cmp	r3, #8
 80029a6:	d00d      	beq.n	80029c4 <HAL_RCC_GetSysClockFreq+0x40>
 80029a8:	2b08      	cmp	r3, #8
 80029aa:	f200 80a1 	bhi.w	8002af0 <HAL_RCC_GetSysClockFreq+0x16c>
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d002      	beq.n	80029b8 <HAL_RCC_GetSysClockFreq+0x34>
 80029b2:	2b04      	cmp	r3, #4
 80029b4:	d003      	beq.n	80029be <HAL_RCC_GetSysClockFreq+0x3a>
 80029b6:	e09b      	b.n	8002af0 <HAL_RCC_GetSysClockFreq+0x16c>
=======
 8002940:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002944:	b090      	sub	sp, #64	; 0x40
 8002946:	af00      	add	r7, sp, #0
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800299c:	2300      	movs	r3, #0
 800299e:	637b      	str	r3, [r7, #52]	; 0x34
 80029a0:	2300      	movs	r3, #0
 80029a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80029a4:	2300      	movs	r3, #0
 80029a6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 80029a8:	2300      	movs	r3, #0
 80029aa:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
<<<<<<< HEAD
 80029ac:	4b59      	ldr	r3, [pc, #356]	; (8002b14 <HAL_RCC_GetSysClockFreq+0x180>)
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	f003 030c 	and.w	r3, r3, #12
 80029b4:	2b08      	cmp	r3, #8
 80029b6:	d00d      	beq.n	80029d4 <HAL_RCC_GetSysClockFreq+0x40>
 80029b8:	2b08      	cmp	r3, #8
 80029ba:	f200 80a1 	bhi.w	8002b00 <HAL_RCC_GetSysClockFreq+0x16c>
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d002      	beq.n	80029c8 <HAL_RCC_GetSysClockFreq+0x34>
 80029c2:	2b04      	cmp	r3, #4
 80029c4:	d003      	beq.n	80029ce <HAL_RCC_GetSysClockFreq+0x3a>
 80029c6:	e09b      	b.n	8002b00 <HAL_RCC_GetSysClockFreq+0x16c>
=======
 8002958:	4b59      	ldr	r3, [pc, #356]	; (8002ac0 <HAL_RCC_GetSysClockFreq+0x180>)
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	f003 030c 	and.w	r3, r3, #12
 8002960:	2b08      	cmp	r3, #8
 8002962:	d00d      	beq.n	8002980 <HAL_RCC_GetSysClockFreq+0x40>
 8002964:	2b08      	cmp	r3, #8
 8002966:	f200 80a1 	bhi.w	8002aac <HAL_RCC_GetSysClockFreq+0x16c>
 800296a:	2b00      	cmp	r3, #0
 800296c:	d002      	beq.n	8002974 <HAL_RCC_GetSysClockFreq+0x34>
 800296e:	2b04      	cmp	r3, #4
 8002970:	d003      	beq.n	800297a <HAL_RCC_GetSysClockFreq+0x3a>
 8002972:	e09b      	b.n	8002aac <HAL_RCC_GetSysClockFreq+0x16c>
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
<<<<<<< HEAD
 80029c8:	4b53      	ldr	r3, [pc, #332]	; (8002b18 <HAL_RCC_GetSysClockFreq+0x184>)
 80029ca:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80029cc:	e09b      	b.n	8002b06 <HAL_RCC_GetSysClockFreq+0x172>
=======
<<<<<<< HEAD
 80029b8:	4b53      	ldr	r3, [pc, #332]	; (8002b08 <HAL_RCC_GetSysClockFreq+0x184>)
 80029ba:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80029bc:	e09b      	b.n	8002af6 <HAL_RCC_GetSysClockFreq+0x172>
=======
 8002974:	4b53      	ldr	r3, [pc, #332]	; (8002ac4 <HAL_RCC_GetSysClockFreq+0x184>)
 8002976:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002978:	e09b      	b.n	8002ab2 <HAL_RCC_GetSysClockFreq+0x172>
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
<<<<<<< HEAD
 80029ce:	4b53      	ldr	r3, [pc, #332]	; (8002b1c <HAL_RCC_GetSysClockFreq+0x188>)
 80029d0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80029d2:	e098      	b.n	8002b06 <HAL_RCC_GetSysClockFreq+0x172>
=======
<<<<<<< HEAD
 80029be:	4b53      	ldr	r3, [pc, #332]	; (8002b0c <HAL_RCC_GetSysClockFreq+0x188>)
 80029c0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80029c2:	e098      	b.n	8002af6 <HAL_RCC_GetSysClockFreq+0x172>
=======
 800297a:	4b53      	ldr	r3, [pc, #332]	; (8002ac8 <HAL_RCC_GetSysClockFreq+0x188>)
 800297c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800297e:	e098      	b.n	8002ab2 <HAL_RCC_GetSysClockFreq+0x172>
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
<<<<<<< HEAD
 80029d4:	4b4f      	ldr	r3, [pc, #316]	; (8002b14 <HAL_RCC_GetSysClockFreq+0x180>)
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80029dc:	637b      	str	r3, [r7, #52]	; 0x34
=======
<<<<<<< HEAD
 80029c4:	4b4f      	ldr	r3, [pc, #316]	; (8002b04 <HAL_RCC_GetSysClockFreq+0x180>)
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80029cc:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80029ce:	4b4d      	ldr	r3, [pc, #308]	; (8002b04 <HAL_RCC_GetSysClockFreq+0x180>)
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d028      	beq.n	8002a2c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029da:	4b4a      	ldr	r3, [pc, #296]	; (8002b04 <HAL_RCC_GetSysClockFreq+0x180>)
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	099b      	lsrs	r3, r3, #6
 80029e0:	2200      	movs	r2, #0
 80029e2:	623b      	str	r3, [r7, #32]
 80029e4:	627a      	str	r2, [r7, #36]	; 0x24
 80029e6:	6a3b      	ldr	r3, [r7, #32]
 80029e8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80029ec:	2100      	movs	r1, #0
 80029ee:	4b47      	ldr	r3, [pc, #284]	; (8002b0c <HAL_RCC_GetSysClockFreq+0x188>)
 80029f0:	fb03 f201 	mul.w	r2, r3, r1
 80029f4:	2300      	movs	r3, #0
 80029f6:	fb00 f303 	mul.w	r3, r0, r3
 80029fa:	4413      	add	r3, r2
 80029fc:	4a43      	ldr	r2, [pc, #268]	; (8002b0c <HAL_RCC_GetSysClockFreq+0x188>)
 80029fe:	fba0 1202 	umull	r1, r2, r0, r2
 8002a02:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002a04:	460a      	mov	r2, r1
 8002a06:	62ba      	str	r2, [r7, #40]	; 0x28
 8002a08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a0a:	4413      	add	r3, r2
 8002a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a10:	2200      	movs	r2, #0
 8002a12:	61bb      	str	r3, [r7, #24]
 8002a14:	61fa      	str	r2, [r7, #28]
 8002a16:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a1a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002a1e:	f7fd fbf3 	bl	8000208 <__aeabi_uldivmod>
 8002a22:	4602      	mov	r2, r0
 8002a24:	460b      	mov	r3, r1
 8002a26:	4613      	mov	r3, r2
 8002a28:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a2a:	e053      	b.n	8002ad4 <HAL_RCC_GetSysClockFreq+0x150>
=======
 8002980:	4b4f      	ldr	r3, [pc, #316]	; (8002ac0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002988:	637b      	str	r3, [r7, #52]	; 0x34
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80029de:	4b4d      	ldr	r3, [pc, #308]	; (8002b14 <HAL_RCC_GetSysClockFreq+0x180>)
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d028      	beq.n	8002a3c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
<<<<<<< HEAD
 80029ea:	4b4a      	ldr	r3, [pc, #296]	; (8002b14 <HAL_RCC_GetSysClockFreq+0x180>)
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	099b      	lsrs	r3, r3, #6
 80029f0:	2200      	movs	r2, #0
 80029f2:	623b      	str	r3, [r7, #32]
 80029f4:	627a      	str	r2, [r7, #36]	; 0x24
 80029f6:	6a3b      	ldr	r3, [r7, #32]
 80029f8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80029fc:	2100      	movs	r1, #0
 80029fe:	4b47      	ldr	r3, [pc, #284]	; (8002b1c <HAL_RCC_GetSysClockFreq+0x188>)
 8002a00:	fb03 f201 	mul.w	r2, r3, r1
 8002a04:	2300      	movs	r3, #0
 8002a06:	fb00 f303 	mul.w	r3, r0, r3
 8002a0a:	4413      	add	r3, r2
 8002a0c:	4a43      	ldr	r2, [pc, #268]	; (8002b1c <HAL_RCC_GetSysClockFreq+0x188>)
 8002a0e:	fba0 1202 	umull	r1, r2, r0, r2
 8002a12:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002a14:	460a      	mov	r2, r1
 8002a16:	62ba      	str	r2, [r7, #40]	; 0x28
 8002a18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a1a:	4413      	add	r3, r2
 8002a1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a20:	2200      	movs	r2, #0
 8002a22:	61bb      	str	r3, [r7, #24]
 8002a24:	61fa      	str	r2, [r7, #28]
 8002a26:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a2a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002a2e:	f7fd fbeb 	bl	8000208 <__aeabi_uldivmod>
 8002a32:	4602      	mov	r2, r0
 8002a34:	460b      	mov	r3, r1
 8002a36:	4613      	mov	r3, r2
 8002a38:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a3a:	e053      	b.n	8002ae4 <HAL_RCC_GetSysClockFreq+0x150>
=======
 8002996:	4b4a      	ldr	r3, [pc, #296]	; (8002ac0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	099b      	lsrs	r3, r3, #6
 800299c:	2200      	movs	r2, #0
 800299e:	623b      	str	r3, [r7, #32]
 80029a0:	627a      	str	r2, [r7, #36]	; 0x24
 80029a2:	6a3b      	ldr	r3, [r7, #32]
 80029a4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80029a8:	2100      	movs	r1, #0
 80029aa:	4b47      	ldr	r3, [pc, #284]	; (8002ac8 <HAL_RCC_GetSysClockFreq+0x188>)
 80029ac:	fb03 f201 	mul.w	r2, r3, r1
 80029b0:	2300      	movs	r3, #0
 80029b2:	fb00 f303 	mul.w	r3, r0, r3
 80029b6:	4413      	add	r3, r2
 80029b8:	4a43      	ldr	r2, [pc, #268]	; (8002ac8 <HAL_RCC_GetSysClockFreq+0x188>)
 80029ba:	fba0 1202 	umull	r1, r2, r0, r2
 80029be:	62fa      	str	r2, [r7, #44]	; 0x2c
 80029c0:	460a      	mov	r2, r1
 80029c2:	62ba      	str	r2, [r7, #40]	; 0x28
 80029c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029c6:	4413      	add	r3, r2
 80029c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029cc:	2200      	movs	r2, #0
 80029ce:	61bb      	str	r3, [r7, #24]
 80029d0:	61fa      	str	r2, [r7, #28]
 80029d2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80029d6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80029da:	f7fd fc15 	bl	8000208 <__aeabi_uldivmod>
 80029de:	4602      	mov	r2, r0
 80029e0:	460b      	mov	r3, r1
 80029e2:	4613      	mov	r3, r2
 80029e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80029e6:	e053      	b.n	8002a90 <HAL_RCC_GetSysClockFreq+0x150>
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
<<<<<<< HEAD
 8002a3c:	4b35      	ldr	r3, [pc, #212]	; (8002b14 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	099b      	lsrs	r3, r3, #6
 8002a42:	2200      	movs	r2, #0
 8002a44:	613b      	str	r3, [r7, #16]
 8002a46:	617a      	str	r2, [r7, #20]
 8002a48:	693b      	ldr	r3, [r7, #16]
 8002a4a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002a4e:	f04f 0b00 	mov.w	fp, #0
 8002a52:	4652      	mov	r2, sl
 8002a54:	465b      	mov	r3, fp
 8002a56:	f04f 0000 	mov.w	r0, #0
 8002a5a:	f04f 0100 	mov.w	r1, #0
 8002a5e:	0159      	lsls	r1, r3, #5
 8002a60:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a64:	0150      	lsls	r0, r2, #5
 8002a66:	4602      	mov	r2, r0
 8002a68:	460b      	mov	r3, r1
 8002a6a:	ebb2 080a 	subs.w	r8, r2, sl
 8002a6e:	eb63 090b 	sbc.w	r9, r3, fp
 8002a72:	f04f 0200 	mov.w	r2, #0
 8002a76:	f04f 0300 	mov.w	r3, #0
 8002a7a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002a7e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002a82:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002a86:	ebb2 0408 	subs.w	r4, r2, r8
 8002a8a:	eb63 0509 	sbc.w	r5, r3, r9
 8002a8e:	f04f 0200 	mov.w	r2, #0
 8002a92:	f04f 0300 	mov.w	r3, #0
 8002a96:	00eb      	lsls	r3, r5, #3
 8002a98:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002a9c:	00e2      	lsls	r2, r4, #3
 8002a9e:	4614      	mov	r4, r2
 8002aa0:	461d      	mov	r5, r3
 8002aa2:	eb14 030a 	adds.w	r3, r4, sl
 8002aa6:	603b      	str	r3, [r7, #0]
 8002aa8:	eb45 030b 	adc.w	r3, r5, fp
 8002aac:	607b      	str	r3, [r7, #4]
 8002aae:	f04f 0200 	mov.w	r2, #0
 8002ab2:	f04f 0300 	mov.w	r3, #0
 8002ab6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002aba:	4629      	mov	r1, r5
 8002abc:	028b      	lsls	r3, r1, #10
 8002abe:	4621      	mov	r1, r4
 8002ac0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002ac4:	4621      	mov	r1, r4
 8002ac6:	028a      	lsls	r2, r1, #10
 8002ac8:	4610      	mov	r0, r2
 8002aca:	4619      	mov	r1, r3
 8002acc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ace:	2200      	movs	r2, #0
 8002ad0:	60bb      	str	r3, [r7, #8]
 8002ad2:	60fa      	str	r2, [r7, #12]
 8002ad4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002ad8:	f7fd fb96 	bl	8000208 <__aeabi_uldivmod>
 8002adc:	4602      	mov	r2, r0
 8002ade:	460b      	mov	r3, r1
 8002ae0:	4613      	mov	r3, r2
 8002ae2:	63fb      	str	r3, [r7, #60]	; 0x3c
=======
<<<<<<< HEAD
 8002a2c:	4b35      	ldr	r3, [pc, #212]	; (8002b04 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	099b      	lsrs	r3, r3, #6
 8002a32:	2200      	movs	r2, #0
 8002a34:	613b      	str	r3, [r7, #16]
 8002a36:	617a      	str	r2, [r7, #20]
 8002a38:	693b      	ldr	r3, [r7, #16]
 8002a3a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002a3e:	f04f 0b00 	mov.w	fp, #0
 8002a42:	4652      	mov	r2, sl
 8002a44:	465b      	mov	r3, fp
 8002a46:	f04f 0000 	mov.w	r0, #0
 8002a4a:	f04f 0100 	mov.w	r1, #0
 8002a4e:	0159      	lsls	r1, r3, #5
 8002a50:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a54:	0150      	lsls	r0, r2, #5
 8002a56:	4602      	mov	r2, r0
 8002a58:	460b      	mov	r3, r1
 8002a5a:	ebb2 080a 	subs.w	r8, r2, sl
 8002a5e:	eb63 090b 	sbc.w	r9, r3, fp
 8002a62:	f04f 0200 	mov.w	r2, #0
 8002a66:	f04f 0300 	mov.w	r3, #0
 8002a6a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002a6e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002a72:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002a76:	ebb2 0408 	subs.w	r4, r2, r8
 8002a7a:	eb63 0509 	sbc.w	r5, r3, r9
 8002a7e:	f04f 0200 	mov.w	r2, #0
 8002a82:	f04f 0300 	mov.w	r3, #0
 8002a86:	00eb      	lsls	r3, r5, #3
 8002a88:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002a8c:	00e2      	lsls	r2, r4, #3
 8002a8e:	4614      	mov	r4, r2
 8002a90:	461d      	mov	r5, r3
 8002a92:	eb14 030a 	adds.w	r3, r4, sl
 8002a96:	603b      	str	r3, [r7, #0]
 8002a98:	eb45 030b 	adc.w	r3, r5, fp
 8002a9c:	607b      	str	r3, [r7, #4]
 8002a9e:	f04f 0200 	mov.w	r2, #0
 8002aa2:	f04f 0300 	mov.w	r3, #0
 8002aa6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002aaa:	4629      	mov	r1, r5
 8002aac:	028b      	lsls	r3, r1, #10
 8002aae:	4621      	mov	r1, r4
 8002ab0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002ab4:	4621      	mov	r1, r4
 8002ab6:	028a      	lsls	r2, r1, #10
 8002ab8:	4610      	mov	r0, r2
 8002aba:	4619      	mov	r1, r3
 8002abc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002abe:	2200      	movs	r2, #0
 8002ac0:	60bb      	str	r3, [r7, #8]
 8002ac2:	60fa      	str	r2, [r7, #12]
 8002ac4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002ac8:	f7fd fb9e 	bl	8000208 <__aeabi_uldivmod>
 8002acc:	4602      	mov	r2, r0
 8002ace:	460b      	mov	r3, r1
 8002ad0:	4613      	mov	r3, r2
 8002ad2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002ad4:	4b0b      	ldr	r3, [pc, #44]	; (8002b04 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	0c1b      	lsrs	r3, r3, #16
 8002ada:	f003 0303 	and.w	r3, r3, #3
 8002ade:	3301      	adds	r3, #1
 8002ae0:	005b      	lsls	r3, r3, #1
 8002ae2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8002ae4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ae8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aec:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002aee:	e002      	b.n	8002af6 <HAL_RCC_GetSysClockFreq+0x172>
=======
 80029e8:	4b35      	ldr	r3, [pc, #212]	; (8002ac0 <HAL_RCC_GetSysClockFreq+0x180>)
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	099b      	lsrs	r3, r3, #6
 80029ee:	2200      	movs	r2, #0
 80029f0:	613b      	str	r3, [r7, #16]
 80029f2:	617a      	str	r2, [r7, #20]
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80029fa:	f04f 0b00 	mov.w	fp, #0
 80029fe:	4652      	mov	r2, sl
 8002a00:	465b      	mov	r3, fp
 8002a02:	f04f 0000 	mov.w	r0, #0
 8002a06:	f04f 0100 	mov.w	r1, #0
 8002a0a:	0159      	lsls	r1, r3, #5
 8002a0c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a10:	0150      	lsls	r0, r2, #5
 8002a12:	4602      	mov	r2, r0
 8002a14:	460b      	mov	r3, r1
 8002a16:	ebb2 080a 	subs.w	r8, r2, sl
 8002a1a:	eb63 090b 	sbc.w	r9, r3, fp
 8002a1e:	f04f 0200 	mov.w	r2, #0
 8002a22:	f04f 0300 	mov.w	r3, #0
 8002a26:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002a2a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002a2e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002a32:	ebb2 0408 	subs.w	r4, r2, r8
 8002a36:	eb63 0509 	sbc.w	r5, r3, r9
 8002a3a:	f04f 0200 	mov.w	r2, #0
 8002a3e:	f04f 0300 	mov.w	r3, #0
 8002a42:	00eb      	lsls	r3, r5, #3
 8002a44:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002a48:	00e2      	lsls	r2, r4, #3
 8002a4a:	4614      	mov	r4, r2
 8002a4c:	461d      	mov	r5, r3
 8002a4e:	eb14 030a 	adds.w	r3, r4, sl
 8002a52:	603b      	str	r3, [r7, #0]
 8002a54:	eb45 030b 	adc.w	r3, r5, fp
 8002a58:	607b      	str	r3, [r7, #4]
 8002a5a:	f04f 0200 	mov.w	r2, #0
 8002a5e:	f04f 0300 	mov.w	r3, #0
 8002a62:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002a66:	4629      	mov	r1, r5
 8002a68:	028b      	lsls	r3, r1, #10
 8002a6a:	4621      	mov	r1, r4
 8002a6c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002a70:	4621      	mov	r1, r4
 8002a72:	028a      	lsls	r2, r1, #10
 8002a74:	4610      	mov	r0, r2
 8002a76:	4619      	mov	r1, r3
 8002a78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	60bb      	str	r3, [r7, #8]
 8002a7e:	60fa      	str	r2, [r7, #12]
 8002a80:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002a84:	f7fd fbc0 	bl	8000208 <__aeabi_uldivmod>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	460b      	mov	r3, r1
 8002a8c:	4613      	mov	r3, r2
 8002a8e:	63fb      	str	r3, [r7, #60]	; 0x3c
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002ae4:	4b0b      	ldr	r3, [pc, #44]	; (8002b14 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	0c1b      	lsrs	r3, r3, #16
 8002aea:	f003 0303 	and.w	r3, r3, #3
 8002aee:	3301      	adds	r3, #1
 8002af0:	005b      	lsls	r3, r3, #1
 8002af2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8002af4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002af8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002afc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
<<<<<<< HEAD
 8002afe:	e002      	b.n	8002b06 <HAL_RCC_GetSysClockFreq+0x172>
=======
 8002aaa:	e002      	b.n	8002ab2 <HAL_RCC_GetSysClockFreq+0x172>
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
<<<<<<< HEAD
 8002b00:	4b05      	ldr	r3, [pc, #20]	; (8002b18 <HAL_RCC_GetSysClockFreq+0x184>)
 8002b02:	63bb      	str	r3, [r7, #56]	; 0x38
=======
<<<<<<< HEAD
 8002af0:	4b05      	ldr	r3, [pc, #20]	; (8002b08 <HAL_RCC_GetSysClockFreq+0x184>)
 8002af2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002af4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002af6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	3740      	adds	r7, #64	; 0x40
 8002afc:	46bd      	mov	sp, r7
 8002afe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b02:	bf00      	nop
 8002b04:	40023800 	.word	0x40023800
 8002b08:	00f42400 	.word	0x00f42400
 8002b0c:	017d7840 	.word	0x017d7840

08002b10 <HAL_RCC_GetHCLKFreq>:
=======
 8002aac:	4b05      	ldr	r3, [pc, #20]	; (8002ac4 <HAL_RCC_GetSysClockFreq+0x184>)
 8002aae:	63bb      	str	r3, [r7, #56]	; 0x38
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
      break;
 8002b04:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	3740      	adds	r7, #64	; 0x40
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b12:	bf00      	nop
 8002b14:	40023800 	.word	0x40023800
 8002b18:	00f42400 	.word	0x00f42400
 8002b1c:	017d7840 	.word	0x017d7840

<<<<<<< HEAD
08002b20 <HAL_RCC_GetHCLKFreq>:
=======
08002acc <HAL_RCC_GetHCLKFreq>:
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
<<<<<<< HEAD
 8002b20:	b480      	push	{r7}
 8002b22:	af00      	add	r7, sp, #0
=======
<<<<<<< HEAD
 8002b10:	b480      	push	{r7}
 8002b12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b14:	4b03      	ldr	r3, [pc, #12]	; (8002b24 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b16:	681b      	ldr	r3, [r3, #0]
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b20:	4770      	bx	lr
 8002b22:	bf00      	nop
 8002b24:	20000008 	.word	0x20000008

08002b28 <HAL_RCC_GetPCLK1Freq>:
=======
 8002acc:	b480      	push	{r7}
 8002ace:	af00      	add	r7, sp, #0
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  return SystemCoreClock;
 8002b24:	4b03      	ldr	r3, [pc, #12]	; (8002b34 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b26:	681b      	ldr	r3, [r3, #0]
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b30:	4770      	bx	lr
 8002b32:	bf00      	nop
 8002b34:	20000008 	.word	0x20000008

<<<<<<< HEAD
08002b38 <HAL_RCC_GetPCLK1Freq>:
=======
08002ae4 <HAL_RCC_GetPCLK1Freq>:
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
<<<<<<< HEAD
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	af00      	add	r7, sp, #0
=======
<<<<<<< HEAD
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002b2c:	f7ff fff0 	bl	8002b10 <HAL_RCC_GetHCLKFreq>
 8002b30:	4602      	mov	r2, r0
 8002b32:	4b05      	ldr	r3, [pc, #20]	; (8002b48 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	0a9b      	lsrs	r3, r3, #10
 8002b38:	f003 0307 	and.w	r3, r3, #7
 8002b3c:	4903      	ldr	r1, [pc, #12]	; (8002b4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b3e:	5ccb      	ldrb	r3, [r1, r3]
 8002b40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	bd80      	pop	{r7, pc}
 8002b48:	40023800 	.word	0x40023800
 8002b4c:	0800501c 	.word	0x0800501c

08002b50 <HAL_RCC_GetPCLK2Freq>:
=======
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	af00      	add	r7, sp, #0
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002b3c:	f7ff fff0 	bl	8002b20 <HAL_RCC_GetHCLKFreq>
 8002b40:	4602      	mov	r2, r0
 8002b42:	4b05      	ldr	r3, [pc, #20]	; (8002b58 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	0a9b      	lsrs	r3, r3, #10
 8002b48:	f003 0307 	and.w	r3, r3, #7
 8002b4c:	4903      	ldr	r1, [pc, #12]	; (8002b5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b4e:	5ccb      	ldrb	r3, [r1, r3]
 8002b50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	bd80      	pop	{r7, pc}
 8002b58:	40023800 	.word	0x40023800
 8002b5c:	0800502c 	.word	0x0800502c

<<<<<<< HEAD
08002b60 <HAL_RCC_GetPCLK2Freq>:
=======
08002b0c <HAL_RCC_GetPCLK2Freq>:
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
<<<<<<< HEAD
 8002b60:	b580      	push	{r7, lr}
 8002b62:	af00      	add	r7, sp, #0
=======
<<<<<<< HEAD
 8002b50:	b580      	push	{r7, lr}
 8002b52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002b54:	f7ff ffdc 	bl	8002b10 <HAL_RCC_GetHCLKFreq>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	4b05      	ldr	r3, [pc, #20]	; (8002b70 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	0b5b      	lsrs	r3, r3, #13
 8002b60:	f003 0307 	and.w	r3, r3, #7
 8002b64:	4903      	ldr	r1, [pc, #12]	; (8002b74 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b66:	5ccb      	ldrb	r3, [r1, r3]
 8002b68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	bd80      	pop	{r7, pc}
 8002b70:	40023800 	.word	0x40023800
 8002b74:	0800501c 	.word	0x0800501c

08002b78 <HAL_RCCEx_PeriphCLKConfig>:
=======
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	af00      	add	r7, sp, #0
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002b64:	f7ff ffdc 	bl	8002b20 <HAL_RCC_GetHCLKFreq>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	4b05      	ldr	r3, [pc, #20]	; (8002b80 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	0b5b      	lsrs	r3, r3, #13
 8002b70:	f003 0307 	and.w	r3, r3, #7
 8002b74:	4903      	ldr	r1, [pc, #12]	; (8002b84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b76:	5ccb      	ldrb	r3, [r1, r3]
 8002b78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	bd80      	pop	{r7, pc}
 8002b80:	40023800 	.word	0x40023800
 8002b84:	0800502c 	.word	0x0800502c

<<<<<<< HEAD
08002b88 <HAL_RCCEx_PeriphCLKConfig>:
=======
08002b34 <HAL_RCCEx_PeriphCLKConfig>:
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
<<<<<<< HEAD
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b088      	sub	sp, #32
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
=======
<<<<<<< HEAD
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b088      	sub	sp, #32
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002b80:	2300      	movs	r3, #0
 8002b82:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002b84:	2300      	movs	r3, #0
 8002b86:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002b90:	2300      	movs	r3, #0
 8002b92:	61bb      	str	r3, [r7, #24]
=======
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b088      	sub	sp, #32
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  uint32_t tickstart = 0;
 8002b90:	2300      	movs	r3, #0
 8002b92:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002b94:	2300      	movs	r3, #0
 8002b96:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
<<<<<<< HEAD
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	61bb      	str	r3, [r7, #24]
=======
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	61bb      	str	r3, [r7, #24]
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
<<<<<<< HEAD
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f003 0301 	and.w	r3, r3, #1
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d012      	beq.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
=======
<<<<<<< HEAD
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 0301 	and.w	r3, r3, #1
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d012      	beq.n	8002bc6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
=======
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f003 0301 	and.w	r3, r3, #1
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d012      	beq.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0x4e>
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
<<<<<<< HEAD
 8002bb0:	4b69      	ldr	r3, [pc, #420]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	4a68      	ldr	r2, [pc, #416]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bb6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002bba:	6093      	str	r3, [r2, #8]
 8002bbc:	4b66      	ldr	r3, [pc, #408]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bbe:	689a      	ldr	r2, [r3, #8]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bc4:	4964      	ldr	r1, [pc, #400]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	608b      	str	r3, [r1, #8]
=======
<<<<<<< HEAD
 8002ba0:	4b69      	ldr	r3, [pc, #420]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	4a68      	ldr	r2, [pc, #416]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ba6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002baa:	6093      	str	r3, [r2, #8]
 8002bac:	4b66      	ldr	r3, [pc, #408]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bae:	689a      	ldr	r2, [r3, #8]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bb4:	4964      	ldr	r1, [pc, #400]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d101      	bne.n	8002bc6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	61fb      	str	r3, [r7, #28]
=======
 8002b5c:	4b69      	ldr	r3, [pc, #420]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	4a68      	ldr	r2, [pc, #416]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b62:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002b66:	6093      	str	r3, [r2, #8]
 8002b68:	4b66      	ldr	r3, [pc, #408]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b6a:	689a      	ldr	r2, [r3, #8]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b70:	4964      	ldr	r1, [pc, #400]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b72:	4313      	orrs	r3, r2
 8002b74:	608b      	str	r3, [r1, #8]
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d101      	bne.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
<<<<<<< HEAD
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	61fb      	str	r3, [r7, #28]
=======
 8002b7e:	2301      	movs	r3, #1
 8002b80:	61fb      	str	r3, [r7, #28]
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
<<<<<<< HEAD
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d017      	beq.n	8002c12 <HAL_RCCEx_PeriphCLKConfig+0x8a>
=======
<<<<<<< HEAD
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d017      	beq.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x8a>
=======
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d017      	beq.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0x8a>
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
<<<<<<< HEAD
 8002be2:	4b5d      	ldr	r3, [pc, #372]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002be4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002be8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bf0:	4959      	ldr	r1, [pc, #356]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
=======
<<<<<<< HEAD
 8002bd2:	4b5d      	ldr	r3, [pc, #372]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002bd8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002be0:	4959      	ldr	r1, [pc, #356]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002be2:	4313      	orrs	r3, r2
 8002be4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002bf0:	d101      	bne.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d101      	bne.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	61bb      	str	r3, [r7, #24]
=======
 8002b8e:	4b5d      	ldr	r3, [pc, #372]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b94:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b9c:	4959      	ldr	r1, [pc, #356]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bfc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c00:	d101      	bne.n	8002c06 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002c02:	2301      	movs	r3, #1
 8002c04:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d101      	bne.n	8002c12 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
<<<<<<< HEAD
 8002c0e:	2301      	movs	r3, #1
 8002c10:	61bb      	str	r3, [r7, #24]
=======
 8002bba:	2301      	movs	r3, #1
 8002bbc:	61bb      	str	r3, [r7, #24]
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
<<<<<<< HEAD
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d017      	beq.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0xc6>
=======
<<<<<<< HEAD
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d017      	beq.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0xc6>
=======
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d017      	beq.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0xc6>
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
<<<<<<< HEAD
 8002c1e:	4b4e      	ldr	r3, [pc, #312]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c24:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c2c:	494a      	ldr	r1, [pc, #296]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
=======
<<<<<<< HEAD
 8002c0e:	4b4e      	ldr	r3, [pc, #312]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c14:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c1c:	494a      	ldr	r1, [pc, #296]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c28:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c2c:	d101      	bne.n	8002c32 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d101      	bne.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	61bb      	str	r3, [r7, #24]
=======
 8002bca:	4b4e      	ldr	r3, [pc, #312]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bcc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002bd0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd8:	494a      	ldr	r1, [pc, #296]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c38:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c3c:	d101      	bne.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d101      	bne.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
<<<<<<< HEAD
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	61bb      	str	r3, [r7, #24]
=======
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	61bb      	str	r3, [r7, #24]
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
<<<<<<< HEAD
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d001      	beq.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	61fb      	str	r3, [r7, #28]
=======
<<<<<<< HEAD
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d001      	beq.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	61fb      	str	r3, [r7, #28]
=======
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d001      	beq.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002c06:	2301      	movs	r3, #1
 8002c08:	61fb      	str	r3, [r7, #28]
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
<<<<<<< HEAD
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f003 0320 	and.w	r3, r3, #32
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	f000 808b 	beq.w	8002d82 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
=======
<<<<<<< HEAD
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 0320 	and.w	r3, r3, #32
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	f000 808b 	beq.w	8002d72 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
=======
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 0320 	and.w	r3, r3, #32
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	f000 808b 	beq.w	8002d2e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
<<<<<<< HEAD
 8002c6c:	4b3a      	ldr	r3, [pc, #232]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c70:	4a39      	ldr	r2, [pc, #228]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c76:	6413      	str	r3, [r2, #64]	; 0x40
 8002c78:	4b37      	ldr	r3, [pc, #220]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c80:	60bb      	str	r3, [r7, #8]
 8002c82:	68bb      	ldr	r3, [r7, #8]
=======
<<<<<<< HEAD
 8002c5c:	4b3a      	ldr	r3, [pc, #232]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c60:	4a39      	ldr	r2, [pc, #228]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c66:	6413      	str	r3, [r2, #64]	; 0x40
 8002c68:	4b37      	ldr	r3, [pc, #220]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c70:	60bb      	str	r3, [r7, #8]
 8002c72:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002c74:	4b35      	ldr	r3, [pc, #212]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a34      	ldr	r2, [pc, #208]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002c7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c7e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c80:	f7fe f946 	bl	8000f10 <HAL_GetTick>
 8002c84:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002c86:	e008      	b.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c88:	f7fe f942 	bl	8000f10 <HAL_GetTick>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	1ad3      	subs	r3, r2, r3
 8002c92:	2b64      	cmp	r3, #100	; 0x64
 8002c94:	d901      	bls.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002c96:	2303      	movs	r3, #3
 8002c98:	e357      	b.n	800334a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002c9a:	4b2c      	ldr	r3, [pc, #176]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d0f0      	beq.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0x110>
=======
 8002c18:	4b3a      	ldr	r3, [pc, #232]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c1c:	4a39      	ldr	r2, [pc, #228]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c22:	6413      	str	r3, [r2, #64]	; 0x40
 8002c24:	4b37      	ldr	r3, [pc, #220]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c2c:	60bb      	str	r3, [r7, #8]
 8002c2e:	68bb      	ldr	r3, [r7, #8]
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002c84:	4b35      	ldr	r3, [pc, #212]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a34      	ldr	r2, [pc, #208]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002c8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c8e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c90:	f7fe f946 	bl	8000f20 <HAL_GetTick>
 8002c94:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002c96:	e008      	b.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c98:	f7fe f942 	bl	8000f20 <HAL_GetTick>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	1ad3      	subs	r3, r2, r3
 8002ca2:	2b64      	cmp	r3, #100	; 0x64
 8002ca4:	d901      	bls.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002ca6:	2303      	movs	r3, #3
 8002ca8:	e357      	b.n	800335a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
<<<<<<< HEAD
 8002caa:	4b2c      	ldr	r3, [pc, #176]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d0f0      	beq.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0x110>
=======
 8002c56:	4b2c      	ldr	r3, [pc, #176]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d0f0      	beq.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x110>
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
<<<<<<< HEAD
 8002cb6:	4b28      	ldr	r3, [pc, #160]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cbe:	613b      	str	r3, [r7, #16]
=======
<<<<<<< HEAD
 8002ca6:	4b28      	ldr	r3, [pc, #160]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ca8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002caa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cae:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d035      	beq.n	8002d22 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cbe:	693a      	ldr	r2, [r7, #16]
 8002cc0:	429a      	cmp	r2, r3
 8002cc2:	d02e      	beq.n	8002d22 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002cc4:	4b20      	ldr	r3, [pc, #128]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ccc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002cce:	4b1e      	ldr	r3, [pc, #120]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cd2:	4a1d      	ldr	r2, [pc, #116]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cd8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002cda:	4b1b      	ldr	r3, [pc, #108]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cde:	4a1a      	ldr	r2, [pc, #104]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ce0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ce4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002ce6:	4a18      	ldr	r2, [pc, #96]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002cec:	4b16      	ldr	r3, [pc, #88]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cf0:	f003 0301 	and.w	r3, r3, #1
 8002cf4:	2b01      	cmp	r3, #1
 8002cf6:	d114      	bne.n	8002d22 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cf8:	f7fe f90a 	bl	8000f10 <HAL_GetTick>
 8002cfc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cfe:	e00a      	b.n	8002d16 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d00:	f7fe f906 	bl	8000f10 <HAL_GetTick>
 8002d04:	4602      	mov	r2, r0
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	1ad3      	subs	r3, r2, r3
 8002d0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d901      	bls.n	8002d16 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002d12:	2303      	movs	r3, #3
 8002d14:	e319      	b.n	800334a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d16:	4b0c      	ldr	r3, [pc, #48]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d1a:	f003 0302 	and.w	r3, r3, #2
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d0ee      	beq.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x188>
=======
 8002c62:	4b28      	ldr	r3, [pc, #160]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c6a:	613b      	str	r3, [r7, #16]
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d035      	beq.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cce:	693a      	ldr	r2, [r7, #16]
 8002cd0:	429a      	cmp	r2, r3
 8002cd2:	d02e      	beq.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002cd4:	4b20      	ldr	r3, [pc, #128]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cd8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cdc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002cde:	4b1e      	ldr	r3, [pc, #120]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ce0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ce2:	4a1d      	ldr	r2, [pc, #116]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ce4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ce8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002cea:	4b1b      	ldr	r3, [pc, #108]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cee:	4a1a      	ldr	r2, [pc, #104]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cf0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cf4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002cf6:	4a18      	ldr	r2, [pc, #96]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002cfc:	4b16      	ldr	r3, [pc, #88]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d00:	f003 0301 	and.w	r3, r3, #1
 8002d04:	2b01      	cmp	r3, #1
 8002d06:	d114      	bne.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d08:	f7fe f90a 	bl	8000f20 <HAL_GetTick>
 8002d0c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d0e:	e00a      	b.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d10:	f7fe f906 	bl	8000f20 <HAL_GetTick>
 8002d14:	4602      	mov	r2, r0
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	1ad3      	subs	r3, r2, r3
 8002d1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d901      	bls.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002d22:	2303      	movs	r3, #3
 8002d24:	e319      	b.n	800335a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
<<<<<<< HEAD
 8002d26:	4b0c      	ldr	r3, [pc, #48]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d2a:	f003 0302 	and.w	r3, r3, #2
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d0ee      	beq.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x188>
=======
 8002cd2:	4b0c      	ldr	r3, [pc, #48]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cd6:	f003 0302 	and.w	r3, r3, #2
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d0ee      	beq.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x188>
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
<<<<<<< HEAD
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d3a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002d3e:	d111      	bne.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002d40:	4b05      	ldr	r3, [pc, #20]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002d4c:	4b04      	ldr	r3, [pc, #16]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002d4e:	400b      	ands	r3, r1
 8002d50:	4901      	ldr	r1, [pc, #4]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d52:	4313      	orrs	r3, r2
 8002d54:	608b      	str	r3, [r1, #8]
 8002d56:	e00b      	b.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002d58:	40023800 	.word	0x40023800
 8002d5c:	40007000 	.word	0x40007000
 8002d60:	0ffffcff 	.word	0x0ffffcff
 8002d64:	4baa      	ldr	r3, [pc, #680]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	4aa9      	ldr	r2, [pc, #676]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d6a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002d6e:	6093      	str	r3, [r2, #8]
 8002d70:	4ba7      	ldr	r3, [pc, #668]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d72:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d7c:	49a4      	ldr	r1, [pc, #656]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	670b      	str	r3, [r1, #112]	; 0x70
=======
<<<<<<< HEAD
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d2a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002d2e:	d111      	bne.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002d30:	4b05      	ldr	r3, [pc, #20]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002d3c:	4b04      	ldr	r3, [pc, #16]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002d3e:	400b      	ands	r3, r1
 8002d40:	4901      	ldr	r1, [pc, #4]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d42:	4313      	orrs	r3, r2
 8002d44:	608b      	str	r3, [r1, #8]
 8002d46:	e00b      	b.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002d48:	40023800 	.word	0x40023800
 8002d4c:	40007000 	.word	0x40007000
 8002d50:	0ffffcff 	.word	0x0ffffcff
 8002d54:	4baa      	ldr	r3, [pc, #680]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	4aa9      	ldr	r2, [pc, #676]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d5a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002d5e:	6093      	str	r3, [r2, #8]
 8002d60:	4ba7      	ldr	r3, [pc, #668]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d62:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d6c:	49a4      	ldr	r1, [pc, #656]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	670b      	str	r3, [r1, #112]	; 0x70
=======
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ce6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002cea:	d111      	bne.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002cec:	4b05      	ldr	r3, [pc, #20]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002cf8:	4b04      	ldr	r3, [pc, #16]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002cfa:	400b      	ands	r3, r1
 8002cfc:	4901      	ldr	r1, [pc, #4]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	608b      	str	r3, [r1, #8]
 8002d02:	e00b      	b.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002d04:	40023800 	.word	0x40023800
 8002d08:	40007000 	.word	0x40007000
 8002d0c:	0ffffcff 	.word	0x0ffffcff
 8002d10:	4baa      	ldr	r3, [pc, #680]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	4aa9      	ldr	r2, [pc, #676]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d16:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002d1a:	6093      	str	r3, [r2, #8]
 8002d1c:	4ba7      	ldr	r3, [pc, #668]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d1e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d28:	49a4      	ldr	r1, [pc, #656]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	670b      	str	r3, [r1, #112]	; 0x70
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
<<<<<<< HEAD
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 0310 	and.w	r3, r3, #16
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d010      	beq.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0x228>
=======
<<<<<<< HEAD
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f003 0310 	and.w	r3, r3, #16
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d010      	beq.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0x228>
=======
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 0310 	and.w	r3, r3, #16
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d010      	beq.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x228>
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
<<<<<<< HEAD
 8002d8e:	4ba0      	ldr	r3, [pc, #640]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d94:	4a9e      	ldr	r2, [pc, #632]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d96:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d9a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002d9e:	4b9c      	ldr	r3, [pc, #624]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002da0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002da8:	4999      	ldr	r1, [pc, #612]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002daa:	4313      	orrs	r3, r2
 8002dac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
=======
<<<<<<< HEAD
 8002d7e:	4ba0      	ldr	r3, [pc, #640]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d84:	4a9e      	ldr	r2, [pc, #632]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d86:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d8a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002d8e:	4b9c      	ldr	r3, [pc, #624]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d90:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d98:	4999      	ldr	r1, [pc, #612]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
=======
 8002d3a:	4ba0      	ldr	r3, [pc, #640]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d40:	4a9e      	ldr	r2, [pc, #632]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d42:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d46:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002d4a:	4b9c      	ldr	r3, [pc, #624]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d4c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d54:	4999      	ldr	r1, [pc, #612]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d56:	4313      	orrs	r3, r2
 8002d58:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
<<<<<<< HEAD
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d00a      	beq.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
=======
<<<<<<< HEAD
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d00a      	beq.n	8002dc2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
=======
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d00a      	beq.n	8002d7e <HAL_RCCEx_PeriphCLKConfig+0x24a>
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
<<<<<<< HEAD
 8002dbc:	4b94      	ldr	r3, [pc, #592]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002dbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dc2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002dca:	4991      	ldr	r1, [pc, #580]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
=======
<<<<<<< HEAD
 8002dac:	4b94      	ldr	r3, [pc, #592]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002dae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002db2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002dba:	4991      	ldr	r1, [pc, #580]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
=======
 8002d68:	4b94      	ldr	r3, [pc, #592]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d6e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d76:	4991      	ldr	r1, [pc, #580]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
<<<<<<< HEAD
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d00a      	beq.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
=======
<<<<<<< HEAD
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d00a      	beq.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
=======
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d00a      	beq.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
<<<<<<< HEAD
 8002dde:	4b8c      	ldr	r3, [pc, #560]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002de0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002de4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002dec:	4988      	ldr	r1, [pc, #544]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002dee:	4313      	orrs	r3, r2
 8002df0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
=======
<<<<<<< HEAD
 8002dce:	4b8c      	ldr	r3, [pc, #560]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002dd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dd4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ddc:	4988      	ldr	r1, [pc, #544]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002dde:	4313      	orrs	r3, r2
 8002de0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
=======
 8002d8a:	4b8c      	ldr	r3, [pc, #560]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d90:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d98:	4988      	ldr	r1, [pc, #544]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
<<<<<<< HEAD
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d00a      	beq.n	8002e16 <HAL_RCCEx_PeriphCLKConfig+0x28e>
=======
<<<<<<< HEAD
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d00a      	beq.n	8002e06 <HAL_RCCEx_PeriphCLKConfig+0x28e>
=======
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d00a      	beq.n	8002dc2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
<<<<<<< HEAD
 8002e00:	4b83      	ldr	r3, [pc, #524]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e06:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e0e:	4980      	ldr	r1, [pc, #512]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e10:	4313      	orrs	r3, r2
 8002e12:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
=======
<<<<<<< HEAD
 8002df0:	4b83      	ldr	r3, [pc, #524]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002df2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002df6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002dfe:	4980      	ldr	r1, [pc, #512]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e00:	4313      	orrs	r3, r2
 8002e02:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
=======
 8002dac:	4b83      	ldr	r3, [pc, #524]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002dae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002db2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002dba:	4980      	ldr	r1, [pc, #512]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
<<<<<<< HEAD
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d00a      	beq.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
=======
<<<<<<< HEAD
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d00a      	beq.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
=======
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d00a      	beq.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
<<<<<<< HEAD
 8002e22:	4b7b      	ldr	r3, [pc, #492]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e28:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e30:	4977      	ldr	r1, [pc, #476]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e32:	4313      	orrs	r3, r2
 8002e34:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
=======
<<<<<<< HEAD
 8002e12:	4b7b      	ldr	r3, [pc, #492]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e18:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e20:	4977      	ldr	r1, [pc, #476]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e22:	4313      	orrs	r3, r2
 8002e24:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
=======
 8002dce:	4b7b      	ldr	r3, [pc, #492]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002dd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dd4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ddc:	4977      	ldr	r1, [pc, #476]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002dde:	4313      	orrs	r3, r2
 8002de0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
<<<<<<< HEAD
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d00a      	beq.n	8002e5a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
=======
<<<<<<< HEAD
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d00a      	beq.n	8002e4a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
=======
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d00a      	beq.n	8002e06 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
<<<<<<< HEAD
 8002e44:	4b72      	ldr	r3, [pc, #456]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e4a:	f023 0203 	bic.w	r2, r3, #3
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e52:	496f      	ldr	r1, [pc, #444]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e54:	4313      	orrs	r3, r2
 8002e56:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
=======
<<<<<<< HEAD
 8002e34:	4b72      	ldr	r3, [pc, #456]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e3a:	f023 0203 	bic.w	r2, r3, #3
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e42:	496f      	ldr	r1, [pc, #444]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e44:	4313      	orrs	r3, r2
 8002e46:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
=======
 8002df0:	4b72      	ldr	r3, [pc, #456]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002df2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002df6:	f023 0203 	bic.w	r2, r3, #3
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dfe:	496f      	ldr	r1, [pc, #444]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e00:	4313      	orrs	r3, r2
 8002e02:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
<<<<<<< HEAD
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d00a      	beq.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
=======
<<<<<<< HEAD
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d00a      	beq.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
=======
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d00a      	beq.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
<<<<<<< HEAD
 8002e66:	4b6a      	ldr	r3, [pc, #424]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e6c:	f023 020c 	bic.w	r2, r3, #12
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e74:	4966      	ldr	r1, [pc, #408]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e76:	4313      	orrs	r3, r2
 8002e78:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
=======
<<<<<<< HEAD
 8002e56:	4b6a      	ldr	r3, [pc, #424]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e5c:	f023 020c 	bic.w	r2, r3, #12
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e64:	4966      	ldr	r1, [pc, #408]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e66:	4313      	orrs	r3, r2
 8002e68:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
=======
 8002e12:	4b6a      	ldr	r3, [pc, #424]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e18:	f023 020c 	bic.w	r2, r3, #12
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e20:	4966      	ldr	r1, [pc, #408]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e22:	4313      	orrs	r3, r2
 8002e24:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
<<<<<<< HEAD
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d00a      	beq.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x316>
=======
<<<<<<< HEAD
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d00a      	beq.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x316>
=======
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d00a      	beq.n	8002e4a <HAL_RCCEx_PeriphCLKConfig+0x316>
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
<<<<<<< HEAD
 8002e88:	4b61      	ldr	r3, [pc, #388]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e8e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e96:	495e      	ldr	r1, [pc, #376]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
=======
<<<<<<< HEAD
 8002e78:	4b61      	ldr	r3, [pc, #388]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e7e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e86:	495e      	ldr	r1, [pc, #376]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
=======
 8002e34:	4b61      	ldr	r3, [pc, #388]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e3a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e42:	495e      	ldr	r1, [pc, #376]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e44:	4313      	orrs	r3, r2
 8002e46:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
<<<<<<< HEAD
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d00a      	beq.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x338>
=======
<<<<<<< HEAD
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d00a      	beq.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x338>
=======
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d00a      	beq.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0x338>
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
<<<<<<< HEAD
 8002eaa:	4b59      	ldr	r3, [pc, #356]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002eac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eb0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002eb8:	4955      	ldr	r1, [pc, #340]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
=======
<<<<<<< HEAD
 8002e9a:	4b59      	ldr	r3, [pc, #356]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ea0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ea8:	4955      	ldr	r1, [pc, #340]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
=======
 8002e56:	4b59      	ldr	r3, [pc, #356]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e5c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e64:	4955      	ldr	r1, [pc, #340]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e66:	4313      	orrs	r3, r2
 8002e68:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
<<<<<<< HEAD
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d00a      	beq.n	8002ee2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
=======
<<<<<<< HEAD
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d00a      	beq.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
=======
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d00a      	beq.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x35a>
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
<<<<<<< HEAD
 8002ecc:	4b50      	ldr	r3, [pc, #320]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ece:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ed2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eda:	494d      	ldr	r1, [pc, #308]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002edc:	4313      	orrs	r3, r2
 8002ede:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
=======
<<<<<<< HEAD
 8002ebc:	4b50      	ldr	r3, [pc, #320]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ebe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ec2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eca:	494d      	ldr	r1, [pc, #308]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
=======
 8002e78:	4b50      	ldr	r3, [pc, #320]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e7e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e86:	494d      	ldr	r1, [pc, #308]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
<<<<<<< HEAD
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d00a      	beq.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x37c>
=======
<<<<<<< HEAD
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d00a      	beq.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
=======
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d00a      	beq.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
<<<<<<< HEAD
 8002eee:	4b48      	ldr	r3, [pc, #288]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ef0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ef4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002efc:	4944      	ldr	r1, [pc, #272]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002efe:	4313      	orrs	r3, r2
 8002f00:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
=======
<<<<<<< HEAD
 8002ede:	4b48      	ldr	r3, [pc, #288]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ee0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ee4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eec:	4944      	ldr	r1, [pc, #272]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
=======
 8002e9a:	4b48      	ldr	r3, [pc, #288]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ea0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ea8:	4944      	ldr	r1, [pc, #272]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
<<<<<<< HEAD
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d00a      	beq.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0x39e>
=======
<<<<<<< HEAD
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d00a      	beq.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x39e>
=======
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d00a      	beq.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
<<<<<<< HEAD
 8002f10:	4b3f      	ldr	r3, [pc, #252]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f16:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f1e:	493c      	ldr	r1, [pc, #240]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f20:	4313      	orrs	r3, r2
 8002f22:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
=======
<<<<<<< HEAD
 8002f00:	4b3f      	ldr	r3, [pc, #252]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f06:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f0e:	493c      	ldr	r1, [pc, #240]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f10:	4313      	orrs	r3, r2
 8002f12:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
=======
 8002ebc:	4b3f      	ldr	r3, [pc, #252]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ebe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ec2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eca:	493c      	ldr	r1, [pc, #240]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
<<<<<<< HEAD
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d00a      	beq.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
=======
<<<<<<< HEAD
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d00a      	beq.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
=======
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d00a      	beq.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
<<<<<<< HEAD
 8002f32:	4b37      	ldr	r3, [pc, #220]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f38:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f40:	4933      	ldr	r1, [pc, #204]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f42:	4313      	orrs	r3, r2
 8002f44:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
=======
<<<<<<< HEAD
 8002f22:	4b37      	ldr	r3, [pc, #220]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f28:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f30:	4933      	ldr	r1, [pc, #204]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f32:	4313      	orrs	r3, r2
 8002f34:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
=======
 8002ede:	4b37      	ldr	r3, [pc, #220]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ee0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ee4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002eec:	4933      	ldr	r1, [pc, #204]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
<<<<<<< HEAD
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d00a      	beq.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
=======
<<<<<<< HEAD
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d00a      	beq.n	8002f5a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
=======
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d00a      	beq.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
<<<<<<< HEAD
 8002f54:	4b2e      	ldr	r3, [pc, #184]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f5a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f62:	492b      	ldr	r1, [pc, #172]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f64:	4313      	orrs	r3, r2
 8002f66:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
=======
<<<<<<< HEAD
 8002f44:	4b2e      	ldr	r3, [pc, #184]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f4a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f52:	492b      	ldr	r1, [pc, #172]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f54:	4313      	orrs	r3, r2
 8002f56:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
=======
 8002f00:	4b2e      	ldr	r3, [pc, #184]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f06:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f0e:	492b      	ldr	r1, [pc, #172]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f10:	4313      	orrs	r3, r2
 8002f12:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
<<<<<<< HEAD
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d011      	beq.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0x412>
=======
<<<<<<< HEAD
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d011      	beq.n	8002f8a <HAL_RCCEx_PeriphCLKConfig+0x412>
=======
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d011      	beq.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0x412>
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
<<<<<<< HEAD
 8002f76:	4b26      	ldr	r3, [pc, #152]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f7c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f84:	4922      	ldr	r1, [pc, #136]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f86:	4313      	orrs	r3, r2
 8002f88:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
=======
<<<<<<< HEAD
 8002f66:	4b26      	ldr	r3, [pc, #152]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f6c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f74:	4922      	ldr	r1, [pc, #136]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f76:	4313      	orrs	r3, r2
 8002f78:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f80:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f84:	d101      	bne.n	8002f8a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002f86:	2301      	movs	r3, #1
 8002f88:	61bb      	str	r3, [r7, #24]
=======
 8002f22:	4b26      	ldr	r3, [pc, #152]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f28:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f30:	4922      	ldr	r1, [pc, #136]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f32:	4313      	orrs	r3, r2
 8002f34:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f90:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f94:	d101      	bne.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
<<<<<<< HEAD
 8002f96:	2301      	movs	r3, #1
 8002f98:	61bb      	str	r3, [r7, #24]
=======
 8002f42:	2301      	movs	r3, #1
 8002f44:	61bb      	str	r3, [r7, #24]
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
<<<<<<< HEAD
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f003 0308 	and.w	r3, r3, #8
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d001      	beq.n	8002faa <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	61bb      	str	r3, [r7, #24]
=======
<<<<<<< HEAD
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f003 0308 	and.w	r3, r3, #8
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d001      	beq.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002f96:	2301      	movs	r3, #1
 8002f98:	61bb      	str	r3, [r7, #24]
=======
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f003 0308 	and.w	r3, r3, #8
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d001      	beq.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002f52:	2301      	movs	r3, #1
 8002f54:	61bb      	str	r3, [r7, #24]
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
<<<<<<< HEAD
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d00a      	beq.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0x444>
=======
<<<<<<< HEAD
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d00a      	beq.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x444>
=======
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d00a      	beq.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x444>
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
<<<<<<< HEAD
 8002fb6:	4b16      	ldr	r3, [pc, #88]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002fb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fbc:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fc4:	4912      	ldr	r1, [pc, #72]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
=======
<<<<<<< HEAD
 8002fa6:	4b16      	ldr	r3, [pc, #88]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002fa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fac:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fb4:	4912      	ldr	r1, [pc, #72]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
=======
 8002f62:	4b16      	ldr	r3, [pc, #88]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f68:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f70:	4912      	ldr	r1, [pc, #72]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f72:	4313      	orrs	r3, r2
 8002f74:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
<<<<<<< HEAD
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d00b      	beq.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x468>
=======
<<<<<<< HEAD
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d00b      	beq.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x468>
=======
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d00b      	beq.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x468>
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
<<<<<<< HEAD
 8002fd8:	4b0d      	ldr	r3, [pc, #52]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002fda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fde:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002fe8:	4909      	ldr	r1, [pc, #36]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002fea:	4313      	orrs	r3, r2
 8002fec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
=======
<<<<<<< HEAD
 8002fc8:	4b0d      	ldr	r3, [pc, #52]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002fca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fce:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002fd8:	4909      	ldr	r1, [pc, #36]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
=======
 8002f84:	4b0d      	ldr	r3, [pc, #52]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f8a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f94:	4909      	ldr	r1, [pc, #36]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f96:	4313      	orrs	r3, r2
 8002f98:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
<<<<<<< HEAD
 8002ff0:	69fb      	ldr	r3, [r7, #28]
 8002ff2:	2b01      	cmp	r3, #1
 8002ff4:	d006      	beq.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	f000 80d9 	beq.w	80031b6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
=======
<<<<<<< HEAD
 8002fe0:	69fb      	ldr	r3, [r7, #28]
 8002fe2:	2b01      	cmp	r3, #1
 8002fe4:	d006      	beq.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	f000 80d9 	beq.w	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002ff4:	4b02      	ldr	r3, [pc, #8]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a01      	ldr	r2, [pc, #4]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ffa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002ffe:	e001      	b.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8003000:	40023800 	.word	0x40023800
 8003004:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003006:	f7fd ff83 	bl	8000f10 <HAL_GetTick>
 800300a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800300c:	e008      	b.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800300e:	f7fd ff7f 	bl	8000f10 <HAL_GetTick>
 8003012:	4602      	mov	r2, r0
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	1ad3      	subs	r3, r2, r3
 8003018:	2b64      	cmp	r3, #100	; 0x64
 800301a:	d901      	bls.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800301c:	2303      	movs	r3, #3
 800301e:	e194      	b.n	800334a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003020:	4b6c      	ldr	r3, [pc, #432]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003028:	2b00      	cmp	r3, #0
 800302a:	d1f0      	bne.n	800300e <HAL_RCCEx_PeriphCLKConfig+0x496>
=======
 8002f9c:	69fb      	ldr	r3, [r7, #28]
 8002f9e:	2b01      	cmp	r3, #1
 8002fa0:	d006      	beq.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	f000 80d9 	beq.w	8003162 <HAL_RCCEx_PeriphCLKConfig+0x62e>
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003004:	4b02      	ldr	r3, [pc, #8]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a01      	ldr	r2, [pc, #4]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800300a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800300e:	e001      	b.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8003010:	40023800 	.word	0x40023800
 8003014:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003016:	f7fd ff83 	bl	8000f20 <HAL_GetTick>
 800301a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800301c:	e008      	b.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800301e:	f7fd ff7f 	bl	8000f20 <HAL_GetTick>
 8003022:	4602      	mov	r2, r0
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	1ad3      	subs	r3, r2, r3
 8003028:	2b64      	cmp	r3, #100	; 0x64
 800302a:	d901      	bls.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800302c:	2303      	movs	r3, #3
 800302e:	e194      	b.n	800335a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
<<<<<<< HEAD
 8003030:	4b6c      	ldr	r3, [pc, #432]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003038:	2b00      	cmp	r3, #0
 800303a:	d1f0      	bne.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x496>
=======
 8002fdc:	4b6c      	ldr	r3, [pc, #432]	; (8003190 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d1f0      	bne.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x496>
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
<<<<<<< HEAD
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f003 0301 	and.w	r3, r3, #1
 8003044:	2b00      	cmp	r3, #0
 8003046:	d021      	beq.n	800308c <HAL_RCCEx_PeriphCLKConfig+0x504>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800304c:	2b00      	cmp	r3, #0
 800304e:	d11d      	bne.n	800308c <HAL_RCCEx_PeriphCLKConfig+0x504>
=======
<<<<<<< HEAD
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f003 0301 	and.w	r3, r3, #1
 8003034:	2b00      	cmp	r3, #0
 8003036:	d021      	beq.n	800307c <HAL_RCCEx_PeriphCLKConfig+0x504>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800303c:	2b00      	cmp	r3, #0
 800303e:	d11d      	bne.n	800307c <HAL_RCCEx_PeriphCLKConfig+0x504>
=======
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f003 0301 	and.w	r3, r3, #1
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d021      	beq.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d11d      	bne.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x504>
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
<<<<<<< HEAD
 8003050:	4b64      	ldr	r3, [pc, #400]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003052:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003056:	0c1b      	lsrs	r3, r3, #16
 8003058:	f003 0303 	and.w	r3, r3, #3
 800305c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800305e:	4b61      	ldr	r3, [pc, #388]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003060:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003064:	0e1b      	lsrs	r3, r3, #24
 8003066:	f003 030f 	and.w	r3, r3, #15
 800306a:	60fb      	str	r3, [r7, #12]
=======
<<<<<<< HEAD
 8003040:	4b64      	ldr	r3, [pc, #400]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003042:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003046:	0c1b      	lsrs	r3, r3, #16
 8003048:	f003 0303 	and.w	r3, r3, #3
 800304c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800304e:	4b61      	ldr	r3, [pc, #388]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003050:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003054:	0e1b      	lsrs	r3, r3, #24
 8003056:	f003 030f 	and.w	r3, r3, #15
 800305a:	60fb      	str	r3, [r7, #12]
=======
 8002ffc:	4b64      	ldr	r3, [pc, #400]	; (8003190 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ffe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003002:	0c1b      	lsrs	r3, r3, #16
 8003004:	f003 0303 	and.w	r3, r3, #3
 8003008:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800300a:	4b61      	ldr	r3, [pc, #388]	; (8003190 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800300c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003010:	0e1b      	lsrs	r3, r3, #24
 8003012:	f003 030f 	and.w	r3, r3, #15
 8003016:	60fb      	str	r3, [r7, #12]
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
<<<<<<< HEAD
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	019a      	lsls	r2, r3, #6
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	041b      	lsls	r3, r3, #16
 8003076:	431a      	orrs	r2, r3
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	061b      	lsls	r3, r3, #24
 800307c:	431a      	orrs	r2, r3
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	071b      	lsls	r3, r3, #28
 8003084:	4957      	ldr	r1, [pc, #348]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003086:	4313      	orrs	r3, r2
 8003088:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
=======
<<<<<<< HEAD
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	019a      	lsls	r2, r3, #6
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	041b      	lsls	r3, r3, #16
 8003066:	431a      	orrs	r2, r3
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	061b      	lsls	r3, r3, #24
 800306c:	431a      	orrs	r2, r3
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	071b      	lsls	r3, r3, #28
 8003074:	4957      	ldr	r1, [pc, #348]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003076:	4313      	orrs	r3, r2
 8003078:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
=======
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	019a      	lsls	r2, r3, #6
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	041b      	lsls	r3, r3, #16
 8003022:	431a      	orrs	r2, r3
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	061b      	lsls	r3, r3, #24
 8003028:	431a      	orrs	r2, r3
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	071b      	lsls	r3, r3, #28
 8003030:	4957      	ldr	r1, [pc, #348]	; (8003190 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003032:	4313      	orrs	r3, r2
 8003034:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
<<<<<<< HEAD
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003094:	2b00      	cmp	r3, #0
 8003096:	d004      	beq.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800309c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80030a0:	d00a      	beq.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0x530>
=======
<<<<<<< HEAD
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003084:	2b00      	cmp	r3, #0
 8003086:	d004      	beq.n	8003092 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800308c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003090:	d00a      	beq.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800309a:	2b00      	cmp	r3, #0
 800309c:	d02e      	beq.n	80030fc <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030a6:	d129      	bne.n	80030fc <HAL_RCCEx_PeriphCLKConfig+0x584>
=======
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003040:	2b00      	cmp	r3, #0
 8003042:	d004      	beq.n	800304e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003048:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800304c:	d00a      	beq.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x530>
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d02e      	beq.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
<<<<<<< HEAD
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030b6:	d129      	bne.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x584>
=======
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800305e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003062:	d129      	bne.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0x584>
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
<<<<<<< HEAD
 80030b8:	4b4a      	ldr	r3, [pc, #296]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80030ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030be:	0c1b      	lsrs	r3, r3, #16
 80030c0:	f003 0303 	and.w	r3, r3, #3
 80030c4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80030c6:	4b47      	ldr	r3, [pc, #284]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80030c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030cc:	0f1b      	lsrs	r3, r3, #28
 80030ce:	f003 0307 	and.w	r3, r3, #7
 80030d2:	60fb      	str	r3, [r7, #12]
=======
<<<<<<< HEAD
 80030a8:	4b4a      	ldr	r3, [pc, #296]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80030aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030ae:	0c1b      	lsrs	r3, r3, #16
 80030b0:	f003 0303 	and.w	r3, r3, #3
 80030b4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80030b6:	4b47      	ldr	r3, [pc, #284]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80030b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030bc:	0f1b      	lsrs	r3, r3, #28
 80030be:	f003 0307 	and.w	r3, r3, #7
 80030c2:	60fb      	str	r3, [r7, #12]
=======
 8003064:	4b4a      	ldr	r3, [pc, #296]	; (8003190 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003066:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800306a:	0c1b      	lsrs	r3, r3, #16
 800306c:	f003 0303 	and.w	r3, r3, #3
 8003070:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003072:	4b47      	ldr	r3, [pc, #284]	; (8003190 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003074:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003078:	0f1b      	lsrs	r3, r3, #28
 800307a:	f003 0307 	and.w	r3, r3, #7
 800307e:	60fb      	str	r3, [r7, #12]
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
<<<<<<< HEAD
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	019a      	lsls	r2, r3, #6
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	041b      	lsls	r3, r3, #16
 80030de:	431a      	orrs	r2, r3
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	68db      	ldr	r3, [r3, #12]
 80030e4:	061b      	lsls	r3, r3, #24
 80030e6:	431a      	orrs	r2, r3
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	071b      	lsls	r3, r3, #28
 80030ec:	493d      	ldr	r1, [pc, #244]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80030ee:	4313      	orrs	r3, r2
 80030f0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80030f4:	4b3b      	ldr	r3, [pc, #236]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80030f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80030fa:	f023 021f 	bic.w	r2, r3, #31
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003102:	3b01      	subs	r3, #1
 8003104:	4937      	ldr	r1, [pc, #220]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003106:	4313      	orrs	r3, r2
 8003108:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
=======
<<<<<<< HEAD
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	019a      	lsls	r2, r3, #6
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	041b      	lsls	r3, r3, #16
 80030ce:	431a      	orrs	r2, r3
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	68db      	ldr	r3, [r3, #12]
 80030d4:	061b      	lsls	r3, r3, #24
 80030d6:	431a      	orrs	r2, r3
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	071b      	lsls	r3, r3, #28
 80030dc:	493d      	ldr	r1, [pc, #244]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80030de:	4313      	orrs	r3, r2
 80030e0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80030e4:	4b3b      	ldr	r3, [pc, #236]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80030e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80030ea:	f023 021f 	bic.w	r2, r3, #31
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f2:	3b01      	subs	r3, #1
 80030f4:	4937      	ldr	r1, [pc, #220]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80030f6:	4313      	orrs	r3, r2
 80030f8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
=======
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	019a      	lsls	r2, r3, #6
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	041b      	lsls	r3, r3, #16
 800308a:	431a      	orrs	r2, r3
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	68db      	ldr	r3, [r3, #12]
 8003090:	061b      	lsls	r3, r3, #24
 8003092:	431a      	orrs	r2, r3
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	071b      	lsls	r3, r3, #28
 8003098:	493d      	ldr	r1, [pc, #244]	; (8003190 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800309a:	4313      	orrs	r3, r2
 800309c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80030a0:	4b3b      	ldr	r3, [pc, #236]	; (8003190 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80030a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80030a6:	f023 021f 	bic.w	r2, r3, #31
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ae:	3b01      	subs	r3, #1
 80030b0:	4937      	ldr	r1, [pc, #220]	; (8003190 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80030b2:	4313      	orrs	r3, r2
 80030b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
<<<<<<< HEAD
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003114:	2b00      	cmp	r3, #0
 8003116:	d01d      	beq.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
=======
<<<<<<< HEAD
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003104:	2b00      	cmp	r3, #0
 8003106:	d01d      	beq.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
=======
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d01d      	beq.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
<<<<<<< HEAD
 8003118:	4b32      	ldr	r3, [pc, #200]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800311a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800311e:	0e1b      	lsrs	r3, r3, #24
 8003120:	f003 030f 	and.w	r3, r3, #15
 8003124:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003126:	4b2f      	ldr	r3, [pc, #188]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003128:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800312c:	0f1b      	lsrs	r3, r3, #28
 800312e:	f003 0307 	and.w	r3, r3, #7
 8003132:	60fb      	str	r3, [r7, #12]
=======
<<<<<<< HEAD
 8003108:	4b32      	ldr	r3, [pc, #200]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800310a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800310e:	0e1b      	lsrs	r3, r3, #24
 8003110:	f003 030f 	and.w	r3, r3, #15
 8003114:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003116:	4b2f      	ldr	r3, [pc, #188]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003118:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800311c:	0f1b      	lsrs	r3, r3, #28
 800311e:	f003 0307 	and.w	r3, r3, #7
 8003122:	60fb      	str	r3, [r7, #12]
=======
 80030c4:	4b32      	ldr	r3, [pc, #200]	; (8003190 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80030c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030ca:	0e1b      	lsrs	r3, r3, #24
 80030cc:	f003 030f 	and.w	r3, r3, #15
 80030d0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80030d2:	4b2f      	ldr	r3, [pc, #188]	; (8003190 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80030d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030d8:	0f1b      	lsrs	r3, r3, #28
 80030da:	f003 0307 	and.w	r3, r3, #7
 80030de:	60fb      	str	r3, [r7, #12]
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
<<<<<<< HEAD
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	019a      	lsls	r2, r3, #6
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	691b      	ldr	r3, [r3, #16]
 800313e:	041b      	lsls	r3, r3, #16
 8003140:	431a      	orrs	r2, r3
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	061b      	lsls	r3, r3, #24
 8003146:	431a      	orrs	r2, r3
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	071b      	lsls	r3, r3, #28
 800314c:	4925      	ldr	r1, [pc, #148]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800314e:	4313      	orrs	r3, r2
 8003150:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
=======
<<<<<<< HEAD
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	019a      	lsls	r2, r3, #6
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	691b      	ldr	r3, [r3, #16]
 800312e:	041b      	lsls	r3, r3, #16
 8003130:	431a      	orrs	r2, r3
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	061b      	lsls	r3, r3, #24
 8003136:	431a      	orrs	r2, r3
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	071b      	lsls	r3, r3, #28
 800313c:	4925      	ldr	r1, [pc, #148]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800313e:	4313      	orrs	r3, r2
 8003140:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
=======
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	019a      	lsls	r2, r3, #6
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	691b      	ldr	r3, [r3, #16]
 80030ea:	041b      	lsls	r3, r3, #16
 80030ec:	431a      	orrs	r2, r3
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	061b      	lsls	r3, r3, #24
 80030f2:	431a      	orrs	r2, r3
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	071b      	lsls	r3, r3, #28
 80030f8:	4925      	ldr	r1, [pc, #148]	; (8003190 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80030fa:	4313      	orrs	r3, r2
 80030fc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
<<<<<<< HEAD
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800315c:	2b00      	cmp	r3, #0
 800315e:	d011      	beq.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
=======
<<<<<<< HEAD
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800314c:	2b00      	cmp	r3, #0
 800314e:	d011      	beq.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
=======
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003108:	2b00      	cmp	r3, #0
 800310a:	d011      	beq.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
<<<<<<< HEAD
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	019a      	lsls	r2, r3, #6
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	691b      	ldr	r3, [r3, #16]
 800316a:	041b      	lsls	r3, r3, #16
 800316c:	431a      	orrs	r2, r3
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	68db      	ldr	r3, [r3, #12]
 8003172:	061b      	lsls	r3, r3, #24
 8003174:	431a      	orrs	r2, r3
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	689b      	ldr	r3, [r3, #8]
 800317a:	071b      	lsls	r3, r3, #28
 800317c:	4919      	ldr	r1, [pc, #100]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800317e:	4313      	orrs	r3, r2
 8003180:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
=======
<<<<<<< HEAD
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	019a      	lsls	r2, r3, #6
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	691b      	ldr	r3, [r3, #16]
 800315a:	041b      	lsls	r3, r3, #16
 800315c:	431a      	orrs	r2, r3
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	68db      	ldr	r3, [r3, #12]
 8003162:	061b      	lsls	r3, r3, #24
 8003164:	431a      	orrs	r2, r3
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	071b      	lsls	r3, r3, #28
 800316c:	4919      	ldr	r1, [pc, #100]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800316e:	4313      	orrs	r3, r2
 8003170:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
=======
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	019a      	lsls	r2, r3, #6
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	691b      	ldr	r3, [r3, #16]
 8003116:	041b      	lsls	r3, r3, #16
 8003118:	431a      	orrs	r2, r3
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	68db      	ldr	r3, [r3, #12]
 800311e:	061b      	lsls	r3, r3, #24
 8003120:	431a      	orrs	r2, r3
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	071b      	lsls	r3, r3, #28
 8003128:	4919      	ldr	r1, [pc, #100]	; (8003190 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800312a:	4313      	orrs	r3, r2
 800312c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
<<<<<<< HEAD
 8003184:	4b17      	ldr	r3, [pc, #92]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a16      	ldr	r2, [pc, #88]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800318a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800318e:	6013      	str	r3, [r2, #0]
=======
<<<<<<< HEAD
 8003174:	4b17      	ldr	r3, [pc, #92]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a16      	ldr	r2, [pc, #88]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800317a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800317e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003180:	f7fd fec6 	bl	8000f10 <HAL_GetTick>
 8003184:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003186:	e008      	b.n	800319a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003188:	f7fd fec2 	bl	8000f10 <HAL_GetTick>
 800318c:	4602      	mov	r2, r0
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	1ad3      	subs	r3, r2, r3
 8003192:	2b64      	cmp	r3, #100	; 0x64
 8003194:	d901      	bls.n	800319a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003196:	2303      	movs	r3, #3
 8003198:	e0d7      	b.n	800334a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800319a:	4b0e      	ldr	r3, [pc, #56]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d0f0      	beq.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0x610>
=======
 8003130:	4b17      	ldr	r3, [pc, #92]	; (8003190 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a16      	ldr	r2, [pc, #88]	; (8003190 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003136:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800313a:	6013      	str	r3, [r2, #0]
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003190:	f7fd fec6 	bl	8000f20 <HAL_GetTick>
 8003194:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003196:	e008      	b.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003198:	f7fd fec2 	bl	8000f20 <HAL_GetTick>
 800319c:	4602      	mov	r2, r0
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	1ad3      	subs	r3, r2, r3
 80031a2:	2b64      	cmp	r3, #100	; 0x64
 80031a4:	d901      	bls.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80031a6:	2303      	movs	r3, #3
 80031a8:	e0d7      	b.n	800335a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
<<<<<<< HEAD
 80031aa:	4b0e      	ldr	r3, [pc, #56]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d0f0      	beq.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x610>
=======
 8003156:	4b0e      	ldr	r3, [pc, #56]	; (8003190 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800315e:	2b00      	cmp	r3, #0
 8003160:	d0f0      	beq.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x610>
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
<<<<<<< HEAD
 80031b6:	69bb      	ldr	r3, [r7, #24]
 80031b8:	2b01      	cmp	r3, #1
 80031ba:	f040 80cd 	bne.w	8003358 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
=======
<<<<<<< HEAD
 80031a6:	69bb      	ldr	r3, [r7, #24]
 80031a8:	2b01      	cmp	r3, #1
 80031aa:	f040 80cd 	bne.w	8003348 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80031ae:	4b09      	ldr	r3, [pc, #36]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a08      	ldr	r2, [pc, #32]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80031b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031ba:	f7fd fea9 	bl	8000f10 <HAL_GetTick>
 80031be:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80031c0:	e00a      	b.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80031c2:	f7fd fea5 	bl	8000f10 <HAL_GetTick>
 80031c6:	4602      	mov	r2, r0
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	1ad3      	subs	r3, r2, r3
 80031cc:	2b64      	cmp	r3, #100	; 0x64
 80031ce:	d903      	bls.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80031d0:	2303      	movs	r3, #3
 80031d2:	e0ba      	b.n	800334a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80031d4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80031d8:	4b5e      	ldr	r3, [pc, #376]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80031e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80031e4:	d0ed      	beq.n	80031c2 <HAL_RCCEx_PeriphCLKConfig+0x64a>
=======
 8003162:	69bb      	ldr	r3, [r7, #24]
 8003164:	2b01      	cmp	r3, #1
 8003166:	f040 80cd 	bne.w	8003304 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80031be:	4b09      	ldr	r3, [pc, #36]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a08      	ldr	r2, [pc, #32]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80031c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031ca:	f7fd fea9 	bl	8000f20 <HAL_GetTick>
 80031ce:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80031d0:	e00a      	b.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80031d2:	f7fd fea5 	bl	8000f20 <HAL_GetTick>
 80031d6:	4602      	mov	r2, r0
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	1ad3      	subs	r3, r2, r3
 80031dc:	2b64      	cmp	r3, #100	; 0x64
 80031de:	d903      	bls.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80031e0:	2303      	movs	r3, #3
 80031e2:	e0ba      	b.n	800335a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80031e4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
<<<<<<< HEAD
 80031e8:	4b5e      	ldr	r3, [pc, #376]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80031f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80031f4:	d0ed      	beq.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x64a>
=======
 8003194:	4b5e      	ldr	r3, [pc, #376]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800319c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80031a0:	d0ed      	beq.n	800317e <HAL_RCCEx_PeriphCLKConfig+0x64a>
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
<<<<<<< HEAD
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d003      	beq.n	800320a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003206:	2b00      	cmp	r3, #0
 8003208:	d009      	beq.n	800321e <HAL_RCCEx_PeriphCLKConfig+0x696>
=======
<<<<<<< HEAD
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d003      	beq.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0x682>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d009      	beq.n	800320e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003202:	2b00      	cmp	r3, #0
 8003204:	d02e      	beq.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800320a:	2b00      	cmp	r3, #0
 800320c:	d12a      	bne.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
=======
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d003      	beq.n	80031b6 <HAL_RCCEx_PeriphCLKConfig+0x682>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d009      	beq.n	80031ca <HAL_RCCEx_PeriphCLKConfig+0x696>
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003212:	2b00      	cmp	r3, #0
 8003214:	d02e      	beq.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
<<<<<<< HEAD
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800321a:	2b00      	cmp	r3, #0
 800321c:	d12a      	bne.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
=======
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d12a      	bne.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
<<<<<<< HEAD
 800321e:	4b51      	ldr	r3, [pc, #324]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003220:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003224:	0c1b      	lsrs	r3, r3, #16
 8003226:	f003 0303 	and.w	r3, r3, #3
 800322a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800322c:	4b4d      	ldr	r3, [pc, #308]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800322e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003232:	0f1b      	lsrs	r3, r3, #28
 8003234:	f003 0307 	and.w	r3, r3, #7
 8003238:	60fb      	str	r3, [r7, #12]
=======
<<<<<<< HEAD
 800320e:	4b51      	ldr	r3, [pc, #324]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003210:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003214:	0c1b      	lsrs	r3, r3, #16
 8003216:	f003 0303 	and.w	r3, r3, #3
 800321a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800321c:	4b4d      	ldr	r3, [pc, #308]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800321e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003222:	0f1b      	lsrs	r3, r3, #28
 8003224:	f003 0307 	and.w	r3, r3, #7
 8003228:	60fb      	str	r3, [r7, #12]
=======
 80031ca:	4b51      	ldr	r3, [pc, #324]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80031cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031d0:	0c1b      	lsrs	r3, r3, #16
 80031d2:	f003 0303 	and.w	r3, r3, #3
 80031d6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80031d8:	4b4d      	ldr	r3, [pc, #308]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80031da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031de:	0f1b      	lsrs	r3, r3, #28
 80031e0:	f003 0307 	and.w	r3, r3, #7
 80031e4:	60fb      	str	r3, [r7, #12]
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
<<<<<<< HEAD
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	695b      	ldr	r3, [r3, #20]
 800323e:	019a      	lsls	r2, r3, #6
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	041b      	lsls	r3, r3, #16
 8003244:	431a      	orrs	r2, r3
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	699b      	ldr	r3, [r3, #24]
 800324a:	061b      	lsls	r3, r3, #24
 800324c:	431a      	orrs	r2, r3
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	071b      	lsls	r3, r3, #28
 8003252:	4944      	ldr	r1, [pc, #272]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003254:	4313      	orrs	r3, r2
 8003256:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800325a:	4b42      	ldr	r3, [pc, #264]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800325c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003260:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003268:	3b01      	subs	r3, #1
 800326a:	021b      	lsls	r3, r3, #8
 800326c:	493d      	ldr	r1, [pc, #244]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800326e:	4313      	orrs	r3, r2
 8003270:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
=======
<<<<<<< HEAD
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	695b      	ldr	r3, [r3, #20]
 800322e:	019a      	lsls	r2, r3, #6
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	041b      	lsls	r3, r3, #16
 8003234:	431a      	orrs	r2, r3
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	699b      	ldr	r3, [r3, #24]
 800323a:	061b      	lsls	r3, r3, #24
 800323c:	431a      	orrs	r2, r3
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	071b      	lsls	r3, r3, #28
 8003242:	4944      	ldr	r1, [pc, #272]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003244:	4313      	orrs	r3, r2
 8003246:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800324a:	4b42      	ldr	r3, [pc, #264]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800324c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003250:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003258:	3b01      	subs	r3, #1
 800325a:	021b      	lsls	r3, r3, #8
 800325c:	493d      	ldr	r1, [pc, #244]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800325e:	4313      	orrs	r3, r2
 8003260:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
=======
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	695b      	ldr	r3, [r3, #20]
 80031ea:	019a      	lsls	r2, r3, #6
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	041b      	lsls	r3, r3, #16
 80031f0:	431a      	orrs	r2, r3
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	699b      	ldr	r3, [r3, #24]
 80031f6:	061b      	lsls	r3, r3, #24
 80031f8:	431a      	orrs	r2, r3
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	071b      	lsls	r3, r3, #28
 80031fe:	4944      	ldr	r1, [pc, #272]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003200:	4313      	orrs	r3, r2
 8003202:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003206:	4b42      	ldr	r3, [pc, #264]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003208:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800320c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003214:	3b01      	subs	r3, #1
 8003216:	021b      	lsls	r3, r3, #8
 8003218:	493d      	ldr	r1, [pc, #244]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800321a:	4313      	orrs	r3, r2
 800321c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
<<<<<<< HEAD
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800327c:	2b00      	cmp	r3, #0
 800327e:	d022      	beq.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003284:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003288:	d11d      	bne.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
=======
<<<<<<< HEAD
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800326c:	2b00      	cmp	r3, #0
 800326e:	d022      	beq.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003274:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003278:	d11d      	bne.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
=======
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003228:	2b00      	cmp	r3, #0
 800322a:	d022      	beq.n	8003272 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003230:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003234:	d11d      	bne.n	8003272 <HAL_RCCEx_PeriphCLKConfig+0x73e>
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
<<<<<<< HEAD
 800328a:	4b36      	ldr	r3, [pc, #216]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800328c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003290:	0e1b      	lsrs	r3, r3, #24
 8003292:	f003 030f 	and.w	r3, r3, #15
 8003296:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003298:	4b32      	ldr	r3, [pc, #200]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800329a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800329e:	0f1b      	lsrs	r3, r3, #28
 80032a0:	f003 0307 	and.w	r3, r3, #7
 80032a4:	60fb      	str	r3, [r7, #12]
=======
<<<<<<< HEAD
 800327a:	4b36      	ldr	r3, [pc, #216]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800327c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003280:	0e1b      	lsrs	r3, r3, #24
 8003282:	f003 030f 	and.w	r3, r3, #15
 8003286:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003288:	4b32      	ldr	r3, [pc, #200]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800328a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800328e:	0f1b      	lsrs	r3, r3, #28
 8003290:	f003 0307 	and.w	r3, r3, #7
 8003294:	60fb      	str	r3, [r7, #12]
=======
 8003236:	4b36      	ldr	r3, [pc, #216]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003238:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800323c:	0e1b      	lsrs	r3, r3, #24
 800323e:	f003 030f 	and.w	r3, r3, #15
 8003242:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003244:	4b32      	ldr	r3, [pc, #200]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003246:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800324a:	0f1b      	lsrs	r3, r3, #28
 800324c:	f003 0307 	and.w	r3, r3, #7
 8003250:	60fb      	str	r3, [r7, #12]
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
<<<<<<< HEAD
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	695b      	ldr	r3, [r3, #20]
 80032aa:	019a      	lsls	r2, r3, #6
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6a1b      	ldr	r3, [r3, #32]
 80032b0:	041b      	lsls	r3, r3, #16
 80032b2:	431a      	orrs	r2, r3
 80032b4:	693b      	ldr	r3, [r7, #16]
 80032b6:	061b      	lsls	r3, r3, #24
 80032b8:	431a      	orrs	r2, r3
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	071b      	lsls	r3, r3, #28
 80032be:	4929      	ldr	r1, [pc, #164]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80032c0:	4313      	orrs	r3, r2
 80032c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
=======
<<<<<<< HEAD
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	695b      	ldr	r3, [r3, #20]
 800329a:	019a      	lsls	r2, r3, #6
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6a1b      	ldr	r3, [r3, #32]
 80032a0:	041b      	lsls	r3, r3, #16
 80032a2:	431a      	orrs	r2, r3
 80032a4:	693b      	ldr	r3, [r7, #16]
 80032a6:	061b      	lsls	r3, r3, #24
 80032a8:	431a      	orrs	r2, r3
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	071b      	lsls	r3, r3, #28
 80032ae:	4929      	ldr	r1, [pc, #164]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80032b0:	4313      	orrs	r3, r2
 80032b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
=======
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	695b      	ldr	r3, [r3, #20]
 8003256:	019a      	lsls	r2, r3, #6
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6a1b      	ldr	r3, [r3, #32]
 800325c:	041b      	lsls	r3, r3, #16
 800325e:	431a      	orrs	r2, r3
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	061b      	lsls	r3, r3, #24
 8003264:	431a      	orrs	r2, r3
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	071b      	lsls	r3, r3, #28
 800326a:	4929      	ldr	r1, [pc, #164]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800326c:	4313      	orrs	r3, r2
 800326e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
<<<<<<< HEAD
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 0308 	and.w	r3, r3, #8
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d028      	beq.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0x79c>
=======
<<<<<<< HEAD
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f003 0308 	and.w	r3, r3, #8
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d028      	beq.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x79c>
=======
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f003 0308 	and.w	r3, r3, #8
 800327a:	2b00      	cmp	r3, #0
 800327c:	d028      	beq.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x79c>
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
<<<<<<< HEAD
 80032d2:	4b24      	ldr	r3, [pc, #144]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80032d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032d8:	0e1b      	lsrs	r3, r3, #24
 80032da:	f003 030f 	and.w	r3, r3, #15
 80032de:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80032e0:	4b20      	ldr	r3, [pc, #128]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80032e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032e6:	0c1b      	lsrs	r3, r3, #16
 80032e8:	f003 0303 	and.w	r3, r3, #3
 80032ec:	60fb      	str	r3, [r7, #12]
=======
<<<<<<< HEAD
 80032c2:	4b24      	ldr	r3, [pc, #144]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80032c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032c8:	0e1b      	lsrs	r3, r3, #24
 80032ca:	f003 030f 	and.w	r3, r3, #15
 80032ce:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80032d0:	4b20      	ldr	r3, [pc, #128]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80032d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032d6:	0c1b      	lsrs	r3, r3, #16
 80032d8:	f003 0303 	and.w	r3, r3, #3
 80032dc:	60fb      	str	r3, [r7, #12]
=======
 800327e:	4b24      	ldr	r3, [pc, #144]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003280:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003284:	0e1b      	lsrs	r3, r3, #24
 8003286:	f003 030f 	and.w	r3, r3, #15
 800328a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800328c:	4b20      	ldr	r3, [pc, #128]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800328e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003292:	0c1b      	lsrs	r3, r3, #16
 8003294:	f003 0303 	and.w	r3, r3, #3
 8003298:	60fb      	str	r3, [r7, #12]
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
<<<<<<< HEAD
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	695b      	ldr	r3, [r3, #20]
 80032f2:	019a      	lsls	r2, r3, #6
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	041b      	lsls	r3, r3, #16
 80032f8:	431a      	orrs	r2, r3
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	061b      	lsls	r3, r3, #24
 80032fe:	431a      	orrs	r2, r3
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	69db      	ldr	r3, [r3, #28]
 8003304:	071b      	lsls	r3, r3, #28
 8003306:	4917      	ldr	r1, [pc, #92]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003308:	4313      	orrs	r3, r2
 800330a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800330e:	4b15      	ldr	r3, [pc, #84]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003310:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003314:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800331c:	4911      	ldr	r1, [pc, #68]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800331e:	4313      	orrs	r3, r2
 8003320:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
=======
<<<<<<< HEAD
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	695b      	ldr	r3, [r3, #20]
 80032e2:	019a      	lsls	r2, r3, #6
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	041b      	lsls	r3, r3, #16
 80032e8:	431a      	orrs	r2, r3
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	061b      	lsls	r3, r3, #24
 80032ee:	431a      	orrs	r2, r3
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	69db      	ldr	r3, [r3, #28]
 80032f4:	071b      	lsls	r3, r3, #28
 80032f6:	4917      	ldr	r1, [pc, #92]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80032f8:	4313      	orrs	r3, r2
 80032fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80032fe:	4b15      	ldr	r3, [pc, #84]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003300:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003304:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800330c:	4911      	ldr	r1, [pc, #68]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800330e:	4313      	orrs	r3, r2
 8003310:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
=======
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	695b      	ldr	r3, [r3, #20]
 800329e:	019a      	lsls	r2, r3, #6
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	041b      	lsls	r3, r3, #16
 80032a4:	431a      	orrs	r2, r3
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	061b      	lsls	r3, r3, #24
 80032aa:	431a      	orrs	r2, r3
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	69db      	ldr	r3, [r3, #28]
 80032b0:	071b      	lsls	r3, r3, #28
 80032b2:	4917      	ldr	r1, [pc, #92]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80032b4:	4313      	orrs	r3, r2
 80032b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80032ba:	4b15      	ldr	r3, [pc, #84]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80032bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80032c0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032c8:	4911      	ldr	r1, [pc, #68]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80032ca:	4313      	orrs	r3, r2
 80032cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
<<<<<<< HEAD
 8003324:	4b0f      	ldr	r3, [pc, #60]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a0e      	ldr	r2, [pc, #56]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800332a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800332e:	6013      	str	r3, [r2, #0]
=======
<<<<<<< HEAD
 8003314:	4b0f      	ldr	r3, [pc, #60]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a0e      	ldr	r2, [pc, #56]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800331a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800331e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003320:	f7fd fdf6 	bl	8000f10 <HAL_GetTick>
 8003324:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003326:	e008      	b.n	800333a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003328:	f7fd fdf2 	bl	8000f10 <HAL_GetTick>
 800332c:	4602      	mov	r2, r0
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	1ad3      	subs	r3, r2, r3
 8003332:	2b64      	cmp	r3, #100	; 0x64
 8003334:	d901      	bls.n	800333a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003336:	2303      	movs	r3, #3
 8003338:	e007      	b.n	800334a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800333a:	4b06      	ldr	r3, [pc, #24]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003342:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003346:	d1ef      	bne.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
=======
 80032d0:	4b0f      	ldr	r3, [pc, #60]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a0e      	ldr	r2, [pc, #56]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80032d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032da:	6013      	str	r3, [r2, #0]
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003330:	f7fd fdf6 	bl	8000f20 <HAL_GetTick>
 8003334:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003336:	e008      	b.n	800334a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003338:	f7fd fdf2 	bl	8000f20 <HAL_GetTick>
 800333c:	4602      	mov	r2, r0
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	1ad3      	subs	r3, r2, r3
 8003342:	2b64      	cmp	r3, #100	; 0x64
 8003344:	d901      	bls.n	800334a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003346:	2303      	movs	r3, #3
 8003348:	e007      	b.n	800335a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
<<<<<<< HEAD
 800334a:	4b06      	ldr	r3, [pc, #24]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003352:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003356:	d1ef      	bne.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
=======
 80032f6:	4b06      	ldr	r3, [pc, #24]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80032fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003302:	d1ef      	bne.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
      }
    }
  }
  return HAL_OK;
<<<<<<< HEAD
 8003358:	2300      	movs	r3, #0
=======
<<<<<<< HEAD
 8003348:	2300      	movs	r3, #0
}
 800334a:	4618      	mov	r0, r3
 800334c:	3720      	adds	r7, #32
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}
 8003352:	bf00      	nop
 8003354:	40023800 	.word	0x40023800

08003358 <HAL_TIM_Base_Start_IT>:
=======
 8003304:	2300      	movs	r3, #0
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
}
 800335a:	4618      	mov	r0, r3
 800335c:	3720      	adds	r7, #32
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}
 8003362:	bf00      	nop
 8003364:	40023800 	.word	0x40023800

<<<<<<< HEAD
08003368 <HAL_TIM_Base_Start_IT>:
=======
08003314 <HAL_TIM_Base_Start_IT>:
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8003368:	b480      	push	{r7}
 800336a:	b085      	sub	sp, #20
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
=======
<<<<<<< HEAD
 8003358:	b480      	push	{r7}
 800335a:	b085      	sub	sp, #20
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
=======
 8003314:	b480      	push	{r7}
 8003316:	b085      	sub	sp, #20
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
<<<<<<< HEAD
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003376:	b2db      	uxtb	r3, r3
 8003378:	2b01      	cmp	r3, #1
 800337a:	d001      	beq.n	8003380 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800337c:	2301      	movs	r3, #1
 800337e:	e054      	b.n	800342a <HAL_TIM_Base_Start_IT+0xc2>
=======
<<<<<<< HEAD
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003366:	b2db      	uxtb	r3, r3
 8003368:	2b01      	cmp	r3, #1
 800336a:	d001      	beq.n	8003370 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800336c:	2301      	movs	r3, #1
 800336e:	e054      	b.n	800341a <HAL_TIM_Base_Start_IT+0xc2>
=======
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003322:	b2db      	uxtb	r3, r3
 8003324:	2b01      	cmp	r3, #1
 8003326:	d001      	beq.n	800332c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003328:	2301      	movs	r3, #1
 800332a:	e054      	b.n	80033d6 <HAL_TIM_Base_Start_IT+0xc2>
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
<<<<<<< HEAD
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2202      	movs	r2, #2
 8003384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
=======
<<<<<<< HEAD
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2202      	movs	r2, #2
 8003374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	68da      	ldr	r2, [r3, #12]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f042 0201 	orr.w	r2, r2, #1
 8003386:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a26      	ldr	r2, [pc, #152]	; (8003428 <HAL_TIM_Base_Start_IT+0xd0>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d022      	beq.n	80033d8 <HAL_TIM_Base_Start_IT+0x80>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800339a:	d01d      	beq.n	80033d8 <HAL_TIM_Base_Start_IT+0x80>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a22      	ldr	r2, [pc, #136]	; (800342c <HAL_TIM_Base_Start_IT+0xd4>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d018      	beq.n	80033d8 <HAL_TIM_Base_Start_IT+0x80>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a21      	ldr	r2, [pc, #132]	; (8003430 <HAL_TIM_Base_Start_IT+0xd8>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d013      	beq.n	80033d8 <HAL_TIM_Base_Start_IT+0x80>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a1f      	ldr	r2, [pc, #124]	; (8003434 <HAL_TIM_Base_Start_IT+0xdc>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d00e      	beq.n	80033d8 <HAL_TIM_Base_Start_IT+0x80>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a1e      	ldr	r2, [pc, #120]	; (8003438 <HAL_TIM_Base_Start_IT+0xe0>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d009      	beq.n	80033d8 <HAL_TIM_Base_Start_IT+0x80>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a1c      	ldr	r2, [pc, #112]	; (800343c <HAL_TIM_Base_Start_IT+0xe4>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d004      	beq.n	80033d8 <HAL_TIM_Base_Start_IT+0x80>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a1b      	ldr	r2, [pc, #108]	; (8003440 <HAL_TIM_Base_Start_IT+0xe8>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d115      	bne.n	8003404 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	689a      	ldr	r2, [r3, #8]
 80033de:	4b19      	ldr	r3, [pc, #100]	; (8003444 <HAL_TIM_Base_Start_IT+0xec>)
 80033e0:	4013      	ands	r3, r2
 80033e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	2b06      	cmp	r3, #6
 80033e8:	d015      	beq.n	8003416 <HAL_TIM_Base_Start_IT+0xbe>
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033f0:	d011      	beq.n	8003416 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	681a      	ldr	r2, [r3, #0]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f042 0201 	orr.w	r2, r2, #1
 8003400:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003402:	e008      	b.n	8003416 <HAL_TIM_Base_Start_IT+0xbe>
=======
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2202      	movs	r2, #2
 8003330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	68da      	ldr	r2, [r3, #12]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f042 0201 	orr.w	r2, r2, #1
 8003396:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a26      	ldr	r2, [pc, #152]	; (8003438 <HAL_TIM_Base_Start_IT+0xd0>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d022      	beq.n	80033e8 <HAL_TIM_Base_Start_IT+0x80>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033aa:	d01d      	beq.n	80033e8 <HAL_TIM_Base_Start_IT+0x80>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a22      	ldr	r2, [pc, #136]	; (800343c <HAL_TIM_Base_Start_IT+0xd4>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d018      	beq.n	80033e8 <HAL_TIM_Base_Start_IT+0x80>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a21      	ldr	r2, [pc, #132]	; (8003440 <HAL_TIM_Base_Start_IT+0xd8>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d013      	beq.n	80033e8 <HAL_TIM_Base_Start_IT+0x80>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a1f      	ldr	r2, [pc, #124]	; (8003444 <HAL_TIM_Base_Start_IT+0xdc>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d00e      	beq.n	80033e8 <HAL_TIM_Base_Start_IT+0x80>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a1e      	ldr	r2, [pc, #120]	; (8003448 <HAL_TIM_Base_Start_IT+0xe0>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d009      	beq.n	80033e8 <HAL_TIM_Base_Start_IT+0x80>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a1c      	ldr	r2, [pc, #112]	; (800344c <HAL_TIM_Base_Start_IT+0xe4>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d004      	beq.n	80033e8 <HAL_TIM_Base_Start_IT+0x80>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a1b      	ldr	r2, [pc, #108]	; (8003450 <HAL_TIM_Base_Start_IT+0xe8>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d115      	bne.n	8003414 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	689a      	ldr	r2, [r3, #8]
 80033ee:	4b19      	ldr	r3, [pc, #100]	; (8003454 <HAL_TIM_Base_Start_IT+0xec>)
 80033f0:	4013      	ands	r3, r2
 80033f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	2b06      	cmp	r3, #6
 80033f8:	d015      	beq.n	8003426 <HAL_TIM_Base_Start_IT+0xbe>
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003400:	d011      	beq.n	8003426 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	681a      	ldr	r2, [r3, #0]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f042 0201 	orr.w	r2, r2, #1
 8003410:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
<<<<<<< HEAD
 8003412:	e008      	b.n	8003426 <HAL_TIM_Base_Start_IT+0xbe>
=======
 80033be:	e008      	b.n	80033d2 <HAL_TIM_Base_Start_IT+0xbe>
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
<<<<<<< HEAD
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	681a      	ldr	r2, [r3, #0]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f042 0201 	orr.w	r2, r2, #1
 8003422:	601a      	str	r2, [r3, #0]
 8003424:	e000      	b.n	8003428 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003426:	bf00      	nop
=======
<<<<<<< HEAD
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	681a      	ldr	r2, [r3, #0]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f042 0201 	orr.w	r2, r2, #1
 8003412:	601a      	str	r2, [r3, #0]
 8003414:	e000      	b.n	8003418 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003416:	bf00      	nop
=======
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	681a      	ldr	r2, [r3, #0]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f042 0201 	orr.w	r2, r2, #1
 80033ce:	601a      	str	r2, [r3, #0]
 80033d0:	e000      	b.n	80033d4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033d2:	bf00      	nop
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  }

  /* Return function status */
  return HAL_OK;
<<<<<<< HEAD
 8003428:	2300      	movs	r3, #0
=======
<<<<<<< HEAD
 8003418:	2300      	movs	r3, #0
}
 800341a:	4618      	mov	r0, r3
 800341c:	3714      	adds	r7, #20
 800341e:	46bd      	mov	sp, r7
 8003420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003424:	4770      	bx	lr
 8003426:	bf00      	nop
 8003428:	40010000 	.word	0x40010000
 800342c:	40000400 	.word	0x40000400
 8003430:	40000800 	.word	0x40000800
 8003434:	40000c00 	.word	0x40000c00
 8003438:	40010400 	.word	0x40010400
 800343c:	40014000 	.word	0x40014000
 8003440:	40001800 	.word	0x40001800
 8003444:	00010007 	.word	0x00010007

08003448 <HAL_TIM_OC_Init>:
=======
 80033d4:	2300      	movs	r3, #0
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
}
 800342a:	4618      	mov	r0, r3
 800342c:	3714      	adds	r7, #20
 800342e:	46bd      	mov	sp, r7
 8003430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003434:	4770      	bx	lr
 8003436:	bf00      	nop
 8003438:	40010000 	.word	0x40010000
 800343c:	40000400 	.word	0x40000400
 8003440:	40000800 	.word	0x40000800
 8003444:	40000c00 	.word	0x40000c00
 8003448:	40010400 	.word	0x40010400
 800344c:	40014000 	.word	0x40014000
 8003450:	40001800 	.word	0x40001800
 8003454:	00010007 	.word	0x00010007

<<<<<<< HEAD
08003458 <HAL_TIM_OC_Init>:
=======
08003404 <HAL_TIM_OC_Init>:
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8003458:	b580      	push	{r7, lr}
 800345a:	b082      	sub	sp, #8
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
=======
<<<<<<< HEAD
 8003448:	b580      	push	{r7, lr}
 800344a:	b082      	sub	sp, #8
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d101      	bne.n	800345a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	e049      	b.n	80034ee <HAL_TIM_OC_Init+0xa6>
=======
 8003404:	b580      	push	{r7, lr}
 8003406:	b082      	sub	sp, #8
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d101      	bne.n	800346a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
<<<<<<< HEAD
 8003466:	2301      	movs	r3, #1
 8003468:	e049      	b.n	80034fe <HAL_TIM_OC_Init+0xa6>
=======
 8003412:	2301      	movs	r3, #1
 8003414:	e049      	b.n	80034aa <HAL_TIM_OC_Init+0xa6>
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
<<<<<<< HEAD
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003470:	b2db      	uxtb	r3, r3
 8003472:	2b00      	cmp	r3, #0
 8003474:	d106      	bne.n	8003484 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2200      	movs	r2, #0
 800347a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
=======
<<<<<<< HEAD
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003460:	b2db      	uxtb	r3, r3
 8003462:	2b00      	cmp	r3, #0
 8003464:	d106      	bne.n	8003474 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2200      	movs	r2, #0
 800346a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
=======
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800341c:	b2db      	uxtb	r3, r3
 800341e:	2b00      	cmp	r3, #0
 8003420:	d106      	bne.n	8003430 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2200      	movs	r2, #0
 8003426:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
<<<<<<< HEAD
 800347e:	6878      	ldr	r0, [r7, #4]
 8003480:	f7fd fb72 	bl	8000b68 <HAL_TIM_OC_MspInit>
=======
<<<<<<< HEAD
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	f7fd fb72 	bl	8000b58 <HAL_TIM_OC_MspInit>
=======
 800342a:	6878      	ldr	r0, [r7, #4]
 800342c:	f7fd fb8a 	bl	8000b44 <HAL_TIM_OC_MspInit>
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
<<<<<<< HEAD
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2202      	movs	r2, #2
 8003488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
=======
<<<<<<< HEAD
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2202      	movs	r2, #2
 8003478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681a      	ldr	r2, [r3, #0]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	3304      	adds	r3, #4
 8003484:	4619      	mov	r1, r3
 8003486:	4610      	mov	r0, r2
 8003488:	f000 f9f6 	bl	8003878 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2201      	movs	r2, #1
 8003490:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2201      	movs	r2, #1
 8003498:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2201      	movs	r2, #1
 80034a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2201      	movs	r2, #1
 80034a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2201      	movs	r2, #1
 80034b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2201      	movs	r2, #1
 80034b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2201      	movs	r2, #1
 80034c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2201      	movs	r2, #1
 80034c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2201      	movs	r2, #1
 80034d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2201      	movs	r2, #1
 80034d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2201      	movs	r2, #1
 80034e0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2201      	movs	r2, #1
 80034e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80034ec:	2300      	movs	r3, #0
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	3708      	adds	r7, #8
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}

080034f6 <HAL_TIM_IRQHandler>:
=======
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2202      	movs	r2, #2
 8003434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681a      	ldr	r2, [r3, #0]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	3304      	adds	r3, #4
 8003494:	4619      	mov	r1, r3
 8003496:	4610      	mov	r0, r2
 8003498:	f000 f9f6 	bl	8003888 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2201      	movs	r2, #1
 80034a0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2201      	movs	r2, #1
 80034a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2201      	movs	r2, #1
 80034b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2201      	movs	r2, #1
 80034b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2201      	movs	r2, #1
 80034c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2201      	movs	r2, #1
 80034c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2201      	movs	r2, #1
 80034d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2201      	movs	r2, #1
 80034d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2201      	movs	r2, #1
 80034e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2201      	movs	r2, #1
 80034e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2201      	movs	r2, #1
 80034f0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2201      	movs	r2, #1
 80034f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80034fc:	2300      	movs	r3, #0
}
 80034fe:	4618      	mov	r0, r3
 8003500:	3708      	adds	r7, #8
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}

<<<<<<< HEAD
08003506 <HAL_TIM_IRQHandler>:
=======
080034b2 <HAL_TIM_IRQHandler>:
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8003506:	b580      	push	{r7, lr}
 8003508:	b082      	sub	sp, #8
 800350a:	af00      	add	r7, sp, #0
 800350c:	6078      	str	r0, [r7, #4]
=======
<<<<<<< HEAD
 80034f6:	b580      	push	{r7, lr}
 80034f8:	b082      	sub	sp, #8
 80034fa:	af00      	add	r7, sp, #0
 80034fc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	691b      	ldr	r3, [r3, #16]
 8003504:	f003 0302 	and.w	r3, r3, #2
 8003508:	2b02      	cmp	r3, #2
 800350a:	d122      	bne.n	8003552 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	68db      	ldr	r3, [r3, #12]
 8003512:	f003 0302 	and.w	r3, r3, #2
 8003516:	2b02      	cmp	r3, #2
 8003518:	d11b      	bne.n	8003552 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f06f 0202 	mvn.w	r2, #2
 8003522:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2201      	movs	r2, #1
 8003528:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	699b      	ldr	r3, [r3, #24]
 8003530:	f003 0303 	and.w	r3, r3, #3
 8003534:	2b00      	cmp	r3, #0
 8003536:	d003      	beq.n	8003540 <HAL_TIM_IRQHandler+0x4a>
=======
 80034b2:	b580      	push	{r7, lr}
 80034b4:	b082      	sub	sp, #8
 80034b6:	af00      	add	r7, sp, #0
 80034b8:	6078      	str	r0, [r7, #4]
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	691b      	ldr	r3, [r3, #16]
 8003514:	f003 0302 	and.w	r3, r3, #2
 8003518:	2b02      	cmp	r3, #2
 800351a:	d122      	bne.n	8003562 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	68db      	ldr	r3, [r3, #12]
 8003522:	f003 0302 	and.w	r3, r3, #2
 8003526:	2b02      	cmp	r3, #2
 8003528:	d11b      	bne.n	8003562 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f06f 0202 	mvn.w	r2, #2
 8003532:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2201      	movs	r2, #1
 8003538:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
<<<<<<< HEAD
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	699b      	ldr	r3, [r3, #24]
 8003540:	f003 0303 	and.w	r3, r3, #3
 8003544:	2b00      	cmp	r3, #0
 8003546:	d003      	beq.n	8003550 <HAL_TIM_IRQHandler+0x4a>
=======
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	699b      	ldr	r3, [r3, #24]
 80034ec:	f003 0303 	and.w	r3, r3, #3
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d003      	beq.n	80034fc <HAL_TIM_IRQHandler+0x4a>
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< HEAD
 8003548:	6878      	ldr	r0, [r7, #4]
 800354a:	f000 f97f 	bl	800384c <HAL_TIM_IC_CaptureCallback>
 800354e:	e005      	b.n	800355c <HAL_TIM_IRQHandler+0x56>
=======
<<<<<<< HEAD
 8003538:	6878      	ldr	r0, [r7, #4]
 800353a:	f000 f97f 	bl	800383c <HAL_TIM_IC_CaptureCallback>
 800353e:	e005      	b.n	800354c <HAL_TIM_IRQHandler+0x56>
=======
 80034f4:	6878      	ldr	r0, [r7, #4]
 80034f6:	f000 f97f 	bl	80037f8 <HAL_TIM_IC_CaptureCallback>
 80034fa:	e005      	b.n	8003508 <HAL_TIM_IRQHandler+0x56>
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< HEAD
 8003550:	6878      	ldr	r0, [r7, #4]
 8003552:	f000 f971 	bl	8003838 <HAL_TIM_OC_DelayElapsedCallback>
=======
<<<<<<< HEAD
 8003540:	6878      	ldr	r0, [r7, #4]
 8003542:	f000 f971 	bl	8003828 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	f000 f982 	bl	8003850 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2200      	movs	r2, #0
 8003550:	771a      	strb	r2, [r3, #28]
=======
 80034fc:	6878      	ldr	r0, [r7, #4]
 80034fe:	f000 f971 	bl	80037e4 <HAL_TIM_OC_DelayElapsedCallback>
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003556:	6878      	ldr	r0, [r7, #4]
 8003558:	f000 f982 	bl	8003860 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
<<<<<<< HEAD
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2200      	movs	r2, #0
 8003560:	771a      	strb	r2, [r3, #28]
=======
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2200      	movs	r2, #0
 800350c:	771a      	strb	r2, [r3, #28]
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
<<<<<<< HEAD
=======
<<<<<<< HEAD
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	691b      	ldr	r3, [r3, #16]
 8003558:	f003 0304 	and.w	r3, r3, #4
 800355c:	2b04      	cmp	r3, #4
 800355e:	d122      	bne.n	80035a6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	68db      	ldr	r3, [r3, #12]
 8003566:	f003 0304 	and.w	r3, r3, #4
 800356a:	2b04      	cmp	r3, #4
 800356c:	d11b      	bne.n	80035a6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f06f 0204 	mvn.w	r2, #4
 8003576:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2202      	movs	r2, #2
 800357c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	699b      	ldr	r3, [r3, #24]
 8003584:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003588:	2b00      	cmp	r3, #0
 800358a:	d003      	beq.n	8003594 <HAL_TIM_IRQHandler+0x9e>
=======
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	691b      	ldr	r3, [r3, #16]
 8003514:	f003 0304 	and.w	r3, r3, #4
 8003518:	2b04      	cmp	r3, #4
 800351a:	d122      	bne.n	8003562 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	68db      	ldr	r3, [r3, #12]
 8003522:	f003 0304 	and.w	r3, r3, #4
 8003526:	2b04      	cmp	r3, #4
 8003528:	d11b      	bne.n	8003562 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f06f 0204 	mvn.w	r2, #4
 8003532:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2202      	movs	r2, #2
 8003538:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	699b      	ldr	r3, [r3, #24]
 8003540:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003544:	2b00      	cmp	r3, #0
 8003546:	d003      	beq.n	8003550 <HAL_TIM_IRQHandler+0x9e>
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< HEAD
 800358c:	6878      	ldr	r0, [r7, #4]
 800358e:	f000 f955 	bl	800383c <HAL_TIM_IC_CaptureCallback>
 8003592:	e005      	b.n	80035a0 <HAL_TIM_IRQHandler+0xaa>
=======
 8003548:	6878      	ldr	r0, [r7, #4]
 800354a:	f000 f955 	bl	80037f8 <HAL_TIM_IC_CaptureCallback>
 800354e:	e005      	b.n	800355c <HAL_TIM_IRQHandler+0xaa>
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< HEAD
 8003594:	6878      	ldr	r0, [r7, #4]
 8003596:	f000 f947 	bl	8003828 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800359a:	6878      	ldr	r0, [r7, #4]
 800359c:	f000 f958 	bl	8003850 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2200      	movs	r2, #0
 80035a4:	771a      	strb	r2, [r3, #28]
=======
 8003550:	6878      	ldr	r0, [r7, #4]
 8003552:	f000 f947 	bl	80037e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003556:	6878      	ldr	r0, [r7, #4]
 8003558:	f000 f958 	bl	800380c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2200      	movs	r2, #0
 8003560:	771a      	strb	r2, [r3, #28]
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
<<<<<<< HEAD
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	691b      	ldr	r3, [r3, #16]
 80035ac:	f003 0308 	and.w	r3, r3, #8
 80035b0:	2b08      	cmp	r3, #8
 80035b2:	d122      	bne.n	80035fa <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	68db      	ldr	r3, [r3, #12]
 80035ba:	f003 0308 	and.w	r3, r3, #8
 80035be:	2b08      	cmp	r3, #8
 80035c0:	d11b      	bne.n	80035fa <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f06f 0208 	mvn.w	r2, #8
 80035ca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2204      	movs	r2, #4
 80035d0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	69db      	ldr	r3, [r3, #28]
 80035d8:	f003 0303 	and.w	r3, r3, #3
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d003      	beq.n	80035e8 <HAL_TIM_IRQHandler+0xf2>
=======
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	691b      	ldr	r3, [r3, #16]
 8003568:	f003 0304 	and.w	r3, r3, #4
 800356c:	2b04      	cmp	r3, #4
 800356e:	d122      	bne.n	80035b6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	68db      	ldr	r3, [r3, #12]
 8003576:	f003 0304 	and.w	r3, r3, #4
 800357a:	2b04      	cmp	r3, #4
 800357c:	d11b      	bne.n	80035b6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f06f 0204 	mvn.w	r2, #4
 8003586:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2202      	movs	r2, #2
 800358c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	699b      	ldr	r3, [r3, #24]
 8003594:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003598:	2b00      	cmp	r3, #0
<<<<<<< HEAD
 800359a:	d003      	beq.n	80035a4 <HAL_TIM_IRQHandler+0x9e>
=======
 800359a:	d003      	beq.n	80035a4 <HAL_TIM_IRQHandler+0xf2>
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< HEAD
 80035e0:	6878      	ldr	r0, [r7, #4]
 80035e2:	f000 f92b 	bl	800383c <HAL_TIM_IC_CaptureCallback>
 80035e6:	e005      	b.n	80035f4 <HAL_TIM_IRQHandler+0xfe>
=======
 800359c:	6878      	ldr	r0, [r7, #4]
<<<<<<< HEAD
 800359e:	f000 f955 	bl	800384c <HAL_TIM_IC_CaptureCallback>
 80035a2:	e005      	b.n	80035b0 <HAL_TIM_IRQHandler+0xaa>
=======
 800359e:	f000 f92b 	bl	80037f8 <HAL_TIM_IC_CaptureCallback>
 80035a2:	e005      	b.n	80035b0 <HAL_TIM_IRQHandler+0xfe>
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< HEAD
 80035e8:	6878      	ldr	r0, [r7, #4]
 80035ea:	f000 f91d 	bl	8003828 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035ee:	6878      	ldr	r0, [r7, #4]
 80035f0:	f000 f92e 	bl	8003850 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2200      	movs	r2, #0
 80035f8:	771a      	strb	r2, [r3, #28]
=======
 80035a4:	6878      	ldr	r0, [r7, #4]
 80035a6:	f000 f947 	bl	8003838 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	f000 f958 	bl	8003860 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2200      	movs	r2, #0
 80035b4:	771a      	strb	r2, [r3, #28]
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
    }
  }
<<<<<<< HEAD
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
=======
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
<<<<<<< HEAD
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	691b      	ldr	r3, [r3, #16]
 8003600:	f003 0310 	and.w	r3, r3, #16
 8003604:	2b10      	cmp	r3, #16
 8003606:	d122      	bne.n	800364e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	68db      	ldr	r3, [r3, #12]
 800360e:	f003 0310 	and.w	r3, r3, #16
 8003612:	2b10      	cmp	r3, #16
 8003614:	d11b      	bne.n	800364e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f06f 0210 	mvn.w	r2, #16
 800361e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2208      	movs	r2, #8
 8003624:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	69db      	ldr	r3, [r3, #28]
 800362c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003630:	2b00      	cmp	r3, #0
 8003632:	d003      	beq.n	800363c <HAL_TIM_IRQHandler+0x146>
=======
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	691b      	ldr	r3, [r3, #16]
 80035bc:	f003 0308 	and.w	r3, r3, #8
 80035c0:	2b08      	cmp	r3, #8
 80035c2:	d122      	bne.n	800360a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	68db      	ldr	r3, [r3, #12]
 80035ca:	f003 0308 	and.w	r3, r3, #8
 80035ce:	2b08      	cmp	r3, #8
 80035d0:	d11b      	bne.n	800360a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f06f 0208 	mvn.w	r2, #8
 80035da:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2204      	movs	r2, #4
 80035e0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	69db      	ldr	r3, [r3, #28]
 80035e8:	f003 0303 	and.w	r3, r3, #3
 80035ec:	2b00      	cmp	r3, #0
<<<<<<< HEAD
 80035ee:	d003      	beq.n	80035f8 <HAL_TIM_IRQHandler+0xf2>
=======
 80035ee:	d003      	beq.n	80035f8 <HAL_TIM_IRQHandler+0x146>
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< HEAD
 8003634:	6878      	ldr	r0, [r7, #4]
 8003636:	f000 f901 	bl	800383c <HAL_TIM_IC_CaptureCallback>
 800363a:	e005      	b.n	8003648 <HAL_TIM_IRQHandler+0x152>
=======
 80035f0:	6878      	ldr	r0, [r7, #4]
<<<<<<< HEAD
 80035f2:	f000 f92b 	bl	800384c <HAL_TIM_IC_CaptureCallback>
 80035f6:	e005      	b.n	8003604 <HAL_TIM_IRQHandler+0xfe>
=======
 80035f2:	f000 f901 	bl	80037f8 <HAL_TIM_IC_CaptureCallback>
 80035f6:	e005      	b.n	8003604 <HAL_TIM_IRQHandler+0x152>
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< HEAD
 800363c:	6878      	ldr	r0, [r7, #4]
 800363e:	f000 f8f3 	bl	8003828 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	f000 f904 	bl	8003850 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2200      	movs	r2, #0
 800364c:	771a      	strb	r2, [r3, #28]
=======
 80035f8:	6878      	ldr	r0, [r7, #4]
 80035fa:	f000 f91d 	bl	8003838 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	f000 f92e 	bl	8003860 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2200      	movs	r2, #0
 8003608:	771a      	strb	r2, [r3, #28]
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
    }
  }
<<<<<<< HEAD
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
=======
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
<<<<<<< HEAD
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	691b      	ldr	r3, [r3, #16]
 8003654:	f003 0301 	and.w	r3, r3, #1
 8003658:	2b01      	cmp	r3, #1
 800365a:	d10e      	bne.n	800367a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	68db      	ldr	r3, [r3, #12]
 8003662:	f003 0301 	and.w	r3, r3, #1
 8003666:	2b01      	cmp	r3, #1
 8003668:	d107      	bne.n	800367a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f06f 0201 	mvn.w	r2, #1
 8003672:	611a      	str	r2, [r3, #16]
=======
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	691b      	ldr	r3, [r3, #16]
 8003610:	f003 0310 	and.w	r3, r3, #16
 8003614:	2b10      	cmp	r3, #16
 8003616:	d122      	bne.n	800365e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	68db      	ldr	r3, [r3, #12]
 800361e:	f003 0310 	and.w	r3, r3, #16
 8003622:	2b10      	cmp	r3, #16
 8003624:	d11b      	bne.n	800365e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f06f 0210 	mvn.w	r2, #16
 800362e:	611a      	str	r2, [r3, #16]
<<<<<<< HEAD
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2208      	movs	r2, #8
 8003634:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	69db      	ldr	r3, [r3, #28]
 800363c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003640:	2b00      	cmp	r3, #0
 8003642:	d003      	beq.n	800364c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003644:	6878      	ldr	r0, [r7, #4]
 8003646:	f000 f901 	bl	800384c <HAL_TIM_IC_CaptureCallback>
 800364a:	e005      	b.n	8003658 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800364c:	6878      	ldr	r0, [r7, #4]
 800364e:	f000 f8f3 	bl	8003838 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	f000 f904 	bl	8003860 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2200      	movs	r2, #0
 800365c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	691b      	ldr	r3, [r3, #16]
 8003664:	f003 0301 	and.w	r3, r3, #1
 8003668:	2b01      	cmp	r3, #1
 800366a:	d10e      	bne.n	800368a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	68db      	ldr	r3, [r3, #12]
 8003672:	f003 0301 	and.w	r3, r3, #1
 8003676:	2b01      	cmp	r3, #1
 8003678:	d107      	bne.n	800368a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f06f 0201 	mvn.w	r2, #1
 8003682:	611a      	str	r2, [r3, #16]
=======
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
<<<<<<< HEAD
 8003684:	6878      	ldr	r0, [r7, #4]
 8003686:	f7fc ff3d 	bl	8000504 <HAL_TIM_PeriodElapsedCallback>
=======
<<<<<<< HEAD
 8003674:	6878      	ldr	r0, [r7, #4]
 8003676:	f7fc ff45 	bl	8000504 <HAL_TIM_PeriodElapsedCallback>
=======
 8003630:	6878      	ldr	r0, [r7, #4]
 8003632:	f7fc ff67 	bl	8000504 <HAL_TIM_PeriodElapsedCallback>
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
<<<<<<< HEAD
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	691b      	ldr	r3, [r3, #16]
 8003690:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003694:	2b80      	cmp	r3, #128	; 0x80
 8003696:	d10e      	bne.n	80036b6 <HAL_TIM_IRQHandler+0x1b0>
=======
<<<<<<< HEAD
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	691b      	ldr	r3, [r3, #16]
 8003680:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003684:	2b80      	cmp	r3, #128	; 0x80
 8003686:	d10e      	bne.n	80036a6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	68db      	ldr	r3, [r3, #12]
 800368e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003692:	2b80      	cmp	r3, #128	; 0x80
 8003694:	d107      	bne.n	80036a6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800369e:	611a      	str	r2, [r3, #16]
=======
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	691b      	ldr	r3, [r3, #16]
 800363c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003640:	2b80      	cmp	r3, #128	; 0x80
 8003642:	d10e      	bne.n	8003662 <HAL_TIM_IRQHandler+0x1b0>
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	68db      	ldr	r3, [r3, #12]
 800369e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036a2:	2b80      	cmp	r3, #128	; 0x80
 80036a4:	d107      	bne.n	80036b6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
<<<<<<< HEAD
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80036ae:	611a      	str	r2, [r3, #16]
=======
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800365a:	611a      	str	r2, [r3, #16]
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
<<<<<<< HEAD
 80036b0:	6878      	ldr	r0, [r7, #4]
 80036b2:	f000 fc7f 	bl	8003fb4 <HAL_TIMEx_BreakCallback>
=======
<<<<<<< HEAD
 80036a0:	6878      	ldr	r0, [r7, #4]
 80036a2:	f000 fc7f 	bl	8003fa4 <HAL_TIMEx_BreakCallback>
=======
 800365c:	6878      	ldr	r0, [r7, #4]
 800365e:	f000 fc7f 	bl	8003f60 <HAL_TIMEx_BreakCallback>
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
<<<<<<< HEAD
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	691b      	ldr	r3, [r3, #16]
 80036bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036c4:	d10e      	bne.n	80036e4 <HAL_TIM_IRQHandler+0x1de>
=======
<<<<<<< HEAD
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	691b      	ldr	r3, [r3, #16]
 80036ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036b4:	d10e      	bne.n	80036d4 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	68db      	ldr	r3, [r3, #12]
 80036bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036c0:	2b80      	cmp	r3, #128	; 0x80
 80036c2:	d107      	bne.n	80036d4 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80036cc:	611a      	str	r2, [r3, #16]
=======
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	691b      	ldr	r3, [r3, #16]
 8003668:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800366c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003670:	d10e      	bne.n	8003690 <HAL_TIM_IRQHandler+0x1de>
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	68db      	ldr	r3, [r3, #12]
 80036cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036d0:	2b80      	cmp	r3, #128	; 0x80
 80036d2:	d107      	bne.n	80036e4 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
<<<<<<< HEAD
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80036dc:	611a      	str	r2, [r3, #16]
=======
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003688:	611a      	str	r2, [r3, #16]
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
<<<<<<< HEAD
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	f000 fc72 	bl	8003fc8 <HAL_TIMEx_Break2Callback>
=======
<<<<<<< HEAD
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	f000 fc72 	bl	8003fb8 <HAL_TIMEx_Break2Callback>
=======
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	f000 fc72 	bl	8003f74 <HAL_TIMEx_Break2Callback>
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
<<<<<<< HEAD
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	691b      	ldr	r3, [r3, #16]
 80036ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036ee:	2b40      	cmp	r3, #64	; 0x40
 80036f0:	d10e      	bne.n	8003710 <HAL_TIM_IRQHandler+0x20a>
=======
<<<<<<< HEAD
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	691b      	ldr	r3, [r3, #16]
 80036da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036de:	2b40      	cmp	r3, #64	; 0x40
 80036e0:	d10e      	bne.n	8003700 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	68db      	ldr	r3, [r3, #12]
 80036e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036ec:	2b40      	cmp	r3, #64	; 0x40
 80036ee:	d107      	bne.n	8003700 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80036f8:	611a      	str	r2, [r3, #16]
=======
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	691b      	ldr	r3, [r3, #16]
 8003696:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800369a:	2b40      	cmp	r3, #64	; 0x40
 800369c:	d10e      	bne.n	80036bc <HAL_TIM_IRQHandler+0x20a>
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	68db      	ldr	r3, [r3, #12]
 80036f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036fc:	2b40      	cmp	r3, #64	; 0x40
 80036fe:	d107      	bne.n	8003710 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
<<<<<<< HEAD
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003708:	611a      	str	r2, [r3, #16]
=======
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80036b4:	611a      	str	r2, [r3, #16]
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
<<<<<<< HEAD
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f000 f8b2 	bl	8003874 <HAL_TIM_TriggerCallback>
=======
<<<<<<< HEAD
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	f000 f8b2 	bl	8003864 <HAL_TIM_TriggerCallback>
=======
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	f000 f8b2 	bl	8003820 <HAL_TIM_TriggerCallback>
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
<<<<<<< HEAD
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	691b      	ldr	r3, [r3, #16]
 8003716:	f003 0320 	and.w	r3, r3, #32
 800371a:	2b20      	cmp	r3, #32
 800371c:	d10e      	bne.n	800373c <HAL_TIM_IRQHandler+0x236>
=======
<<<<<<< HEAD
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	691b      	ldr	r3, [r3, #16]
 8003706:	f003 0320 	and.w	r3, r3, #32
 800370a:	2b20      	cmp	r3, #32
 800370c:	d10e      	bne.n	800372c <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	68db      	ldr	r3, [r3, #12]
 8003714:	f003 0320 	and.w	r3, r3, #32
 8003718:	2b20      	cmp	r3, #32
 800371a:	d107      	bne.n	800372c <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f06f 0220 	mvn.w	r2, #32
 8003724:	611a      	str	r2, [r3, #16]
=======
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	691b      	ldr	r3, [r3, #16]
 80036c2:	f003 0320 	and.w	r3, r3, #32
 80036c6:	2b20      	cmp	r3, #32
 80036c8:	d10e      	bne.n	80036e8 <HAL_TIM_IRQHandler+0x236>
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	68db      	ldr	r3, [r3, #12]
 8003724:	f003 0320 	and.w	r3, r3, #32
 8003728:	2b20      	cmp	r3, #32
 800372a:	d107      	bne.n	800373c <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
<<<<<<< HEAD
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f06f 0220 	mvn.w	r2, #32
 8003734:	611a      	str	r2, [r3, #16]
=======
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f06f 0220 	mvn.w	r2, #32
 80036e0:	611a      	str	r2, [r3, #16]
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
<<<<<<< HEAD
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	f000 fc32 	bl	8003fa0 <HAL_TIMEx_CommutCallback>
=======
<<<<<<< HEAD
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f000 fc32 	bl	8003f90 <HAL_TIMEx_CommutCallback>
=======
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f000 fc32 	bl	8003f4c <HAL_TIMEx_CommutCallback>
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
<<<<<<< HEAD
 800373c:	bf00      	nop
 800373e:	3708      	adds	r7, #8
 8003740:	46bd      	mov	sp, r7
 8003742:	bd80      	pop	{r7, pc}

08003744 <HAL_TIM_OC_ConfigChannel>:
=======
<<<<<<< HEAD
 800372c:	bf00      	nop
 800372e:	3708      	adds	r7, #8
 8003730:	46bd      	mov	sp, r7
 8003732:	bd80      	pop	{r7, pc}

08003734 <HAL_TIM_OC_ConfigChannel>:
=======
 80036e8:	bf00      	nop
 80036ea:	3708      	adds	r7, #8
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bd80      	pop	{r7, pc}

080036f0 <HAL_TIM_OC_ConfigChannel>:
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
<<<<<<< HEAD
 8003744:	b580      	push	{r7, lr}
 8003746:	b086      	sub	sp, #24
 8003748:	af00      	add	r7, sp, #0
 800374a:	60f8      	str	r0, [r7, #12]
 800374c:	60b9      	str	r1, [r7, #8]
 800374e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003750:	2300      	movs	r3, #0
 8003752:	75fb      	strb	r3, [r7, #23]
=======
<<<<<<< HEAD
 8003734:	b580      	push	{r7, lr}
 8003736:	b086      	sub	sp, #24
 8003738:	af00      	add	r7, sp, #0
 800373a:	60f8      	str	r0, [r7, #12]
 800373c:	60b9      	str	r1, [r7, #8]
 800373e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003740:	2300      	movs	r3, #0
 8003742:	75fb      	strb	r3, [r7, #23]
=======
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b086      	sub	sp, #24
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	60f8      	str	r0, [r7, #12]
 80036f8:	60b9      	str	r1, [r7, #8]
 80036fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036fc:	2300      	movs	r3, #0
 80036fe:	75fb      	strb	r3, [r7, #23]
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
<<<<<<< HEAD
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800375a:	2b01      	cmp	r3, #1
 800375c:	d101      	bne.n	8003762 <HAL_TIM_OC_ConfigChannel+0x1e>
 800375e:	2302      	movs	r3, #2
 8003760:	e066      	b.n	8003830 <HAL_TIM_OC_ConfigChannel+0xec>
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	2201      	movs	r2, #1
 8003766:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2b14      	cmp	r3, #20
 800376e:	d857      	bhi.n	8003820 <HAL_TIM_OC_ConfigChannel+0xdc>
 8003770:	a201      	add	r2, pc, #4	; (adr r2, 8003778 <HAL_TIM_OC_ConfigChannel+0x34>)
 8003772:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003776:	bf00      	nop
 8003778:	080037cd 	.word	0x080037cd
 800377c:	08003821 	.word	0x08003821
 8003780:	08003821 	.word	0x08003821
 8003784:	08003821 	.word	0x08003821
 8003788:	080037db 	.word	0x080037db
 800378c:	08003821 	.word	0x08003821
 8003790:	08003821 	.word	0x08003821
 8003794:	08003821 	.word	0x08003821
 8003798:	080037e9 	.word	0x080037e9
 800379c:	08003821 	.word	0x08003821
 80037a0:	08003821 	.word	0x08003821
 80037a4:	08003821 	.word	0x08003821
 80037a8:	080037f7 	.word	0x080037f7
 80037ac:	08003821 	.word	0x08003821
 80037b0:	08003821 	.word	0x08003821
 80037b4:	08003821 	.word	0x08003821
 80037b8:	08003805 	.word	0x08003805
 80037bc:	08003821 	.word	0x08003821
 80037c0:	08003821 	.word	0x08003821
 80037c4:	08003821 	.word	0x08003821
 80037c8:	08003813 	.word	0x08003813
=======
<<<<<<< HEAD
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800374a:	2b01      	cmp	r3, #1
 800374c:	d101      	bne.n	8003752 <HAL_TIM_OC_ConfigChannel+0x1e>
 800374e:	2302      	movs	r3, #2
 8003750:	e066      	b.n	8003820 <HAL_TIM_OC_ConfigChannel+0xec>
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2201      	movs	r2, #1
 8003756:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2b14      	cmp	r3, #20
 800375e:	d857      	bhi.n	8003810 <HAL_TIM_OC_ConfigChannel+0xdc>
 8003760:	a201      	add	r2, pc, #4	; (adr r2, 8003768 <HAL_TIM_OC_ConfigChannel+0x34>)
 8003762:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003766:	bf00      	nop
 8003768:	080037bd 	.word	0x080037bd
 800376c:	08003811 	.word	0x08003811
 8003770:	08003811 	.word	0x08003811
 8003774:	08003811 	.word	0x08003811
 8003778:	080037cb 	.word	0x080037cb
 800377c:	08003811 	.word	0x08003811
 8003780:	08003811 	.word	0x08003811
 8003784:	08003811 	.word	0x08003811
 8003788:	080037d9 	.word	0x080037d9
 800378c:	08003811 	.word	0x08003811
 8003790:	08003811 	.word	0x08003811
 8003794:	08003811 	.word	0x08003811
 8003798:	080037e7 	.word	0x080037e7
 800379c:	08003811 	.word	0x08003811
 80037a0:	08003811 	.word	0x08003811
 80037a4:	08003811 	.word	0x08003811
 80037a8:	080037f5 	.word	0x080037f5
 80037ac:	08003811 	.word	0x08003811
 80037b0:	08003811 	.word	0x08003811
 80037b4:	08003811 	.word	0x08003811
 80037b8:	08003803 	.word	0x08003803
=======
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003706:	2b01      	cmp	r3, #1
 8003708:	d101      	bne.n	800370e <HAL_TIM_OC_ConfigChannel+0x1e>
 800370a:	2302      	movs	r3, #2
 800370c:	e066      	b.n	80037dc <HAL_TIM_OC_ConfigChannel+0xec>
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	2201      	movs	r2, #1
 8003712:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2b14      	cmp	r3, #20
 800371a:	d857      	bhi.n	80037cc <HAL_TIM_OC_ConfigChannel+0xdc>
 800371c:	a201      	add	r2, pc, #4	; (adr r2, 8003724 <HAL_TIM_OC_ConfigChannel+0x34>)
 800371e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003722:	bf00      	nop
 8003724:	08003779 	.word	0x08003779
 8003728:	080037cd 	.word	0x080037cd
 800372c:	080037cd 	.word	0x080037cd
 8003730:	080037cd 	.word	0x080037cd
 8003734:	08003787 	.word	0x08003787
 8003738:	080037cd 	.word	0x080037cd
 800373c:	080037cd 	.word	0x080037cd
 8003740:	080037cd 	.word	0x080037cd
 8003744:	08003795 	.word	0x08003795
 8003748:	080037cd 	.word	0x080037cd
 800374c:	080037cd 	.word	0x080037cd
 8003750:	080037cd 	.word	0x080037cd
 8003754:	080037a3 	.word	0x080037a3
 8003758:	080037cd 	.word	0x080037cd
 800375c:	080037cd 	.word	0x080037cd
 8003760:	080037cd 	.word	0x080037cd
 8003764:	080037b1 	.word	0x080037b1
 8003768:	080037cd 	.word	0x080037cd
 800376c:	080037cd 	.word	0x080037cd
 8003770:	080037cd 	.word	0x080037cd
 8003774:	080037bf 	.word	0x080037bf
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
<<<<<<< HEAD
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	68b9      	ldr	r1, [r7, #8]
 80037d2:	4618      	mov	r0, r3
 80037d4:	f000 f8f8 	bl	80039c8 <TIM_OC1_SetConfig>
      break;
 80037d8:	e025      	b.n	8003826 <HAL_TIM_OC_ConfigChannel+0xe2>
=======
<<<<<<< HEAD
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	68b9      	ldr	r1, [r7, #8]
 80037c2:	4618      	mov	r0, r3
 80037c4:	f000 f8f8 	bl	80039b8 <TIM_OC1_SetConfig>
      break;
 80037c8:	e025      	b.n	8003816 <HAL_TIM_OC_ConfigChannel+0xe2>
=======
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	68b9      	ldr	r1, [r7, #8]
 800377e:	4618      	mov	r0, r3
 8003780:	f000 f8f8 	bl	8003974 <TIM_OC1_SetConfig>
      break;
 8003784:	e025      	b.n	80037d2 <HAL_TIM_OC_ConfigChannel+0xe2>
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
<<<<<<< HEAD
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	68b9      	ldr	r1, [r7, #8]
 80037e0:	4618      	mov	r0, r3
 80037e2:	f000 f963 	bl	8003aac <TIM_OC2_SetConfig>
      break;
 80037e6:	e01e      	b.n	8003826 <HAL_TIM_OC_ConfigChannel+0xe2>
=======
<<<<<<< HEAD
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	68b9      	ldr	r1, [r7, #8]
 80037d0:	4618      	mov	r0, r3
 80037d2:	f000 f963 	bl	8003a9c <TIM_OC2_SetConfig>
      break;
 80037d6:	e01e      	b.n	8003816 <HAL_TIM_OC_ConfigChannel+0xe2>
=======
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	68b9      	ldr	r1, [r7, #8]
 800378c:	4618      	mov	r0, r3
 800378e:	f000 f963 	bl	8003a58 <TIM_OC2_SetConfig>
      break;
 8003792:	e01e      	b.n	80037d2 <HAL_TIM_OC_ConfigChannel+0xe2>
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
<<<<<<< HEAD
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	68b9      	ldr	r1, [r7, #8]
 80037ee:	4618      	mov	r0, r3
 80037f0:	f000 f9d4 	bl	8003b9c <TIM_OC3_SetConfig>
      break;
 80037f4:	e017      	b.n	8003826 <HAL_TIM_OC_ConfigChannel+0xe2>
=======
<<<<<<< HEAD
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	68b9      	ldr	r1, [r7, #8]
 80037de:	4618      	mov	r0, r3
 80037e0:	f000 f9d4 	bl	8003b8c <TIM_OC3_SetConfig>
      break;
 80037e4:	e017      	b.n	8003816 <HAL_TIM_OC_ConfigChannel+0xe2>
=======
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	68b9      	ldr	r1, [r7, #8]
 800379a:	4618      	mov	r0, r3
 800379c:	f000 f9d4 	bl	8003b48 <TIM_OC3_SetConfig>
      break;
 80037a0:	e017      	b.n	80037d2 <HAL_TIM_OC_ConfigChannel+0xe2>
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
<<<<<<< HEAD
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	68b9      	ldr	r1, [r7, #8]
 80037fc:	4618      	mov	r0, r3
 80037fe:	f000 fa43 	bl	8003c88 <TIM_OC4_SetConfig>
      break;
 8003802:	e010      	b.n	8003826 <HAL_TIM_OC_ConfigChannel+0xe2>
=======
<<<<<<< HEAD
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	68b9      	ldr	r1, [r7, #8]
 80037ec:	4618      	mov	r0, r3
 80037ee:	f000 fa43 	bl	8003c78 <TIM_OC4_SetConfig>
      break;
 80037f2:	e010      	b.n	8003816 <HAL_TIM_OC_ConfigChannel+0xe2>
=======
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	68b9      	ldr	r1, [r7, #8]
 80037a8:	4618      	mov	r0, r3
 80037aa:	f000 fa43 	bl	8003c34 <TIM_OC4_SetConfig>
      break;
 80037ae:	e010      	b.n	80037d2 <HAL_TIM_OC_ConfigChannel+0xe2>
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
<<<<<<< HEAD
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	68b9      	ldr	r1, [r7, #8]
 800380a:	4618      	mov	r0, r3
 800380c:	f000 fa94 	bl	8003d38 <TIM_OC5_SetConfig>
      break;
 8003810:	e009      	b.n	8003826 <HAL_TIM_OC_ConfigChannel+0xe2>
=======
<<<<<<< HEAD
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	68b9      	ldr	r1, [r7, #8]
 80037fa:	4618      	mov	r0, r3
 80037fc:	f000 fa94 	bl	8003d28 <TIM_OC5_SetConfig>
      break;
 8003800:	e009      	b.n	8003816 <HAL_TIM_OC_ConfigChannel+0xe2>
=======
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	68b9      	ldr	r1, [r7, #8]
 80037b6:	4618      	mov	r0, r3
 80037b8:	f000 fa94 	bl	8003ce4 <TIM_OC5_SetConfig>
      break;
 80037bc:	e009      	b.n	80037d2 <HAL_TIM_OC_ConfigChannel+0xe2>
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
<<<<<<< HEAD
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	68b9      	ldr	r1, [r7, #8]
 8003818:	4618      	mov	r0, r3
 800381a:	f000 fadf 	bl	8003ddc <TIM_OC6_SetConfig>
      break;
 800381e:	e002      	b.n	8003826 <HAL_TIM_OC_ConfigChannel+0xe2>
=======
<<<<<<< HEAD
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	68b9      	ldr	r1, [r7, #8]
 8003808:	4618      	mov	r0, r3
 800380a:	f000 fadf 	bl	8003dcc <TIM_OC6_SetConfig>
      break;
 800380e:	e002      	b.n	8003816 <HAL_TIM_OC_ConfigChannel+0xe2>
=======
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	68b9      	ldr	r1, [r7, #8]
 80037c4:	4618      	mov	r0, r3
 80037c6:	f000 fadf 	bl	8003d88 <TIM_OC6_SetConfig>
      break;
 80037ca:	e002      	b.n	80037d2 <HAL_TIM_OC_ConfigChannel+0xe2>
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
    }

    default:
      status = HAL_ERROR;
<<<<<<< HEAD
 8003820:	2301      	movs	r3, #1
 8003822:	75fb      	strb	r3, [r7, #23]
=======
<<<<<<< HEAD
 8003810:	2301      	movs	r3, #1
 8003812:	75fb      	strb	r3, [r7, #23]
      break;
 8003814:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	2200      	movs	r2, #0
 800381a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800381e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003820:	4618      	mov	r0, r3
 8003822:	3718      	adds	r7, #24
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}

08003828 <HAL_TIM_OC_DelayElapsedCallback>:
=======
 80037cc:	2301      	movs	r3, #1
 80037ce:	75fb      	strb	r3, [r7, #23]
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
      break;
 8003824:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	2200      	movs	r2, #0
 800382a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800382e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003830:	4618      	mov	r0, r3
 8003832:	3718      	adds	r7, #24
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}

<<<<<<< HEAD
08003838 <HAL_TIM_OC_DelayElapsedCallback>:
=======
080037e4 <HAL_TIM_OC_DelayElapsedCallback>:
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8003838:	b480      	push	{r7}
 800383a:	b083      	sub	sp, #12
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
=======
<<<<<<< HEAD
 8003828:	b480      	push	{r7}
 800382a:	b083      	sub	sp, #12
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
=======
 80037e4:	b480      	push	{r7}
 80037e6:	b083      	sub	sp, #12
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8003840:	bf00      	nop
 8003842:	370c      	adds	r7, #12
 8003844:	46bd      	mov	sp, r7
 8003846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384a:	4770      	bx	lr

0800384c <HAL_TIM_IC_CaptureCallback>:
=======
<<<<<<< HEAD
 8003830:	bf00      	nop
 8003832:	370c      	adds	r7, #12
 8003834:	46bd      	mov	sp, r7
 8003836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383a:	4770      	bx	lr

0800383c <HAL_TIM_IC_CaptureCallback>:
=======
 80037ec:	bf00      	nop
 80037ee:	370c      	adds	r7, #12
 80037f0:	46bd      	mov	sp, r7
 80037f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f6:	4770      	bx	lr

080037f8 <HAL_TIM_IC_CaptureCallback>:
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 800384c:	b480      	push	{r7}
 800384e:	b083      	sub	sp, #12
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
=======
<<<<<<< HEAD
 800383c:	b480      	push	{r7}
 800383e:	b083      	sub	sp, #12
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
=======
 80037f8:	b480      	push	{r7}
 80037fa:	b083      	sub	sp, #12
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8003854:	bf00      	nop
 8003856:	370c      	adds	r7, #12
 8003858:	46bd      	mov	sp, r7
 800385a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385e:	4770      	bx	lr

08003860 <HAL_TIM_PWM_PulseFinishedCallback>:
=======
<<<<<<< HEAD
 8003844:	bf00      	nop
 8003846:	370c      	adds	r7, #12
 8003848:	46bd      	mov	sp, r7
 800384a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384e:	4770      	bx	lr

08003850 <HAL_TIM_PWM_PulseFinishedCallback>:
=======
 8003800:	bf00      	nop
 8003802:	370c      	adds	r7, #12
 8003804:	46bd      	mov	sp, r7
 8003806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380a:	4770      	bx	lr

0800380c <HAL_TIM_PWM_PulseFinishedCallback>:
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8003860:	b480      	push	{r7}
 8003862:	b083      	sub	sp, #12
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
=======
<<<<<<< HEAD
 8003850:	b480      	push	{r7}
 8003852:	b083      	sub	sp, #12
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
=======
 800380c:	b480      	push	{r7}
 800380e:	b083      	sub	sp, #12
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8003868:	bf00      	nop
 800386a:	370c      	adds	r7, #12
 800386c:	46bd      	mov	sp, r7
 800386e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003872:	4770      	bx	lr

08003874 <HAL_TIM_TriggerCallback>:
=======
<<<<<<< HEAD
 8003858:	bf00      	nop
 800385a:	370c      	adds	r7, #12
 800385c:	46bd      	mov	sp, r7
 800385e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003862:	4770      	bx	lr

08003864 <HAL_TIM_TriggerCallback>:
=======
 8003814:	bf00      	nop
 8003816:	370c      	adds	r7, #12
 8003818:	46bd      	mov	sp, r7
 800381a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381e:	4770      	bx	lr

08003820 <HAL_TIM_TriggerCallback>:
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8003874:	b480      	push	{r7}
 8003876:	b083      	sub	sp, #12
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
=======
<<<<<<< HEAD
 8003864:	b480      	push	{r7}
 8003866:	b083      	sub	sp, #12
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
=======
 8003820:	b480      	push	{r7}
 8003822:	b083      	sub	sp, #12
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 800387c:	bf00      	nop
 800387e:	370c      	adds	r7, #12
 8003880:	46bd      	mov	sp, r7
 8003882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003886:	4770      	bx	lr

08003888 <TIM_Base_SetConfig>:
=======
<<<<<<< HEAD
 800386c:	bf00      	nop
 800386e:	370c      	adds	r7, #12
 8003870:	46bd      	mov	sp, r7
 8003872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003876:	4770      	bx	lr

08003878 <TIM_Base_SetConfig>:
=======
 8003828:	bf00      	nop
 800382a:	370c      	adds	r7, #12
 800382c:	46bd      	mov	sp, r7
 800382e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003832:	4770      	bx	lr

08003834 <TIM_Base_SetConfig>:
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
<<<<<<< HEAD
 8003888:	b480      	push	{r7}
 800388a:	b085      	sub	sp, #20
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
 8003890:	6039      	str	r1, [r7, #0]
=======
<<<<<<< HEAD
 8003878:	b480      	push	{r7}
 800387a:	b085      	sub	sp, #20
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
 8003880:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	4a40      	ldr	r2, [pc, #256]	; (800398c <TIM_Base_SetConfig+0x114>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d013      	beq.n	80038b8 <TIM_Base_SetConfig+0x40>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003896:	d00f      	beq.n	80038b8 <TIM_Base_SetConfig+0x40>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	4a3d      	ldr	r2, [pc, #244]	; (8003990 <TIM_Base_SetConfig+0x118>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d00b      	beq.n	80038b8 <TIM_Base_SetConfig+0x40>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	4a3c      	ldr	r2, [pc, #240]	; (8003994 <TIM_Base_SetConfig+0x11c>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d007      	beq.n	80038b8 <TIM_Base_SetConfig+0x40>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	4a3b      	ldr	r2, [pc, #236]	; (8003998 <TIM_Base_SetConfig+0x120>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d003      	beq.n	80038b8 <TIM_Base_SetConfig+0x40>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	4a3a      	ldr	r2, [pc, #232]	; (800399c <TIM_Base_SetConfig+0x124>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d108      	bne.n	80038ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	68fa      	ldr	r2, [r7, #12]
 80038c6:	4313      	orrs	r3, r2
 80038c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	4a2f      	ldr	r2, [pc, #188]	; (800398c <TIM_Base_SetConfig+0x114>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d02b      	beq.n	800392a <TIM_Base_SetConfig+0xb2>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038d8:	d027      	beq.n	800392a <TIM_Base_SetConfig+0xb2>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	4a2c      	ldr	r2, [pc, #176]	; (8003990 <TIM_Base_SetConfig+0x118>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d023      	beq.n	800392a <TIM_Base_SetConfig+0xb2>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	4a2b      	ldr	r2, [pc, #172]	; (8003994 <TIM_Base_SetConfig+0x11c>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d01f      	beq.n	800392a <TIM_Base_SetConfig+0xb2>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	4a2a      	ldr	r2, [pc, #168]	; (8003998 <TIM_Base_SetConfig+0x120>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d01b      	beq.n	800392a <TIM_Base_SetConfig+0xb2>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	4a29      	ldr	r2, [pc, #164]	; (800399c <TIM_Base_SetConfig+0x124>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d017      	beq.n	800392a <TIM_Base_SetConfig+0xb2>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	4a28      	ldr	r2, [pc, #160]	; (80039a0 <TIM_Base_SetConfig+0x128>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d013      	beq.n	800392a <TIM_Base_SetConfig+0xb2>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	4a27      	ldr	r2, [pc, #156]	; (80039a4 <TIM_Base_SetConfig+0x12c>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d00f      	beq.n	800392a <TIM_Base_SetConfig+0xb2>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	4a26      	ldr	r2, [pc, #152]	; (80039a8 <TIM_Base_SetConfig+0x130>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d00b      	beq.n	800392a <TIM_Base_SetConfig+0xb2>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	4a25      	ldr	r2, [pc, #148]	; (80039ac <TIM_Base_SetConfig+0x134>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d007      	beq.n	800392a <TIM_Base_SetConfig+0xb2>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	4a24      	ldr	r2, [pc, #144]	; (80039b0 <TIM_Base_SetConfig+0x138>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d003      	beq.n	800392a <TIM_Base_SetConfig+0xb2>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	4a23      	ldr	r2, [pc, #140]	; (80039b4 <TIM_Base_SetConfig+0x13c>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d108      	bne.n	800393c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003930:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	68db      	ldr	r3, [r3, #12]
 8003936:	68fa      	ldr	r2, [r7, #12]
 8003938:	4313      	orrs	r3, r2
 800393a:	60fb      	str	r3, [r7, #12]
=======
 8003834:	b480      	push	{r7}
 8003836:	b085      	sub	sp, #20
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
 800383c:	6039      	str	r1, [r7, #0]
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	4a40      	ldr	r2, [pc, #256]	; (800399c <TIM_Base_SetConfig+0x114>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d013      	beq.n	80038c8 <TIM_Base_SetConfig+0x40>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038a6:	d00f      	beq.n	80038c8 <TIM_Base_SetConfig+0x40>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	4a3d      	ldr	r2, [pc, #244]	; (80039a0 <TIM_Base_SetConfig+0x118>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d00b      	beq.n	80038c8 <TIM_Base_SetConfig+0x40>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	4a3c      	ldr	r2, [pc, #240]	; (80039a4 <TIM_Base_SetConfig+0x11c>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d007      	beq.n	80038c8 <TIM_Base_SetConfig+0x40>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	4a3b      	ldr	r2, [pc, #236]	; (80039a8 <TIM_Base_SetConfig+0x120>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d003      	beq.n	80038c8 <TIM_Base_SetConfig+0x40>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	4a3a      	ldr	r2, [pc, #232]	; (80039ac <TIM_Base_SetConfig+0x124>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d108      	bne.n	80038da <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	68fa      	ldr	r2, [r7, #12]
 80038d6:	4313      	orrs	r3, r2
 80038d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	4a2f      	ldr	r2, [pc, #188]	; (800399c <TIM_Base_SetConfig+0x114>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d02b      	beq.n	800393a <TIM_Base_SetConfig+0xb2>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038e8:	d027      	beq.n	800393a <TIM_Base_SetConfig+0xb2>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	4a2c      	ldr	r2, [pc, #176]	; (80039a0 <TIM_Base_SetConfig+0x118>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d023      	beq.n	800393a <TIM_Base_SetConfig+0xb2>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	4a2b      	ldr	r2, [pc, #172]	; (80039a4 <TIM_Base_SetConfig+0x11c>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d01f      	beq.n	800393a <TIM_Base_SetConfig+0xb2>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	4a2a      	ldr	r2, [pc, #168]	; (80039a8 <TIM_Base_SetConfig+0x120>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d01b      	beq.n	800393a <TIM_Base_SetConfig+0xb2>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	4a29      	ldr	r2, [pc, #164]	; (80039ac <TIM_Base_SetConfig+0x124>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d017      	beq.n	800393a <TIM_Base_SetConfig+0xb2>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	4a28      	ldr	r2, [pc, #160]	; (80039b0 <TIM_Base_SetConfig+0x128>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d013      	beq.n	800393a <TIM_Base_SetConfig+0xb2>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	4a27      	ldr	r2, [pc, #156]	; (80039b4 <TIM_Base_SetConfig+0x12c>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d00f      	beq.n	800393a <TIM_Base_SetConfig+0xb2>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	4a26      	ldr	r2, [pc, #152]	; (80039b8 <TIM_Base_SetConfig+0x130>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d00b      	beq.n	800393a <TIM_Base_SetConfig+0xb2>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	4a25      	ldr	r2, [pc, #148]	; (80039bc <TIM_Base_SetConfig+0x134>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d007      	beq.n	800393a <TIM_Base_SetConfig+0xb2>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	4a24      	ldr	r2, [pc, #144]	; (80039c0 <TIM_Base_SetConfig+0x138>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d003      	beq.n	800393a <TIM_Base_SetConfig+0xb2>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	4a23      	ldr	r2, [pc, #140]	; (80039c4 <TIM_Base_SetConfig+0x13c>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d108      	bne.n	800394c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003940:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
<<<<<<< HEAD
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	68db      	ldr	r3, [r3, #12]
 8003946:	68fa      	ldr	r2, [r7, #12]
 8003948:	4313      	orrs	r3, r2
 800394a:	60fb      	str	r3, [r7, #12]
=======
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	68db      	ldr	r3, [r3, #12]
 80038f2:	68fa      	ldr	r2, [r7, #12]
 80038f4:	4313      	orrs	r3, r2
 80038f6:	60fb      	str	r3, [r7, #12]
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
<<<<<<< HEAD
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	695b      	ldr	r3, [r3, #20]
 8003956:	4313      	orrs	r3, r2
 8003958:	60fb      	str	r3, [r7, #12]
=======
<<<<<<< HEAD
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	695b      	ldr	r3, [r3, #20]
 8003946:	4313      	orrs	r3, r2
 8003948:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	68fa      	ldr	r2, [r7, #12]
 800394e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	689a      	ldr	r2, [r3, #8]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	681a      	ldr	r2, [r3, #0]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	4a0a      	ldr	r2, [pc, #40]	; (800398c <TIM_Base_SetConfig+0x114>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d003      	beq.n	8003970 <TIM_Base_SetConfig+0xf8>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	4a0c      	ldr	r2, [pc, #48]	; (800399c <TIM_Base_SetConfig+0x124>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d103      	bne.n	8003978 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	691a      	ldr	r2, [r3, #16]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	631a      	str	r2, [r3, #48]	; 0x30
=======
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	695b      	ldr	r3, [r3, #20]
 8003902:	4313      	orrs	r3, r2
 8003904:	60fb      	str	r3, [r7, #12]
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637

  TIMx->CR1 = tmpcr1;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	68fa      	ldr	r2, [r7, #12]
 800395e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	689a      	ldr	r2, [r3, #8]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	681a      	ldr	r2, [r3, #0]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	4a0a      	ldr	r2, [pc, #40]	; (800399c <TIM_Base_SetConfig+0x114>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d003      	beq.n	8003980 <TIM_Base_SetConfig+0xf8>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	4a0c      	ldr	r2, [pc, #48]	; (80039ac <TIM_Base_SetConfig+0x124>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d103      	bne.n	8003988 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
<<<<<<< HEAD
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	691a      	ldr	r2, [r3, #16]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	631a      	str	r2, [r3, #48]	; 0x30
=======
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	691a      	ldr	r2, [r3, #16]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	631a      	str	r2, [r3, #48]	; 0x30
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
<<<<<<< HEAD
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2201      	movs	r2, #1
 800398c:	615a      	str	r2, [r3, #20]
=======
<<<<<<< HEAD
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2201      	movs	r2, #1
 800397c:	615a      	str	r2, [r3, #20]
}
 800397e:	bf00      	nop
 8003980:	3714      	adds	r7, #20
 8003982:	46bd      	mov	sp, r7
 8003984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003988:	4770      	bx	lr
 800398a:	bf00      	nop
 800398c:	40010000 	.word	0x40010000
 8003990:	40000400 	.word	0x40000400
 8003994:	40000800 	.word	0x40000800
 8003998:	40000c00 	.word	0x40000c00
 800399c:	40010400 	.word	0x40010400
 80039a0:	40014000 	.word	0x40014000
 80039a4:	40014400 	.word	0x40014400
 80039a8:	40014800 	.word	0x40014800
 80039ac:	40001800 	.word	0x40001800
 80039b0:	40001c00 	.word	0x40001c00
 80039b4:	40002000 	.word	0x40002000

080039b8 <TIM_OC1_SetConfig>:
=======
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2201      	movs	r2, #1
 8003938:	615a      	str	r2, [r3, #20]
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
}
 800398e:	bf00      	nop
 8003990:	3714      	adds	r7, #20
 8003992:	46bd      	mov	sp, r7
 8003994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003998:	4770      	bx	lr
 800399a:	bf00      	nop
 800399c:	40010000 	.word	0x40010000
 80039a0:	40000400 	.word	0x40000400
 80039a4:	40000800 	.word	0x40000800
 80039a8:	40000c00 	.word	0x40000c00
 80039ac:	40010400 	.word	0x40010400
 80039b0:	40014000 	.word	0x40014000
 80039b4:	40014400 	.word	0x40014400
 80039b8:	40014800 	.word	0x40014800
 80039bc:	40001800 	.word	0x40001800
 80039c0:	40001c00 	.word	0x40001c00
 80039c4:	40002000 	.word	0x40002000

<<<<<<< HEAD
080039c8 <TIM_OC1_SetConfig>:
=======
08003974 <TIM_OC1_SetConfig>:
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
<<<<<<< HEAD
 80039c8:	b480      	push	{r7}
 80039ca:	b087      	sub	sp, #28
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
 80039d0:	6039      	str	r1, [r7, #0]
=======
<<<<<<< HEAD
 80039b8:	b480      	push	{r7}
 80039ba:	b087      	sub	sp, #28
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
 80039c0:	6039      	str	r1, [r7, #0]
=======
 8003974:	b480      	push	{r7}
 8003976:	b087      	sub	sp, #28
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
 800397c:	6039      	str	r1, [r7, #0]
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
<<<<<<< HEAD
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6a1b      	ldr	r3, [r3, #32]
 80039d6:	f023 0201 	bic.w	r2, r3, #1
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	621a      	str	r2, [r3, #32]
=======
<<<<<<< HEAD
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6a1b      	ldr	r3, [r3, #32]
 80039c6:	f023 0201 	bic.w	r2, r3, #1
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6a1b      	ldr	r3, [r3, #32]
 80039d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	699b      	ldr	r3, [r3, #24]
 80039de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80039e0:	68fa      	ldr	r2, [r7, #12]
 80039e2:	4b2b      	ldr	r3, [pc, #172]	; (8003a90 <TIM_OC1_SetConfig+0xd8>)
 80039e4:	4013      	ands	r3, r2
 80039e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	f023 0303 	bic.w	r3, r3, #3
 80039ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	68fa      	ldr	r2, [r7, #12]
 80039f6:	4313      	orrs	r3, r2
 80039f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	f023 0302 	bic.w	r3, r3, #2
 8003a00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	697a      	ldr	r2, [r7, #20]
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	4a21      	ldr	r2, [pc, #132]	; (8003a94 <TIM_OC1_SetConfig+0xdc>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d003      	beq.n	8003a1c <TIM_OC1_SetConfig+0x64>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	4a20      	ldr	r2, [pc, #128]	; (8003a98 <TIM_OC1_SetConfig+0xe0>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d10c      	bne.n	8003a36 <TIM_OC1_SetConfig+0x7e>
=======
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6a1b      	ldr	r3, [r3, #32]
 8003982:	f023 0201 	bic.w	r2, r3, #1
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	621a      	str	r2, [r3, #32]
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6a1b      	ldr	r3, [r3, #32]
 80039e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	699b      	ldr	r3, [r3, #24]
 80039ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80039f0:	68fa      	ldr	r2, [r7, #12]
 80039f2:	4b2b      	ldr	r3, [pc, #172]	; (8003aa0 <TIM_OC1_SetConfig+0xd8>)
 80039f4:	4013      	ands	r3, r2
 80039f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	f023 0303 	bic.w	r3, r3, #3
 80039fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	68fa      	ldr	r2, [r7, #12]
 8003a06:	4313      	orrs	r3, r2
 8003a08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	f023 0302 	bic.w	r3, r3, #2
 8003a10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	697a      	ldr	r2, [r7, #20]
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
<<<<<<< HEAD
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	4a21      	ldr	r2, [pc, #132]	; (8003aa4 <TIM_OC1_SetConfig+0xdc>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d003      	beq.n	8003a2c <TIM_OC1_SetConfig+0x64>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	4a20      	ldr	r2, [pc, #128]	; (8003aa8 <TIM_OC1_SetConfig+0xe0>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d10c      	bne.n	8003a46 <TIM_OC1_SetConfig+0x7e>
=======
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	4a21      	ldr	r2, [pc, #132]	; (8003a50 <TIM_OC1_SetConfig+0xdc>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d003      	beq.n	80039d8 <TIM_OC1_SetConfig+0x64>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	4a20      	ldr	r2, [pc, #128]	; (8003a54 <TIM_OC1_SetConfig+0xe0>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d10c      	bne.n	80039f2 <TIM_OC1_SetConfig+0x7e>
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
<<<<<<< HEAD
 8003a2c:	697b      	ldr	r3, [r7, #20]
 8003a2e:	f023 0308 	bic.w	r3, r3, #8
 8003a32:	617b      	str	r3, [r7, #20]
=======
<<<<<<< HEAD
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	f023 0308 	bic.w	r3, r3, #8
 8003a22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	68db      	ldr	r3, [r3, #12]
 8003a28:	697a      	ldr	r2, [r7, #20]
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	f023 0304 	bic.w	r3, r3, #4
 8003a34:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	4a16      	ldr	r2, [pc, #88]	; (8003a94 <TIM_OC1_SetConfig+0xdc>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d003      	beq.n	8003a46 <TIM_OC1_SetConfig+0x8e>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	4a15      	ldr	r2, [pc, #84]	; (8003a98 <TIM_OC1_SetConfig+0xe0>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d111      	bne.n	8003a6a <TIM_OC1_SetConfig+0xb2>
=======
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	f023 0308 	bic.w	r3, r3, #8
 80039de:	617b      	str	r3, [r7, #20]
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	68db      	ldr	r3, [r3, #12]
 8003a38:	697a      	ldr	r2, [r7, #20]
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	f023 0304 	bic.w	r3, r3, #4
 8003a44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
<<<<<<< HEAD
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	4a16      	ldr	r2, [pc, #88]	; (8003aa4 <TIM_OC1_SetConfig+0xdc>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d003      	beq.n	8003a56 <TIM_OC1_SetConfig+0x8e>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	4a15      	ldr	r2, [pc, #84]	; (8003aa8 <TIM_OC1_SetConfig+0xe0>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d111      	bne.n	8003a7a <TIM_OC1_SetConfig+0xb2>
=======
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	4a16      	ldr	r2, [pc, #88]	; (8003a50 <TIM_OC1_SetConfig+0xdc>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d003      	beq.n	8003a02 <TIM_OC1_SetConfig+0x8e>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	4a15      	ldr	r2, [pc, #84]	; (8003a54 <TIM_OC1_SetConfig+0xe0>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d111      	bne.n	8003a26 <TIM_OC1_SetConfig+0xb2>
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
<<<<<<< HEAD
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a5c:	613b      	str	r3, [r7, #16]
=======
<<<<<<< HEAD
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003a54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	695b      	ldr	r3, [r3, #20]
 8003a5a:	693a      	ldr	r2, [r7, #16]
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	699b      	ldr	r3, [r3, #24]
 8003a64:	693a      	ldr	r2, [r7, #16]
 8003a66:	4313      	orrs	r3, r2
 8003a68:	613b      	str	r3, [r7, #16]
=======
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a08:	613b      	str	r3, [r7, #16]
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003a64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	695b      	ldr	r3, [r3, #20]
 8003a6a:	693a      	ldr	r2, [r7, #16]
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
<<<<<<< HEAD
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	699b      	ldr	r3, [r3, #24]
 8003a74:	693a      	ldr	r2, [r7, #16]
 8003a76:	4313      	orrs	r3, r2
 8003a78:	613b      	str	r3, [r7, #16]
=======
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	699b      	ldr	r3, [r3, #24]
 8003a20:	693a      	ldr	r2, [r7, #16]
 8003a22:	4313      	orrs	r3, r2
 8003a24:	613b      	str	r3, [r7, #16]
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
<<<<<<< HEAD
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	693a      	ldr	r2, [r7, #16]
 8003a7e:	605a      	str	r2, [r3, #4]
=======
<<<<<<< HEAD
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	693a      	ldr	r2, [r7, #16]
 8003a6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	68fa      	ldr	r2, [r7, #12]
 8003a74:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	685a      	ldr	r2, [r3, #4]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	697a      	ldr	r2, [r7, #20]
 8003a82:	621a      	str	r2, [r3, #32]
}
 8003a84:	bf00      	nop
 8003a86:	371c      	adds	r7, #28
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8e:	4770      	bx	lr
 8003a90:	fffeff8f 	.word	0xfffeff8f
 8003a94:	40010000 	.word	0x40010000
 8003a98:	40010400 	.word	0x40010400

08003a9c <TIM_OC2_SetConfig>:
=======
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	693a      	ldr	r2, [r7, #16]
 8003a2a:	605a      	str	r2, [r3, #4]
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	68fa      	ldr	r2, [r7, #12]
 8003a84:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	685a      	ldr	r2, [r3, #4]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	697a      	ldr	r2, [r7, #20]
 8003a92:	621a      	str	r2, [r3, #32]
}
 8003a94:	bf00      	nop
 8003a96:	371c      	adds	r7, #28
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9e:	4770      	bx	lr
 8003aa0:	fffeff8f 	.word	0xfffeff8f
 8003aa4:	40010000 	.word	0x40010000
 8003aa8:	40010400 	.word	0x40010400

<<<<<<< HEAD
08003aac <TIM_OC2_SetConfig>:
=======
08003a58 <TIM_OC2_SetConfig>:
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
<<<<<<< HEAD
 8003aac:	b480      	push	{r7}
 8003aae:	b087      	sub	sp, #28
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
 8003ab4:	6039      	str	r1, [r7, #0]
=======
<<<<<<< HEAD
 8003a9c:	b480      	push	{r7}
 8003a9e:	b087      	sub	sp, #28
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
 8003aa4:	6039      	str	r1, [r7, #0]
=======
 8003a58:	b480      	push	{r7}
 8003a5a:	b087      	sub	sp, #28
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
 8003a60:	6039      	str	r1, [r7, #0]
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
<<<<<<< HEAD
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6a1b      	ldr	r3, [r3, #32]
 8003aba:	f023 0210 	bic.w	r2, r3, #16
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	621a      	str	r2, [r3, #32]
=======
<<<<<<< HEAD
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6a1b      	ldr	r3, [r3, #32]
 8003aaa:	f023 0210 	bic.w	r2, r3, #16
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6a1b      	ldr	r3, [r3, #32]
 8003ab6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	699b      	ldr	r3, [r3, #24]
 8003ac2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003ac4:	68fa      	ldr	r2, [r7, #12]
 8003ac6:	4b2e      	ldr	r3, [pc, #184]	; (8003b80 <TIM_OC2_SetConfig+0xe4>)
 8003ac8:	4013      	ands	r3, r2
 8003aca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ad2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	021b      	lsls	r3, r3, #8
 8003ada:	68fa      	ldr	r2, [r7, #12]
 8003adc:	4313      	orrs	r3, r2
 8003ade:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	f023 0320 	bic.w	r3, r3, #32
 8003ae6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	011b      	lsls	r3, r3, #4
 8003aee:	697a      	ldr	r2, [r7, #20]
 8003af0:	4313      	orrs	r3, r2
 8003af2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	4a23      	ldr	r2, [pc, #140]	; (8003b84 <TIM_OC2_SetConfig+0xe8>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d003      	beq.n	8003b04 <TIM_OC2_SetConfig+0x68>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	4a22      	ldr	r2, [pc, #136]	; (8003b88 <TIM_OC2_SetConfig+0xec>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d10d      	bne.n	8003b20 <TIM_OC2_SetConfig+0x84>
=======
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6a1b      	ldr	r3, [r3, #32]
 8003a66:	f023 0210 	bic.w	r2, r3, #16
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	621a      	str	r2, [r3, #32]
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6a1b      	ldr	r3, [r3, #32]
 8003ac6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	699b      	ldr	r3, [r3, #24]
 8003ad2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003ad4:	68fa      	ldr	r2, [r7, #12]
 8003ad6:	4b2e      	ldr	r3, [pc, #184]	; (8003b90 <TIM_OC2_SetConfig+0xe4>)
 8003ad8:	4013      	ands	r3, r2
 8003ada:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ae2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	021b      	lsls	r3, r3, #8
 8003aea:	68fa      	ldr	r2, [r7, #12]
 8003aec:	4313      	orrs	r3, r2
 8003aee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	f023 0320 	bic.w	r3, r3, #32
 8003af6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	689b      	ldr	r3, [r3, #8]
 8003afc:	011b      	lsls	r3, r3, #4
 8003afe:	697a      	ldr	r2, [r7, #20]
 8003b00:	4313      	orrs	r3, r2
 8003b02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
<<<<<<< HEAD
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	4a23      	ldr	r2, [pc, #140]	; (8003b94 <TIM_OC2_SetConfig+0xe8>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d003      	beq.n	8003b14 <TIM_OC2_SetConfig+0x68>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	4a22      	ldr	r2, [pc, #136]	; (8003b98 <TIM_OC2_SetConfig+0xec>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d10d      	bne.n	8003b30 <TIM_OC2_SetConfig+0x84>
=======
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	4a23      	ldr	r2, [pc, #140]	; (8003b40 <TIM_OC2_SetConfig+0xe8>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d003      	beq.n	8003ac0 <TIM_OC2_SetConfig+0x68>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	4a22      	ldr	r2, [pc, #136]	; (8003b44 <TIM_OC2_SetConfig+0xec>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d10d      	bne.n	8003adc <TIM_OC2_SetConfig+0x84>
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
<<<<<<< HEAD
 8003b14:	697b      	ldr	r3, [r7, #20]
 8003b16:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b1a:	617b      	str	r3, [r7, #20]
=======
<<<<<<< HEAD
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	68db      	ldr	r3, [r3, #12]
 8003b10:	011b      	lsls	r3, r3, #4
 8003b12:	697a      	ldr	r2, [r7, #20]
 8003b14:	4313      	orrs	r3, r2
 8003b16:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b1e:	617b      	str	r3, [r7, #20]
=======
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ac6:	617b      	str	r3, [r7, #20]
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	68db      	ldr	r3, [r3, #12]
 8003b20:	011b      	lsls	r3, r3, #4
 8003b22:	697a      	ldr	r2, [r7, #20]
 8003b24:	4313      	orrs	r3, r2
 8003b26:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
<<<<<<< HEAD
 8003b28:	697b      	ldr	r3, [r7, #20]
 8003b2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b2e:	617b      	str	r3, [r7, #20]
=======
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ada:	617b      	str	r3, [r7, #20]
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
<<<<<<< HEAD
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	4a18      	ldr	r2, [pc, #96]	; (8003b94 <TIM_OC2_SetConfig+0xe8>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d003      	beq.n	8003b40 <TIM_OC2_SetConfig+0x94>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	4a17      	ldr	r2, [pc, #92]	; (8003b98 <TIM_OC2_SetConfig+0xec>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d113      	bne.n	8003b68 <TIM_OC2_SetConfig+0xbc>
=======
<<<<<<< HEAD
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	4a18      	ldr	r2, [pc, #96]	; (8003b84 <TIM_OC2_SetConfig+0xe8>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d003      	beq.n	8003b30 <TIM_OC2_SetConfig+0x94>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	4a17      	ldr	r2, [pc, #92]	; (8003b88 <TIM_OC2_SetConfig+0xec>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d113      	bne.n	8003b58 <TIM_OC2_SetConfig+0xbc>
=======
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	4a18      	ldr	r2, [pc, #96]	; (8003b40 <TIM_OC2_SetConfig+0xe8>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d003      	beq.n	8003aec <TIM_OC2_SetConfig+0x94>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	4a17      	ldr	r2, [pc, #92]	; (8003b44 <TIM_OC2_SetConfig+0xec>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d113      	bne.n	8003b14 <TIM_OC2_SetConfig+0xbc>
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
<<<<<<< HEAD
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003b46:	613b      	str	r3, [r7, #16]
=======
<<<<<<< HEAD
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003b36:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003b38:	693b      	ldr	r3, [r7, #16]
 8003b3a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003b3e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	695b      	ldr	r3, [r3, #20]
 8003b44:	009b      	lsls	r3, r3, #2
 8003b46:	693a      	ldr	r2, [r7, #16]
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	699b      	ldr	r3, [r3, #24]
 8003b50:	009b      	lsls	r3, r3, #2
 8003b52:	693a      	ldr	r2, [r7, #16]
 8003b54:	4313      	orrs	r3, r2
 8003b56:	613b      	str	r3, [r7, #16]
=======
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003af2:	613b      	str	r3, [r7, #16]
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003b48:	693b      	ldr	r3, [r7, #16]
 8003b4a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003b4e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	695b      	ldr	r3, [r3, #20]
 8003b54:	009b      	lsls	r3, r3, #2
 8003b56:	693a      	ldr	r2, [r7, #16]
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
<<<<<<< HEAD
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	699b      	ldr	r3, [r3, #24]
 8003b60:	009b      	lsls	r3, r3, #2
 8003b62:	693a      	ldr	r2, [r7, #16]
 8003b64:	4313      	orrs	r3, r2
 8003b66:	613b      	str	r3, [r7, #16]
=======
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	699b      	ldr	r3, [r3, #24]
 8003b0c:	009b      	lsls	r3, r3, #2
 8003b0e:	693a      	ldr	r2, [r7, #16]
 8003b10:	4313      	orrs	r3, r2
 8003b12:	613b      	str	r3, [r7, #16]
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
<<<<<<< HEAD
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	693a      	ldr	r2, [r7, #16]
 8003b6c:	605a      	str	r2, [r3, #4]
=======
<<<<<<< HEAD
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	693a      	ldr	r2, [r7, #16]
 8003b5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	68fa      	ldr	r2, [r7, #12]
 8003b62:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	685a      	ldr	r2, [r3, #4]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	697a      	ldr	r2, [r7, #20]
 8003b70:	621a      	str	r2, [r3, #32]
}
 8003b72:	bf00      	nop
 8003b74:	371c      	adds	r7, #28
 8003b76:	46bd      	mov	sp, r7
 8003b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7c:	4770      	bx	lr
 8003b7e:	bf00      	nop
 8003b80:	feff8fff 	.word	0xfeff8fff
 8003b84:	40010000 	.word	0x40010000
 8003b88:	40010400 	.word	0x40010400

08003b8c <TIM_OC3_SetConfig>:
=======
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	693a      	ldr	r2, [r7, #16]
 8003b18:	605a      	str	r2, [r3, #4]
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	68fa      	ldr	r2, [r7, #12]
 8003b72:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	685a      	ldr	r2, [r3, #4]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	697a      	ldr	r2, [r7, #20]
 8003b80:	621a      	str	r2, [r3, #32]
}
 8003b82:	bf00      	nop
 8003b84:	371c      	adds	r7, #28
 8003b86:	46bd      	mov	sp, r7
 8003b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8c:	4770      	bx	lr
 8003b8e:	bf00      	nop
 8003b90:	feff8fff 	.word	0xfeff8fff
 8003b94:	40010000 	.word	0x40010000
 8003b98:	40010400 	.word	0x40010400

<<<<<<< HEAD
08003b9c <TIM_OC3_SetConfig>:
=======
08003b48 <TIM_OC3_SetConfig>:
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
<<<<<<< HEAD
 8003b9c:	b480      	push	{r7}
 8003b9e:	b087      	sub	sp, #28
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
 8003ba4:	6039      	str	r1, [r7, #0]
=======
<<<<<<< HEAD
 8003b8c:	b480      	push	{r7}
 8003b8e:	b087      	sub	sp, #28
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
 8003b94:	6039      	str	r1, [r7, #0]
=======
 8003b48:	b480      	push	{r7}
 8003b4a:	b087      	sub	sp, #28
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
 8003b50:	6039      	str	r1, [r7, #0]
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
<<<<<<< HEAD
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6a1b      	ldr	r3, [r3, #32]
 8003baa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	621a      	str	r2, [r3, #32]
=======
<<<<<<< HEAD
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6a1b      	ldr	r3, [r3, #32]
 8003b9a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6a1b      	ldr	r3, [r3, #32]
 8003ba6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	69db      	ldr	r3, [r3, #28]
 8003bb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003bb4:	68fa      	ldr	r2, [r7, #12]
 8003bb6:	4b2d      	ldr	r3, [pc, #180]	; (8003c6c <TIM_OC3_SetConfig+0xe0>)
 8003bb8:	4013      	ands	r3, r2
 8003bba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	f023 0303 	bic.w	r3, r3, #3
 8003bc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	68fa      	ldr	r2, [r7, #12]
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003bd4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	689b      	ldr	r3, [r3, #8]
 8003bda:	021b      	lsls	r3, r3, #8
 8003bdc:	697a      	ldr	r2, [r7, #20]
 8003bde:	4313      	orrs	r3, r2
 8003be0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	4a22      	ldr	r2, [pc, #136]	; (8003c70 <TIM_OC3_SetConfig+0xe4>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d003      	beq.n	8003bf2 <TIM_OC3_SetConfig+0x66>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	4a21      	ldr	r2, [pc, #132]	; (8003c74 <TIM_OC3_SetConfig+0xe8>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d10d      	bne.n	8003c0e <TIM_OC3_SetConfig+0x82>
=======
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6a1b      	ldr	r3, [r3, #32]
 8003b56:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	621a      	str	r2, [r3, #32]
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6a1b      	ldr	r3, [r3, #32]
 8003bb6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	69db      	ldr	r3, [r3, #28]
 8003bc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003bc4:	68fa      	ldr	r2, [r7, #12]
 8003bc6:	4b2d      	ldr	r3, [pc, #180]	; (8003c7c <TIM_OC3_SetConfig+0xe0>)
 8003bc8:	4013      	ands	r3, r2
 8003bca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	f023 0303 	bic.w	r3, r3, #3
 8003bd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	68fa      	ldr	r2, [r7, #12]
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003be4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	021b      	lsls	r3, r3, #8
 8003bec:	697a      	ldr	r2, [r7, #20]
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
<<<<<<< HEAD
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	4a22      	ldr	r2, [pc, #136]	; (8003c80 <TIM_OC3_SetConfig+0xe4>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d003      	beq.n	8003c02 <TIM_OC3_SetConfig+0x66>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	4a21      	ldr	r2, [pc, #132]	; (8003c84 <TIM_OC3_SetConfig+0xe8>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d10d      	bne.n	8003c1e <TIM_OC3_SetConfig+0x82>
=======
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	4a22      	ldr	r2, [pc, #136]	; (8003c2c <TIM_OC3_SetConfig+0xe4>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d003      	beq.n	8003bae <TIM_OC3_SetConfig+0x66>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	4a21      	ldr	r2, [pc, #132]	; (8003c30 <TIM_OC3_SetConfig+0xe8>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d10d      	bne.n	8003bca <TIM_OC3_SetConfig+0x82>
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
<<<<<<< HEAD
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003c08:	617b      	str	r3, [r7, #20]
=======
<<<<<<< HEAD
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003bf8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	68db      	ldr	r3, [r3, #12]
 8003bfe:	021b      	lsls	r3, r3, #8
 8003c00:	697a      	ldr	r2, [r7, #20]
 8003c02:	4313      	orrs	r3, r2
 8003c04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003c0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	4a17      	ldr	r2, [pc, #92]	; (8003c70 <TIM_OC3_SetConfig+0xe4>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d003      	beq.n	8003c1e <TIM_OC3_SetConfig+0x92>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	4a16      	ldr	r2, [pc, #88]	; (8003c74 <TIM_OC3_SetConfig+0xe8>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d113      	bne.n	8003c46 <TIM_OC3_SetConfig+0xba>
=======
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003bb4:	617b      	str	r3, [r7, #20]
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	68db      	ldr	r3, [r3, #12]
 8003c0e:	021b      	lsls	r3, r3, #8
 8003c10:	697a      	ldr	r2, [r7, #20]
 8003c12:	4313      	orrs	r3, r2
 8003c14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003c1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
<<<<<<< HEAD
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	4a17      	ldr	r2, [pc, #92]	; (8003c80 <TIM_OC3_SetConfig+0xe4>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d003      	beq.n	8003c2e <TIM_OC3_SetConfig+0x92>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	4a16      	ldr	r2, [pc, #88]	; (8003c84 <TIM_OC3_SetConfig+0xe8>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d113      	bne.n	8003c56 <TIM_OC3_SetConfig+0xba>
=======
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	4a17      	ldr	r2, [pc, #92]	; (8003c2c <TIM_OC3_SetConfig+0xe4>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d003      	beq.n	8003bda <TIM_OC3_SetConfig+0x92>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	4a16      	ldr	r2, [pc, #88]	; (8003c30 <TIM_OC3_SetConfig+0xe8>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d113      	bne.n	8003c02 <TIM_OC3_SetConfig+0xba>
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
<<<<<<< HEAD
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003c34:	613b      	str	r3, [r7, #16]
=======
<<<<<<< HEAD
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003c24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003c2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	695b      	ldr	r3, [r3, #20]
 8003c32:	011b      	lsls	r3, r3, #4
 8003c34:	693a      	ldr	r2, [r7, #16]
 8003c36:	4313      	orrs	r3, r2
 8003c38:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	699b      	ldr	r3, [r3, #24]
 8003c3e:	011b      	lsls	r3, r3, #4
 8003c40:	693a      	ldr	r2, [r7, #16]
 8003c42:	4313      	orrs	r3, r2
 8003c44:	613b      	str	r3, [r7, #16]
=======
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003be0:	613b      	str	r3, [r7, #16]
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003c3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	695b      	ldr	r3, [r3, #20]
 8003c42:	011b      	lsls	r3, r3, #4
 8003c44:	693a      	ldr	r2, [r7, #16]
 8003c46:	4313      	orrs	r3, r2
 8003c48:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
<<<<<<< HEAD
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	699b      	ldr	r3, [r3, #24]
 8003c4e:	011b      	lsls	r3, r3, #4
 8003c50:	693a      	ldr	r2, [r7, #16]
 8003c52:	4313      	orrs	r3, r2
 8003c54:	613b      	str	r3, [r7, #16]
=======
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	699b      	ldr	r3, [r3, #24]
 8003bfa:	011b      	lsls	r3, r3, #4
 8003bfc:	693a      	ldr	r2, [r7, #16]
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	613b      	str	r3, [r7, #16]
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
<<<<<<< HEAD
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	693a      	ldr	r2, [r7, #16]
 8003c5a:	605a      	str	r2, [r3, #4]
=======
<<<<<<< HEAD
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	693a      	ldr	r2, [r7, #16]
 8003c4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	68fa      	ldr	r2, [r7, #12]
 8003c50:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	685a      	ldr	r2, [r3, #4]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	697a      	ldr	r2, [r7, #20]
 8003c5e:	621a      	str	r2, [r3, #32]
}
 8003c60:	bf00      	nop
 8003c62:	371c      	adds	r7, #28
 8003c64:	46bd      	mov	sp, r7
 8003c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6a:	4770      	bx	lr
 8003c6c:	fffeff8f 	.word	0xfffeff8f
 8003c70:	40010000 	.word	0x40010000
 8003c74:	40010400 	.word	0x40010400

08003c78 <TIM_OC4_SetConfig>:
=======
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	693a      	ldr	r2, [r7, #16]
 8003c06:	605a      	str	r2, [r3, #4]
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	68fa      	ldr	r2, [r7, #12]
 8003c60:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	685a      	ldr	r2, [r3, #4]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	697a      	ldr	r2, [r7, #20]
 8003c6e:	621a      	str	r2, [r3, #32]
}
 8003c70:	bf00      	nop
 8003c72:	371c      	adds	r7, #28
 8003c74:	46bd      	mov	sp, r7
 8003c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7a:	4770      	bx	lr
 8003c7c:	fffeff8f 	.word	0xfffeff8f
 8003c80:	40010000 	.word	0x40010000
 8003c84:	40010400 	.word	0x40010400

<<<<<<< HEAD
08003c88 <TIM_OC4_SetConfig>:
=======
08003c34 <TIM_OC4_SetConfig>:
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
<<<<<<< HEAD
 8003c88:	b480      	push	{r7}
 8003c8a:	b087      	sub	sp, #28
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
 8003c90:	6039      	str	r1, [r7, #0]
=======
<<<<<<< HEAD
 8003c78:	b480      	push	{r7}
 8003c7a:	b087      	sub	sp, #28
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
 8003c80:	6039      	str	r1, [r7, #0]
=======
 8003c34:	b480      	push	{r7}
 8003c36:	b087      	sub	sp, #28
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
 8003c3c:	6039      	str	r1, [r7, #0]
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
<<<<<<< HEAD
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6a1b      	ldr	r3, [r3, #32]
 8003c96:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	621a      	str	r2, [r3, #32]
=======
<<<<<<< HEAD
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6a1b      	ldr	r3, [r3, #32]
 8003c86:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6a1b      	ldr	r3, [r3, #32]
 8003c92:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	69db      	ldr	r3, [r3, #28]
 8003c9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003ca0:	68fa      	ldr	r2, [r7, #12]
 8003ca2:	4b1e      	ldr	r3, [pc, #120]	; (8003d1c <TIM_OC4_SetConfig+0xa4>)
 8003ca4:	4013      	ands	r3, r2
 8003ca6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	021b      	lsls	r3, r3, #8
 8003cb6:	68fa      	ldr	r2, [r7, #12]
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003cbc:	693b      	ldr	r3, [r7, #16]
 8003cbe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003cc2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	689b      	ldr	r3, [r3, #8]
 8003cc8:	031b      	lsls	r3, r3, #12
 8003cca:	693a      	ldr	r2, [r7, #16]
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	4a13      	ldr	r2, [pc, #76]	; (8003d20 <TIM_OC4_SetConfig+0xa8>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d003      	beq.n	8003ce0 <TIM_OC4_SetConfig+0x68>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	4a12      	ldr	r2, [pc, #72]	; (8003d24 <TIM_OC4_SetConfig+0xac>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d109      	bne.n	8003cf4 <TIM_OC4_SetConfig+0x7c>
=======
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6a1b      	ldr	r3, [r3, #32]
 8003c42:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	621a      	str	r2, [r3, #32]
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6a1b      	ldr	r3, [r3, #32]
 8003ca2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	69db      	ldr	r3, [r3, #28]
 8003cae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003cb0:	68fa      	ldr	r2, [r7, #12]
 8003cb2:	4b1e      	ldr	r3, [pc, #120]	; (8003d2c <TIM_OC4_SetConfig+0xa4>)
 8003cb4:	4013      	ands	r3, r2
 8003cb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cbe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	021b      	lsls	r3, r3, #8
 8003cc6:	68fa      	ldr	r2, [r7, #12]
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003ccc:	693b      	ldr	r3, [r7, #16]
 8003cce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003cd2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	689b      	ldr	r3, [r3, #8]
 8003cd8:	031b      	lsls	r3, r3, #12
 8003cda:	693a      	ldr	r2, [r7, #16]
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
<<<<<<< HEAD
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	4a13      	ldr	r2, [pc, #76]	; (8003d30 <TIM_OC4_SetConfig+0xa8>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d003      	beq.n	8003cf0 <TIM_OC4_SetConfig+0x68>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	4a12      	ldr	r2, [pc, #72]	; (8003d34 <TIM_OC4_SetConfig+0xac>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d109      	bne.n	8003d04 <TIM_OC4_SetConfig+0x7c>
=======
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	4a13      	ldr	r2, [pc, #76]	; (8003cdc <TIM_OC4_SetConfig+0xa8>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d003      	beq.n	8003c9c <TIM_OC4_SetConfig+0x68>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	4a12      	ldr	r2, [pc, #72]	; (8003ce0 <TIM_OC4_SetConfig+0xac>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d109      	bne.n	8003cb0 <TIM_OC4_SetConfig+0x7c>
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
<<<<<<< HEAD
 8003cf0:	697b      	ldr	r3, [r7, #20]
 8003cf2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003cf6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	695b      	ldr	r3, [r3, #20]
 8003cfc:	019b      	lsls	r3, r3, #6
 8003cfe:	697a      	ldr	r2, [r7, #20]
 8003d00:	4313      	orrs	r3, r2
 8003d02:	617b      	str	r3, [r7, #20]
=======
<<<<<<< HEAD
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003ce6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	695b      	ldr	r3, [r3, #20]
 8003cec:	019b      	lsls	r3, r3, #6
 8003cee:	697a      	ldr	r2, [r7, #20]
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	617b      	str	r3, [r7, #20]
=======
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003ca2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	695b      	ldr	r3, [r3, #20]
 8003ca8:	019b      	lsls	r3, r3, #6
 8003caa:	697a      	ldr	r2, [r7, #20]
 8003cac:	4313      	orrs	r3, r2
 8003cae:	617b      	str	r3, [r7, #20]
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
<<<<<<< HEAD
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	697a      	ldr	r2, [r7, #20]
 8003d08:	605a      	str	r2, [r3, #4]
=======
<<<<<<< HEAD
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	697a      	ldr	r2, [r7, #20]
 8003cf8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	68fa      	ldr	r2, [r7, #12]
 8003cfe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	685a      	ldr	r2, [r3, #4]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	693a      	ldr	r2, [r7, #16]
 8003d0c:	621a      	str	r2, [r3, #32]
}
 8003d0e:	bf00      	nop
 8003d10:	371c      	adds	r7, #28
 8003d12:	46bd      	mov	sp, r7
 8003d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d18:	4770      	bx	lr
 8003d1a:	bf00      	nop
 8003d1c:	feff8fff 	.word	0xfeff8fff
 8003d20:	40010000 	.word	0x40010000
 8003d24:	40010400 	.word	0x40010400

08003d28 <TIM_OC5_SetConfig>:
=======
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	697a      	ldr	r2, [r7, #20]
 8003cb4:	605a      	str	r2, [r3, #4]
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	68fa      	ldr	r2, [r7, #12]
 8003d0e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	685a      	ldr	r2, [r3, #4]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	693a      	ldr	r2, [r7, #16]
 8003d1c:	621a      	str	r2, [r3, #32]
}
 8003d1e:	bf00      	nop
 8003d20:	371c      	adds	r7, #28
 8003d22:	46bd      	mov	sp, r7
 8003d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d28:	4770      	bx	lr
 8003d2a:	bf00      	nop
 8003d2c:	feff8fff 	.word	0xfeff8fff
 8003d30:	40010000 	.word	0x40010000
 8003d34:	40010400 	.word	0x40010400

<<<<<<< HEAD
08003d38 <TIM_OC5_SetConfig>:
=======
08003ce4 <TIM_OC5_SetConfig>:
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
<<<<<<< HEAD
 8003d38:	b480      	push	{r7}
 8003d3a:	b087      	sub	sp, #28
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
 8003d40:	6039      	str	r1, [r7, #0]
=======
<<<<<<< HEAD
 8003d28:	b480      	push	{r7}
 8003d2a:	b087      	sub	sp, #28
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
 8003d30:	6039      	str	r1, [r7, #0]
=======
 8003ce4:	b480      	push	{r7}
 8003ce6:	b087      	sub	sp, #28
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
 8003cec:	6039      	str	r1, [r7, #0]
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
<<<<<<< HEAD
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6a1b      	ldr	r3, [r3, #32]
 8003d46:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	621a      	str	r2, [r3, #32]
=======
<<<<<<< HEAD
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6a1b      	ldr	r3, [r3, #32]
 8003d36:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6a1b      	ldr	r3, [r3, #32]
 8003d42:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003d50:	68fa      	ldr	r2, [r7, #12]
 8003d52:	4b1b      	ldr	r3, [pc, #108]	; (8003dc0 <TIM_OC5_SetConfig+0x98>)
 8003d54:	4013      	ands	r3, r2
 8003d56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	68fa      	ldr	r2, [r7, #12]
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003d62:	693b      	ldr	r3, [r7, #16]
 8003d64:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003d68:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	041b      	lsls	r3, r3, #16
 8003d70:	693a      	ldr	r2, [r7, #16]
 8003d72:	4313      	orrs	r3, r2
 8003d74:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	4a12      	ldr	r2, [pc, #72]	; (8003dc4 <TIM_OC5_SetConfig+0x9c>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d003      	beq.n	8003d86 <TIM_OC5_SetConfig+0x5e>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	4a11      	ldr	r2, [pc, #68]	; (8003dc8 <TIM_OC5_SetConfig+0xa0>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d109      	bne.n	8003d9a <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d8c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	695b      	ldr	r3, [r3, #20]
 8003d92:	021b      	lsls	r3, r3, #8
 8003d94:	697a      	ldr	r2, [r7, #20]
 8003d96:	4313      	orrs	r3, r2
 8003d98:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	697a      	ldr	r2, [r7, #20]
 8003d9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	68fa      	ldr	r2, [r7, #12]
 8003da4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	685a      	ldr	r2, [r3, #4]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	693a      	ldr	r2, [r7, #16]
 8003db2:	621a      	str	r2, [r3, #32]
}
 8003db4:	bf00      	nop
 8003db6:	371c      	adds	r7, #28
 8003db8:	46bd      	mov	sp, r7
 8003dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbe:	4770      	bx	lr
 8003dc0:	fffeff8f 	.word	0xfffeff8f
 8003dc4:	40010000 	.word	0x40010000
 8003dc8:	40010400 	.word	0x40010400

08003dcc <TIM_OC6_SetConfig>:
=======
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6a1b      	ldr	r3, [r3, #32]
 8003cf2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	621a      	str	r2, [r3, #32]
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6a1b      	ldr	r3, [r3, #32]
 8003d52:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003d60:	68fa      	ldr	r2, [r7, #12]
 8003d62:	4b1b      	ldr	r3, [pc, #108]	; (8003dd0 <TIM_OC5_SetConfig+0x98>)
 8003d64:	4013      	ands	r3, r2
 8003d66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	68fa      	ldr	r2, [r7, #12]
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003d72:	693b      	ldr	r3, [r7, #16]
 8003d74:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003d78:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	689b      	ldr	r3, [r3, #8]
 8003d7e:	041b      	lsls	r3, r3, #16
 8003d80:	693a      	ldr	r2, [r7, #16]
 8003d82:	4313      	orrs	r3, r2
 8003d84:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	4a12      	ldr	r2, [pc, #72]	; (8003dd4 <TIM_OC5_SetConfig+0x9c>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d003      	beq.n	8003d96 <TIM_OC5_SetConfig+0x5e>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	4a11      	ldr	r2, [pc, #68]	; (8003dd8 <TIM_OC5_SetConfig+0xa0>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d109      	bne.n	8003daa <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d9c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	695b      	ldr	r3, [r3, #20]
 8003da2:	021b      	lsls	r3, r3, #8
 8003da4:	697a      	ldr	r2, [r7, #20]
 8003da6:	4313      	orrs	r3, r2
 8003da8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	697a      	ldr	r2, [r7, #20]
 8003dae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	68fa      	ldr	r2, [r7, #12]
 8003db4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	685a      	ldr	r2, [r3, #4]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	693a      	ldr	r2, [r7, #16]
 8003dc2:	621a      	str	r2, [r3, #32]
}
 8003dc4:	bf00      	nop
 8003dc6:	371c      	adds	r7, #28
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dce:	4770      	bx	lr
 8003dd0:	fffeff8f 	.word	0xfffeff8f
 8003dd4:	40010000 	.word	0x40010000
 8003dd8:	40010400 	.word	0x40010400

<<<<<<< HEAD
08003ddc <TIM_OC6_SetConfig>:
=======
08003d88 <TIM_OC6_SetConfig>:
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
<<<<<<< HEAD
 8003ddc:	b480      	push	{r7}
 8003dde:	b087      	sub	sp, #28
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
 8003de4:	6039      	str	r1, [r7, #0]
=======
<<<<<<< HEAD
 8003dcc:	b480      	push	{r7}
 8003dce:	b087      	sub	sp, #28
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
 8003dd4:	6039      	str	r1, [r7, #0]
=======
 8003d88:	b480      	push	{r7}
 8003d8a:	b087      	sub	sp, #28
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
 8003d90:	6039      	str	r1, [r7, #0]
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
<<<<<<< HEAD
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6a1b      	ldr	r3, [r3, #32]
 8003dea:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	621a      	str	r2, [r3, #32]
=======
<<<<<<< HEAD
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6a1b      	ldr	r3, [r3, #32]
 8003dda:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6a1b      	ldr	r3, [r3, #32]
 8003de6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003df2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003df4:	68fa      	ldr	r2, [r7, #12]
 8003df6:	4b1c      	ldr	r3, [pc, #112]	; (8003e68 <TIM_OC6_SetConfig+0x9c>)
 8003df8:	4013      	ands	r3, r2
 8003dfa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	021b      	lsls	r3, r3, #8
 8003e02:	68fa      	ldr	r2, [r7, #12]
 8003e04:	4313      	orrs	r3, r2
 8003e06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003e0e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	689b      	ldr	r3, [r3, #8]
 8003e14:	051b      	lsls	r3, r3, #20
 8003e16:	693a      	ldr	r2, [r7, #16]
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	4a13      	ldr	r2, [pc, #76]	; (8003e6c <TIM_OC6_SetConfig+0xa0>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d003      	beq.n	8003e2c <TIM_OC6_SetConfig+0x60>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	4a12      	ldr	r2, [pc, #72]	; (8003e70 <TIM_OC6_SetConfig+0xa4>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d109      	bne.n	8003e40 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e32:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	695b      	ldr	r3, [r3, #20]
 8003e38:	029b      	lsls	r3, r3, #10
 8003e3a:	697a      	ldr	r2, [r7, #20]
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	617b      	str	r3, [r7, #20]
=======
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6a1b      	ldr	r3, [r3, #32]
 8003d96:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	621a      	str	r2, [r3, #32]
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6a1b      	ldr	r3, [r3, #32]
 8003df6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003e04:	68fa      	ldr	r2, [r7, #12]
 8003e06:	4b1c      	ldr	r3, [pc, #112]	; (8003e78 <TIM_OC6_SetConfig+0x9c>)
 8003e08:	4013      	ands	r3, r2
 8003e0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	021b      	lsls	r3, r3, #8
 8003e12:	68fa      	ldr	r2, [r7, #12]
 8003e14:	4313      	orrs	r3, r2
 8003e16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003e18:	693b      	ldr	r3, [r7, #16]
 8003e1a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003e1e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	689b      	ldr	r3, [r3, #8]
 8003e24:	051b      	lsls	r3, r3, #20
 8003e26:	693a      	ldr	r2, [r7, #16]
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	4a13      	ldr	r2, [pc, #76]	; (8003e7c <TIM_OC6_SetConfig+0xa0>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d003      	beq.n	8003e3c <TIM_OC6_SetConfig+0x60>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	4a12      	ldr	r2, [pc, #72]	; (8003e80 <TIM_OC6_SetConfig+0xa4>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d109      	bne.n	8003e50 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003e3c:	697b      	ldr	r3, [r7, #20]
 8003e3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e42:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
<<<<<<< HEAD
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	695b      	ldr	r3, [r3, #20]
 8003e48:	029b      	lsls	r3, r3, #10
 8003e4a:	697a      	ldr	r2, [r7, #20]
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	617b      	str	r3, [r7, #20]
=======
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	695b      	ldr	r3, [r3, #20]
 8003df4:	029b      	lsls	r3, r3, #10
 8003df6:	697a      	ldr	r2, [r7, #20]
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	617b      	str	r3, [r7, #20]
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
<<<<<<< HEAD
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	697a      	ldr	r2, [r7, #20]
 8003e54:	605a      	str	r2, [r3, #4]
=======
<<<<<<< HEAD
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	697a      	ldr	r2, [r7, #20]
 8003e44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	68fa      	ldr	r2, [r7, #12]
 8003e4a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	685a      	ldr	r2, [r3, #4]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	693a      	ldr	r2, [r7, #16]
 8003e58:	621a      	str	r2, [r3, #32]
}
 8003e5a:	bf00      	nop
 8003e5c:	371c      	adds	r7, #28
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e64:	4770      	bx	lr
 8003e66:	bf00      	nop
 8003e68:	feff8fff 	.word	0xfeff8fff
 8003e6c:	40010000 	.word	0x40010000
 8003e70:	40010400 	.word	0x40010400

08003e74 <HAL_TIMEx_MasterConfigSynchronization>:
=======
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	697a      	ldr	r2, [r7, #20]
 8003e00:	605a      	str	r2, [r3, #4]
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	68fa      	ldr	r2, [r7, #12]
 8003e5a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	685a      	ldr	r2, [r3, #4]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	693a      	ldr	r2, [r7, #16]
 8003e68:	621a      	str	r2, [r3, #32]
}
 8003e6a:	bf00      	nop
 8003e6c:	371c      	adds	r7, #28
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e74:	4770      	bx	lr
 8003e76:	bf00      	nop
 8003e78:	feff8fff 	.word	0xfeff8fff
 8003e7c:	40010000 	.word	0x40010000
 8003e80:	40010400 	.word	0x40010400

<<<<<<< HEAD
08003e84 <HAL_TIMEx_MasterConfigSynchronization>:
=======
08003e30 <HAL_TIMEx_MasterConfigSynchronization>:
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
<<<<<<< HEAD
 8003e84:	b480      	push	{r7}
 8003e86:	b085      	sub	sp, #20
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
 8003e8c:	6039      	str	r1, [r7, #0]
=======
<<<<<<< HEAD
 8003e74:	b480      	push	{r7}
 8003e76:	b085      	sub	sp, #20
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
 8003e7c:	6039      	str	r1, [r7, #0]
=======
 8003e30:	b480      	push	{r7}
 8003e32:	b085      	sub	sp, #20
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
 8003e38:	6039      	str	r1, [r7, #0]
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
<<<<<<< HEAD
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e94:	2b01      	cmp	r3, #1
 8003e96:	d101      	bne.n	8003e9c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003e98:	2302      	movs	r3, #2
 8003e9a:	e06d      	b.n	8003f78 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
=======
<<<<<<< HEAD
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	d101      	bne.n	8003e8c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003e88:	2302      	movs	r3, #2
 8003e8a:	e06d      	b.n	8003f68 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2201      	movs	r2, #1
 8003e90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2202      	movs	r2, #2
 8003e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	689b      	ldr	r3, [r3, #8]
 8003eaa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a30      	ldr	r2, [pc, #192]	; (8003f74 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d004      	beq.n	8003ec0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a2f      	ldr	r2, [pc, #188]	; (8003f78 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d108      	bne.n	8003ed2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
=======
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e40:	2b01      	cmp	r3, #1
 8003e42:	d101      	bne.n	8003e48 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003e44:	2302      	movs	r3, #2
 8003e46:	e06d      	b.n	8003f24 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2202      	movs	r2, #2
 8003ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	689b      	ldr	r3, [r3, #8]
 8003eba:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
<<<<<<< HEAD
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a30      	ldr	r2, [pc, #192]	; (8003f84 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d004      	beq.n	8003ed0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a2f      	ldr	r2, [pc, #188]	; (8003f88 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d108      	bne.n	8003ee2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
=======
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a30      	ldr	r2, [pc, #192]	; (8003f30 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d004      	beq.n	8003e7c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4a2f      	ldr	r2, [pc, #188]	; (8003f34 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d108      	bne.n	8003e8e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
<<<<<<< HEAD
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003ed6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	68fa      	ldr	r2, [r7, #12]
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	60fb      	str	r3, [r7, #12]
=======
<<<<<<< HEAD
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003ec6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	68fa      	ldr	r2, [r7, #12]
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	60fb      	str	r3, [r7, #12]
=======
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003e82:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	68fa      	ldr	r2, [r7, #12]
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	60fb      	str	r3, [r7, #12]
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
<<<<<<< HEAD
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ee8:	60fb      	str	r3, [r7, #12]
=======
<<<<<<< HEAD
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ed8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	68fa      	ldr	r2, [r7, #12]
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	68fa      	ldr	r2, [r7, #12]
 8003eea:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a20      	ldr	r2, [pc, #128]	; (8003f74 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d022      	beq.n	8003f3c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003efe:	d01d      	beq.n	8003f3c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a1d      	ldr	r2, [pc, #116]	; (8003f7c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d018      	beq.n	8003f3c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a1c      	ldr	r2, [pc, #112]	; (8003f80 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d013      	beq.n	8003f3c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a1a      	ldr	r2, [pc, #104]	; (8003f84 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d00e      	beq.n	8003f3c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a15      	ldr	r2, [pc, #84]	; (8003f78 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d009      	beq.n	8003f3c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a16      	ldr	r2, [pc, #88]	; (8003f88 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d004      	beq.n	8003f3c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a15      	ldr	r2, [pc, #84]	; (8003f8c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d10c      	bne.n	8003f56 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f42:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	68ba      	ldr	r2, [r7, #8]
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	68ba      	ldr	r2, [r7, #8]
 8003f54:	609a      	str	r2, [r3, #8]
=======
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e94:	60fb      	str	r3, [r7, #12]
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	68fa      	ldr	r2, [r7, #12]
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	68fa      	ldr	r2, [r7, #12]
 8003efa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a20      	ldr	r2, [pc, #128]	; (8003f84 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d022      	beq.n	8003f4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f0e:	d01d      	beq.n	8003f4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a1d      	ldr	r2, [pc, #116]	; (8003f8c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d018      	beq.n	8003f4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a1c      	ldr	r2, [pc, #112]	; (8003f90 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d013      	beq.n	8003f4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a1a      	ldr	r2, [pc, #104]	; (8003f94 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d00e      	beq.n	8003f4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a15      	ldr	r2, [pc, #84]	; (8003f88 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d009      	beq.n	8003f4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a16      	ldr	r2, [pc, #88]	; (8003f98 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d004      	beq.n	8003f4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a15      	ldr	r2, [pc, #84]	; (8003f9c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d10c      	bne.n	8003f66 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f52:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	68ba      	ldr	r2, [r7, #8]
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
<<<<<<< HEAD
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	68ba      	ldr	r2, [r7, #8]
 8003f64:	609a      	str	r2, [r3, #8]
=======
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	68ba      	ldr	r2, [r7, #8]
 8003f10:	609a      	str	r2, [r3, #8]
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
<<<<<<< HEAD
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2201      	movs	r2, #1
 8003f6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
=======
<<<<<<< HEAD
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2201      	movs	r2, #1
 8003f5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2200      	movs	r2, #0
 8003f62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f66:	2300      	movs	r3, #0
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	3714      	adds	r7, #20
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f72:	4770      	bx	lr
 8003f74:	40010000 	.word	0x40010000
 8003f78:	40010400 	.word	0x40010400
 8003f7c:	40000400 	.word	0x40000400
 8003f80:	40000800 	.word	0x40000800
 8003f84:	40000c00 	.word	0x40000c00
 8003f88:	40014000 	.word	0x40014000
 8003f8c:	40001800 	.word	0x40001800

08003f90 <HAL_TIMEx_CommutCallback>:
=======
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2201      	movs	r2, #1
 8003f16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637

  __HAL_UNLOCK(htim);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2200      	movs	r2, #0
 8003f72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f76:	2300      	movs	r3, #0
}
 8003f78:	4618      	mov	r0, r3
 8003f7a:	3714      	adds	r7, #20
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f82:	4770      	bx	lr
 8003f84:	40010000 	.word	0x40010000
 8003f88:	40010400 	.word	0x40010400
 8003f8c:	40000400 	.word	0x40000400
 8003f90:	40000800 	.word	0x40000800
 8003f94:	40000c00 	.word	0x40000c00
 8003f98:	40014000 	.word	0x40014000
 8003f9c:	40001800 	.word	0x40001800

<<<<<<< HEAD
08003fa0 <HAL_TIMEx_CommutCallback>:
=======
08003f4c <HAL_TIMEx_CommutCallback>:
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8003fa0:	b480      	push	{r7}
 8003fa2:	b083      	sub	sp, #12
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
=======
<<<<<<< HEAD
 8003f90:	b480      	push	{r7}
 8003f92:	b083      	sub	sp, #12
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
=======
 8003f4c:	b480      	push	{r7}
 8003f4e:	b083      	sub	sp, #12
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8003fa8:	bf00      	nop
 8003faa:	370c      	adds	r7, #12
 8003fac:	46bd      	mov	sp, r7
 8003fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb2:	4770      	bx	lr

08003fb4 <HAL_TIMEx_BreakCallback>:
=======
<<<<<<< HEAD
 8003f98:	bf00      	nop
 8003f9a:	370c      	adds	r7, #12
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa2:	4770      	bx	lr

08003fa4 <HAL_TIMEx_BreakCallback>:
=======
 8003f54:	bf00      	nop
 8003f56:	370c      	adds	r7, #12
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5e:	4770      	bx	lr

08003f60 <HAL_TIMEx_BreakCallback>:
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8003fb4:	b480      	push	{r7}
 8003fb6:	b083      	sub	sp, #12
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
=======
<<<<<<< HEAD
 8003fa4:	b480      	push	{r7}
 8003fa6:	b083      	sub	sp, #12
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
=======
 8003f60:	b480      	push	{r7}
 8003f62:	b083      	sub	sp, #12
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8003fbc:	bf00      	nop
 8003fbe:	370c      	adds	r7, #12
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc6:	4770      	bx	lr

08003fc8 <HAL_TIMEx_Break2Callback>:
=======
<<<<<<< HEAD
 8003fac:	bf00      	nop
 8003fae:	370c      	adds	r7, #12
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb6:	4770      	bx	lr

08003fb8 <HAL_TIMEx_Break2Callback>:
=======
 8003f68:	bf00      	nop
 8003f6a:	370c      	adds	r7, #12
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f72:	4770      	bx	lr

08003f74 <HAL_TIMEx_Break2Callback>:
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8003fc8:	b480      	push	{r7}
 8003fca:	b083      	sub	sp, #12
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
=======
<<<<<<< HEAD
 8003fb8:	b480      	push	{r7}
 8003fba:	b083      	sub	sp, #12
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
=======
 8003f74:	b480      	push	{r7}
 8003f76:	b083      	sub	sp, #12
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8003fd0:	bf00      	nop
 8003fd2:	370c      	adds	r7, #12
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fda:	4770      	bx	lr

08003fdc <HAL_UART_Init>:
=======
<<<<<<< HEAD
 8003fc0:	bf00      	nop
 8003fc2:	370c      	adds	r7, #12
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fca:	4770      	bx	lr

08003fcc <HAL_UART_Init>:
=======
 8003f7c:	bf00      	nop
 8003f7e:	370c      	adds	r7, #12
 8003f80:	46bd      	mov	sp, r7
 8003f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f86:	4770      	bx	lr

08003f88 <HAL_UART_Init>:
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b082      	sub	sp, #8
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
=======
<<<<<<< HEAD
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b082      	sub	sp, #8
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d101      	bne.n	8003fde <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	e040      	b.n	8004060 <HAL_UART_Init+0x94>
=======
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b082      	sub	sp, #8
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d101      	bne.n	8003fee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
<<<<<<< HEAD
 8003fea:	2301      	movs	r3, #1
 8003fec:	e040      	b.n	8004070 <HAL_UART_Init+0x94>
=======
 8003f96:	2301      	movs	r3, #1
 8003f98:	e040      	b.n	800401c <HAL_UART_Init+0x94>
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
<<<<<<< HEAD
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d106      	bne.n	8004004 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
=======
<<<<<<< HEAD
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d106      	bne.n	8003ff4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
=======
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d106      	bne.n	8003fb0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
<<<<<<< HEAD
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f7fc fdd8 	bl	8000bb4 <HAL_UART_MspInit>
=======
<<<<<<< HEAD
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	f7fc fdd8 	bl	8000ba4 <HAL_UART_MspInit>
=======
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	f7fc fdf0 	bl	8000b90 <HAL_UART_MspInit>
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
<<<<<<< HEAD
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2224      	movs	r2, #36	; 0x24
 8004008:	67da      	str	r2, [r3, #124]	; 0x7c
=======
<<<<<<< HEAD
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2224      	movs	r2, #36	; 0x24
 8003ff8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	681a      	ldr	r2, [r3, #0]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f022 0201 	bic.w	r2, r2, #1
 8004008:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800400a:	6878      	ldr	r0, [r7, #4]
 800400c:	f000 fb1e 	bl	800464c <UART_SetConfig>
 8004010:	4603      	mov	r3, r0
 8004012:	2b01      	cmp	r3, #1
 8004014:	d101      	bne.n	800401a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004016:	2301      	movs	r3, #1
 8004018:	e022      	b.n	8004060 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800401e:	2b00      	cmp	r3, #0
 8004020:	d002      	beq.n	8004028 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	f000 fd76 	bl	8004b14 <UART_AdvFeatureConfig>
=======
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2224      	movs	r2, #36	; 0x24
 8003fb4:	67da      	str	r2, [r3, #124]	; 0x7c
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637

  __HAL_UART_DISABLE(huart);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	681a      	ldr	r2, [r3, #0]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f022 0201 	bic.w	r2, r2, #1
 8004018:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	f000 fb1e 	bl	800465c <UART_SetConfig>
 8004020:	4603      	mov	r3, r0
 8004022:	2b01      	cmp	r3, #1
 8004024:	d101      	bne.n	800402a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004026:	2301      	movs	r3, #1
 8004028:	e022      	b.n	8004070 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800402e:	2b00      	cmp	r3, #0
 8004030:	d002      	beq.n	8004038 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
<<<<<<< HEAD
 8004032:	6878      	ldr	r0, [r7, #4]
 8004034:	f000 fd76 	bl	8004b24 <UART_AdvFeatureConfig>
=======
 8003fde:	6878      	ldr	r0, [r7, #4]
 8003fe0:	f000 fd76 	bl	8004ad0 <UART_AdvFeatureConfig>
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
<<<<<<< HEAD
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	685a      	ldr	r2, [r3, #4]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004046:	605a      	str	r2, [r3, #4]
=======
<<<<<<< HEAD
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	685a      	ldr	r2, [r3, #4]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004036:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	689a      	ldr	r2, [r3, #8]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004046:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f042 0201 	orr.w	r2, r2, #1
 8004056:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004058:	6878      	ldr	r0, [r7, #4]
 800405a:	f000 fdfd 	bl	8004c58 <UART_CheckIdleState>
 800405e:	4603      	mov	r3, r0
}
 8004060:	4618      	mov	r0, r3
 8004062:	3708      	adds	r7, #8
 8004064:	46bd      	mov	sp, r7
 8004066:	bd80      	pop	{r7, pc}

08004068 <HAL_UART_IRQHandler>:
=======
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	685a      	ldr	r2, [r3, #4]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003ff2:	605a      	str	r2, [r3, #4]
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	689a      	ldr	r2, [r3, #8]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004056:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	681a      	ldr	r2, [r3, #0]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f042 0201 	orr.w	r2, r2, #1
 8004066:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004068:	6878      	ldr	r0, [r7, #4]
 800406a:	f000 fdfd 	bl	8004c68 <UART_CheckIdleState>
 800406e:	4603      	mov	r3, r0
}
 8004070:	4618      	mov	r0, r3
 8004072:	3708      	adds	r7, #8
 8004074:	46bd      	mov	sp, r7
 8004076:	bd80      	pop	{r7, pc}

<<<<<<< HEAD
08004078 <HAL_UART_IRQHandler>:
=======
08004024 <HAL_UART_IRQHandler>:
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8004078:	b580      	push	{r7, lr}
 800407a:	b0ba      	sub	sp, #232	; 0xe8
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
=======
<<<<<<< HEAD
 8004068:	b580      	push	{r7, lr}
 800406a:	b0ba      	sub	sp, #232	; 0xe8
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	69db      	ldr	r3, [r3, #28]
 8004076:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	689b      	ldr	r3, [r3, #8]
 800408a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
=======
 8004024:	b580      	push	{r7, lr}
 8004026:	b0ba      	sub	sp, #232	; 0xe8
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	69db      	ldr	r3, [r3, #28]
 8004086:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
<<<<<<< HEAD
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
=======
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
<<<<<<< HEAD
 800409e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80040a2:	f640 030f 	movw	r3, #2063	; 0x80f
 80040a6:	4013      	ands	r3, r2
 80040a8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
=======
<<<<<<< HEAD
 800408e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004092:	f640 030f 	movw	r3, #2063	; 0x80f
 8004096:	4013      	ands	r3, r2
 8004098:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800409c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d115      	bne.n	80040d0 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80040a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040a8:	f003 0320 	and.w	r3, r3, #32
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d00f      	beq.n	80040d0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80040b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80040b4:	f003 0320 	and.w	r3, r3, #32
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d009      	beq.n	80040d0 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	f000 8297 	beq.w	80045f4 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80040ca:	6878      	ldr	r0, [r7, #4]
 80040cc:	4798      	blx	r3
      }
      return;
 80040ce:	e291      	b.n	80045f4 <HAL_UART_IRQHandler+0x58c>
=======
 800404a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800404e:	f640 030f 	movw	r3, #2063	; 0x80f
 8004052:	4013      	ands	r3, r2
 8004054:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  if (errorflags == 0U)
 80040ac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d115      	bne.n	80040e0 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80040b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040b8:	f003 0320 	and.w	r3, r3, #32
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d00f      	beq.n	80040e0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80040c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80040c4:	f003 0320 	and.w	r3, r3, #32
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d009      	beq.n	80040e0 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	f000 8297 	beq.w	8004604 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80040da:	6878      	ldr	r0, [r7, #4]
 80040dc:	4798      	blx	r3
      }
      return;
<<<<<<< HEAD
 80040de:	e291      	b.n	8004604 <HAL_UART_IRQHandler+0x58c>
=======
 800408a:	e291      	b.n	80045b0 <HAL_UART_IRQHandler+0x58c>
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
<<<<<<< HEAD
 80040e0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	f000 8117 	beq.w	8004318 <HAL_UART_IRQHandler+0x2a0>
=======
<<<<<<< HEAD
 80040d0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	f000 8117 	beq.w	8004308 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80040da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80040de:	f003 0301 	and.w	r3, r3, #1
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d106      	bne.n	80040f4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80040e6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80040ea:	4b85      	ldr	r3, [pc, #532]	; (8004300 <HAL_UART_IRQHandler+0x298>)
 80040ec:	4013      	ands	r3, r2
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	f000 810a 	beq.w	8004308 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80040f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040f8:	f003 0301 	and.w	r3, r3, #1
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d011      	beq.n	8004124 <HAL_UART_IRQHandler+0xbc>
 8004100:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004104:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004108:	2b00      	cmp	r3, #0
 800410a:	d00b      	beq.n	8004124 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	2201      	movs	r2, #1
 8004112:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800411a:	f043 0201 	orr.w	r2, r3, #1
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
=======
 800408c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004090:	2b00      	cmp	r3, #0
 8004092:	f000 8117 	beq.w	80042c4 <HAL_UART_IRQHandler+0x2a0>
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
      && (((cr3its & USART_CR3_EIE) != 0U)
 80040ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80040ee:	f003 0301 	and.w	r3, r3, #1
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d106      	bne.n	8004104 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80040f6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80040fa:	4b85      	ldr	r3, [pc, #532]	; (8004310 <HAL_UART_IRQHandler+0x298>)
 80040fc:	4013      	ands	r3, r2
 80040fe:	2b00      	cmp	r3, #0
 8004100:	f000 810a 	beq.w	8004318 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004104:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004108:	f003 0301 	and.w	r3, r3, #1
 800410c:	2b00      	cmp	r3, #0
 800410e:	d011      	beq.n	8004134 <HAL_UART_IRQHandler+0xbc>
 8004110:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004114:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004118:	2b00      	cmp	r3, #0
 800411a:	d00b      	beq.n	8004134 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	2201      	movs	r2, #1
 8004122:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
<<<<<<< HEAD
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800412a:	f043 0201 	orr.w	r2, r3, #1
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
=======
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040d6:	f043 0201 	orr.w	r2, r3, #1
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
<<<<<<< HEAD
 8004134:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004138:	f003 0302 	and.w	r3, r3, #2
 800413c:	2b00      	cmp	r3, #0
 800413e:	d011      	beq.n	8004164 <HAL_UART_IRQHandler+0xec>
 8004140:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004144:	f003 0301 	and.w	r3, r3, #1
 8004148:	2b00      	cmp	r3, #0
 800414a:	d00b      	beq.n	8004164 <HAL_UART_IRQHandler+0xec>
=======
<<<<<<< HEAD
 8004124:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004128:	f003 0302 	and.w	r3, r3, #2
 800412c:	2b00      	cmp	r3, #0
 800412e:	d011      	beq.n	8004154 <HAL_UART_IRQHandler+0xec>
 8004130:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004134:	f003 0301 	and.w	r3, r3, #1
 8004138:	2b00      	cmp	r3, #0
 800413a:	d00b      	beq.n	8004154 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	2202      	movs	r2, #2
 8004142:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800414a:	f043 0204 	orr.w	r2, r3, #4
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
=======
 80040e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040e4:	f003 0302 	and.w	r3, r3, #2
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d011      	beq.n	8004110 <HAL_UART_IRQHandler+0xec>
 80040ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80040f0:	f003 0301 	and.w	r3, r3, #1
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d00b      	beq.n	8004110 <HAL_UART_IRQHandler+0xec>
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	2202      	movs	r2, #2
 8004152:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
<<<<<<< HEAD
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800415a:	f043 0204 	orr.w	r2, r3, #4
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
=======
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004106:	f043 0204 	orr.w	r2, r3, #4
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
<<<<<<< HEAD
 8004164:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004168:	f003 0304 	and.w	r3, r3, #4
 800416c:	2b00      	cmp	r3, #0
 800416e:	d011      	beq.n	8004194 <HAL_UART_IRQHandler+0x11c>
 8004170:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004174:	f003 0301 	and.w	r3, r3, #1
 8004178:	2b00      	cmp	r3, #0
 800417a:	d00b      	beq.n	8004194 <HAL_UART_IRQHandler+0x11c>
=======
<<<<<<< HEAD
 8004154:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004158:	f003 0304 	and.w	r3, r3, #4
 800415c:	2b00      	cmp	r3, #0
 800415e:	d011      	beq.n	8004184 <HAL_UART_IRQHandler+0x11c>
 8004160:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004164:	f003 0301 	and.w	r3, r3, #1
 8004168:	2b00      	cmp	r3, #0
 800416a:	d00b      	beq.n	8004184 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	2204      	movs	r2, #4
 8004172:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800417a:	f043 0202 	orr.w	r2, r3, #2
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
=======
 8004110:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004114:	f003 0304 	and.w	r3, r3, #4
 8004118:	2b00      	cmp	r3, #0
 800411a:	d011      	beq.n	8004140 <HAL_UART_IRQHandler+0x11c>
 800411c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004120:	f003 0301 	and.w	r3, r3, #1
 8004124:	2b00      	cmp	r3, #0
 8004126:	d00b      	beq.n	8004140 <HAL_UART_IRQHandler+0x11c>
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	2204      	movs	r2, #4
 8004182:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
<<<<<<< HEAD
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800418a:	f043 0202 	orr.w	r2, r3, #2
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
=======
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004136:	f043 0202 	orr.w	r2, r3, #2
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
<<<<<<< HEAD
 8004194:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004198:	f003 0308 	and.w	r3, r3, #8
 800419c:	2b00      	cmp	r3, #0
 800419e:	d017      	beq.n	80041d0 <HAL_UART_IRQHandler+0x158>
=======
<<<<<<< HEAD
 8004184:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004188:	f003 0308 	and.w	r3, r3, #8
 800418c:	2b00      	cmp	r3, #0
 800418e:	d017      	beq.n	80041c0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004190:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004194:	f003 0320 	and.w	r3, r3, #32
 8004198:	2b00      	cmp	r3, #0
 800419a:	d105      	bne.n	80041a8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800419c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80041a0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d00b      	beq.n	80041c0 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	2208      	movs	r2, #8
 80041ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041b6:	f043 0208 	orr.w	r2, r3, #8
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
=======
 8004140:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004144:	f003 0308 	and.w	r3, r3, #8
 8004148:	2b00      	cmp	r3, #0
 800414a:	d017      	beq.n	800417c <HAL_UART_IRQHandler+0x158>
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80041a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041a4:	f003 0320 	and.w	r3, r3, #32
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d105      	bne.n	80041b8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80041ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80041b0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d00b      	beq.n	80041d0 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	2208      	movs	r2, #8
 80041be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
<<<<<<< HEAD
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041c6:	f043 0208 	orr.w	r2, r3, #8
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
=======
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004172:	f043 0208 	orr.w	r2, r3, #8
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
<<<<<<< HEAD
 80041d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d012      	beq.n	8004202 <HAL_UART_IRQHandler+0x18a>
 80041dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041e0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d00c      	beq.n	8004202 <HAL_UART_IRQHandler+0x18a>
=======
<<<<<<< HEAD
 80041c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d012      	beq.n	80041f2 <HAL_UART_IRQHandler+0x18a>
 80041cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041d0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d00c      	beq.n	80041f2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80041e0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041e8:	f043 0220 	orr.w	r2, r3, #32
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
=======
 800417c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004180:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004184:	2b00      	cmp	r3, #0
 8004186:	d012      	beq.n	80041ae <HAL_UART_IRQHandler+0x18a>
 8004188:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800418c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004190:	2b00      	cmp	r3, #0
 8004192:	d00c      	beq.n	80041ae <HAL_UART_IRQHandler+0x18a>
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80041f0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
<<<<<<< HEAD
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041f8:	f043 0220 	orr.w	r2, r3, #32
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
=======
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041a4:	f043 0220 	orr.w	r2, r3, #32
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
<<<<<<< HEAD
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004208:	2b00      	cmp	r3, #0
 800420a:	f000 81fd 	beq.w	8004608 <HAL_UART_IRQHandler+0x590>
=======
<<<<<<< HEAD
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	f000 81fd 	beq.w	80045f8 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80041fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004202:	f003 0320 	and.w	r3, r3, #32
 8004206:	2b00      	cmp	r3, #0
 8004208:	d00d      	beq.n	8004226 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800420a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800420e:	f003 0320 	and.w	r3, r3, #32
 8004212:	2b00      	cmp	r3, #0
 8004214:	d007      	beq.n	8004226 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800421a:	2b00      	cmp	r3, #0
 800421c:	d003      	beq.n	8004226 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004222:	6878      	ldr	r0, [r7, #4]
 8004224:	4798      	blx	r3
=======
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	f000 81fd 	beq.w	80045b4 <HAL_UART_IRQHandler+0x590>
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800420e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004212:	f003 0320 	and.w	r3, r3, #32
 8004216:	2b00      	cmp	r3, #0
 8004218:	d00d      	beq.n	8004236 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800421a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800421e:	f003 0320 	and.w	r3, r3, #32
 8004222:	2b00      	cmp	r3, #0
 8004224:	d007      	beq.n	8004236 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800422a:	2b00      	cmp	r3, #0
 800422c:	d003      	beq.n	8004236 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
<<<<<<< HEAD
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004232:	6878      	ldr	r0, [r7, #4]
 8004234:	4798      	blx	r3
=======
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80041de:	6878      	ldr	r0, [r7, #4]
 80041e0:	4798      	blx	r3
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
<<<<<<< HEAD
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800423c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
=======
<<<<<<< HEAD
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800422c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	689b      	ldr	r3, [r3, #8]
 8004236:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800423a:	2b40      	cmp	r3, #64	; 0x40
 800423c:	d005      	beq.n	800424a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800423e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004242:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004246:	2b00      	cmp	r3, #0
 8004248:	d04f      	beq.n	80042ea <HAL_UART_IRQHandler+0x282>
=======
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041e8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800424a:	2b40      	cmp	r3, #64	; 0x40
 800424c:	d005      	beq.n	800425a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800424e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004252:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
<<<<<<< HEAD
 8004256:	2b00      	cmp	r3, #0
 8004258:	d04f      	beq.n	80042fa <HAL_UART_IRQHandler+0x282>
=======
 8004202:	2b00      	cmp	r3, #0
 8004204:	d04f      	beq.n	80042a6 <HAL_UART_IRQHandler+0x282>
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
<<<<<<< HEAD
 800425a:	6878      	ldr	r0, [r7, #4]
 800425c:	f000 fe01 	bl	8004e62 <UART_EndRxTransfer>
=======
<<<<<<< HEAD
 800424a:	6878      	ldr	r0, [r7, #4]
 800424c:	f000 fe01 	bl	8004e52 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	689b      	ldr	r3, [r3, #8]
 8004256:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800425a:	2b40      	cmp	r3, #64	; 0x40
 800425c:	d141      	bne.n	80042e2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	3308      	adds	r3, #8
 8004264:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
=======
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	f000 fe01 	bl	8004e0e <UART_EndRxTransfer>
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	689b      	ldr	r3, [r3, #8]
 8004266:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800426a:	2b40      	cmp	r3, #64	; 0x40
 800426c:	d141      	bne.n	80042f2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
<<<<<<< HEAD
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	3308      	adds	r3, #8
 8004274:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
=======
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	3308      	adds	r3, #8
 8004220:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
<<<<<<< HEAD
 8004278:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800427c:	e853 3f00 	ldrex	r3, [r3]
 8004280:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004284:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004288:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800428c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	3308      	adds	r3, #8
 8004296:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800429a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800429e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
=======
<<<<<<< HEAD
 8004268:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800426c:	e853 3f00 	ldrex	r3, [r3]
 8004270:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004274:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004278:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800427c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	3308      	adds	r3, #8
 8004286:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800428a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800428e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
=======
 8004224:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004228:	e853 3f00 	ldrex	r3, [r3]
 800422c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004230:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004234:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004238:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	3308      	adds	r3, #8
 8004242:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004246:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800424a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
<<<<<<< HEAD
 80042a2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80042a6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80042aa:	e841 2300 	strex	r3, r2, [r1]
 80042ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
=======
<<<<<<< HEAD
 8004292:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004296:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800429a:	e841 2300 	strex	r3, r2, [r1]
 800429e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80042a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d1d9      	bne.n	800425e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d013      	beq.n	80042da <HAL_UART_IRQHandler+0x272>
=======
 800424e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004252:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004256:	e841 2300 	strex	r3, r2, [r1]
 800425a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
   return(result);
 80042b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d1d9      	bne.n	800426e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
<<<<<<< HEAD
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d013      	beq.n	80042ea <HAL_UART_IRQHandler+0x272>
=======
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800426a:	2b00      	cmp	r3, #0
 800426c:	d013      	beq.n	8004296 <HAL_UART_IRQHandler+0x272>
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
<<<<<<< HEAD
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042c6:	4a13      	ldr	r2, [pc, #76]	; (8004314 <HAL_UART_IRQHandler+0x29c>)
 80042c8:	651a      	str	r2, [r3, #80]	; 0x50
=======
<<<<<<< HEAD
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042b6:	4a13      	ldr	r2, [pc, #76]	; (8004304 <HAL_UART_IRQHandler+0x29c>)
 80042b8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042be:	4618      	mov	r0, r3
 80042c0:	f7fd fb1a 	bl	80018f8 <HAL_DMA_Abort_IT>
 80042c4:	4603      	mov	r3, r0
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d017      	beq.n	80042fa <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042d0:	687a      	ldr	r2, [r7, #4]
 80042d2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80042d4:	4610      	mov	r0, r2
 80042d6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042d8:	e00f      	b.n	80042fa <HAL_UART_IRQHandler+0x292>
=======
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004272:	4a13      	ldr	r2, [pc, #76]	; (80042c0 <HAL_UART_IRQHandler+0x29c>)
 8004274:	651a      	str	r2, [r3, #80]	; 0x50
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042ce:	4618      	mov	r0, r3
 80042d0:	f7fd fb1a 	bl	8001908 <HAL_DMA_Abort_IT>
 80042d4:	4603      	mov	r3, r0
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d017      	beq.n	800430a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042e0:	687a      	ldr	r2, [r7, #4]
 80042e2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80042e4:	4610      	mov	r0, r2
 80042e6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
<<<<<<< HEAD
 80042e8:	e00f      	b.n	800430a <HAL_UART_IRQHandler+0x292>
=======
 8004294:	e00f      	b.n	80042b6 <HAL_UART_IRQHandler+0x292>
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
<<<<<<< HEAD
 80042ea:	6878      	ldr	r0, [r7, #4]
 80042ec:	f000 f9a0 	bl	8004630 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042f0:	e00b      	b.n	800430a <HAL_UART_IRQHandler+0x292>
=======
<<<<<<< HEAD
 80042da:	6878      	ldr	r0, [r7, #4]
 80042dc:	f000 f9a0 	bl	8004620 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042e0:	e00b      	b.n	80042fa <HAL_UART_IRQHandler+0x292>
=======
 8004296:	6878      	ldr	r0, [r7, #4]
 8004298:	f000 f9a0 	bl	80045dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800429c:	e00b      	b.n	80042b6 <HAL_UART_IRQHandler+0x292>
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
<<<<<<< HEAD
 80042f2:	6878      	ldr	r0, [r7, #4]
 80042f4:	f000 f99c 	bl	8004630 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042f8:	e007      	b.n	800430a <HAL_UART_IRQHandler+0x292>
=======
<<<<<<< HEAD
 80042e2:	6878      	ldr	r0, [r7, #4]
 80042e4:	f000 f99c 	bl	8004620 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042e8:	e007      	b.n	80042fa <HAL_UART_IRQHandler+0x292>
=======
 800429e:	6878      	ldr	r0, [r7, #4]
 80042a0:	f000 f99c 	bl	80045dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042a4:	e007      	b.n	80042b6 <HAL_UART_IRQHandler+0x292>
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
<<<<<<< HEAD
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	f000 f998 	bl	8004630 <HAL_UART_ErrorCallback>
=======
<<<<<<< HEAD
 80042ea:	6878      	ldr	r0, [r7, #4]
 80042ec:	f000 f998 	bl	8004620 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2200      	movs	r2, #0
 80042f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80042f8:	e17e      	b.n	80045f8 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042fa:	bf00      	nop
    return;
 80042fc:	e17c      	b.n	80045f8 <HAL_UART_IRQHandler+0x590>
 80042fe:	bf00      	nop
 8004300:	04000120 	.word	0x04000120
 8004304:	08004f1b 	.word	0x08004f1b
=======
 80042a6:	6878      	ldr	r0, [r7, #4]
 80042a8:	f000 f998 	bl	80045dc <HAL_UART_ErrorCallback>
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2200      	movs	r2, #0
 8004304:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8004308:	e17e      	b.n	8004608 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800430a:	bf00      	nop
    return;
<<<<<<< HEAD
 800430c:	e17c      	b.n	8004608 <HAL_UART_IRQHandler+0x590>
 800430e:	bf00      	nop
 8004310:	04000120 	.word	0x04000120
 8004314:	08004f2b 	.word	0x08004f2b
=======
 80042b8:	e17c      	b.n	80045b4 <HAL_UART_IRQHandler+0x590>
 80042ba:	bf00      	nop
 80042bc:	04000120 	.word	0x04000120
 80042c0:	08004ed7 	.word	0x08004ed7
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
<<<<<<< HEAD
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800431c:	2b01      	cmp	r3, #1
 800431e:	f040 814c 	bne.w	80045ba <HAL_UART_IRQHandler+0x542>
=======
<<<<<<< HEAD
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800430c:	2b01      	cmp	r3, #1
 800430e:	f040 814c 	bne.w	80045aa <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004312:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004316:	f003 0310 	and.w	r3, r3, #16
 800431a:	2b00      	cmp	r3, #0
 800431c:	f000 8145 	beq.w	80045aa <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004320:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004324:	f003 0310 	and.w	r3, r3, #16
 8004328:	2b00      	cmp	r3, #0
 800432a:	f000 813e 	beq.w	80045aa <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	2210      	movs	r2, #16
 8004334:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004340:	2b40      	cmp	r3, #64	; 0x40
 8004342:	f040 80b6 	bne.w	80044b2 <HAL_UART_IRQHandler+0x44a>
=======
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042c8:	2b01      	cmp	r3, #1
 80042ca:	f040 814c 	bne.w	8004566 <HAL_UART_IRQHandler+0x542>
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004322:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004326:	f003 0310 	and.w	r3, r3, #16
 800432a:	2b00      	cmp	r3, #0
 800432c:	f000 8145 	beq.w	80045ba <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004330:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004334:	f003 0310 	and.w	r3, r3, #16
 8004338:	2b00      	cmp	r3, #0
 800433a:	f000 813e 	beq.w	80045ba <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	2210      	movs	r2, #16
 8004344:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
<<<<<<< HEAD
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	689b      	ldr	r3, [r3, #8]
 800434c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004350:	2b40      	cmp	r3, #64	; 0x40
 8004352:	f040 80b6 	bne.w	80044c2 <HAL_UART_IRQHandler+0x44a>
=======
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	689b      	ldr	r3, [r3, #8]
 80042f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042fc:	2b40      	cmp	r3, #64	; 0x40
 80042fe:	f040 80b6 	bne.w	800446e <HAL_UART_IRQHandler+0x44a>
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
<<<<<<< HEAD
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
=======
<<<<<<< HEAD
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004352:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004356:	2b00      	cmp	r3, #0
 8004358:	f000 8150 	beq.w	80045fc <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004362:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004366:	429a      	cmp	r2, r3
 8004368:	f080 8148 	bcs.w	80045fc <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004372:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800437a:	69db      	ldr	r3, [r3, #28]
 800437c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004380:	f000 8086 	beq.w	8004490 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800438c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004390:	e853 3f00 	ldrex	r3, [r3]
 8004394:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004398:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800439c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80043a0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	461a      	mov	r2, r3
 80043aa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80043ae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80043b2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043b6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80043ba:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80043be:	e841 2300 	strex	r3, r2, [r1]
 80043c2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80043c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d1da      	bne.n	8004384 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	3308      	adds	r3, #8
 80043d4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80043d8:	e853 3f00 	ldrex	r3, [r3]
 80043dc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80043de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80043e0:	f023 0301 	bic.w	r3, r3, #1
 80043e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	3308      	adds	r3, #8
 80043ee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80043f2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80043f6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043f8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80043fa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80043fe:	e841 2300 	strex	r3, r2, [r1]
 8004402:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004404:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004406:	2b00      	cmp	r3, #0
 8004408:	d1e1      	bne.n	80043ce <HAL_UART_IRQHandler+0x366>
=======
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
      if ((nb_remaining_rx_data > 0U)
 8004362:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004366:	2b00      	cmp	r3, #0
 8004368:	f000 8150 	beq.w	800460c <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004372:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004376:	429a      	cmp	r2, r3
 8004378:	f080 8148 	bcs.w	800460c <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004382:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800438a:	69db      	ldr	r3, [r3, #28]
 800438c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004390:	f000 8086 	beq.w	80044a0 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800439c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80043a0:	e853 3f00 	ldrex	r3, [r3]
 80043a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80043a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80043ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80043b0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	461a      	mov	r2, r3
 80043ba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80043be:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80043c2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043c6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80043ca:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80043ce:	e841 2300 	strex	r3, r2, [r1]
 80043d2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80043d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d1da      	bne.n	8004394 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	3308      	adds	r3, #8
 80043e4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80043e8:	e853 3f00 	ldrex	r3, [r3]
 80043ec:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80043ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80043f0:	f023 0301 	bic.w	r3, r3, #1
 80043f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	3308      	adds	r3, #8
 80043fe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004402:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004406:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004408:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800440a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800440e:	e841 2300 	strex	r3, r2, [r1]
 8004412:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
<<<<<<< HEAD
 8004414:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004416:	2b00      	cmp	r3, #0
 8004418:	d1e1      	bne.n	80043de <HAL_UART_IRQHandler+0x366>
=======
 80043c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d1e1      	bne.n	800438a <HAL_UART_IRQHandler+0x366>
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
<<<<<<< HEAD
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	3308      	adds	r3, #8
 8004420:	663b      	str	r3, [r7, #96]	; 0x60
=======
<<<<<<< HEAD
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	3308      	adds	r3, #8
 8004410:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004412:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004414:	e853 3f00 	ldrex	r3, [r3]
 8004418:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800441a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800441c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004420:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	3308      	adds	r3, #8
 800442a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800442e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004430:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004432:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004434:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004436:	e841 2300 	strex	r3, r2, [r1]
 800443a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800443c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800443e:	2b00      	cmp	r3, #0
 8004440:	d1e3      	bne.n	800440a <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2220      	movs	r2, #32
 8004446:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2200      	movs	r2, #0
 800444e:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004456:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004458:	e853 3f00 	ldrex	r3, [r3]
 800445c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800445e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004460:	f023 0310 	bic.w	r3, r3, #16
 8004464:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	461a      	mov	r2, r3
 800446e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004472:	65bb      	str	r3, [r7, #88]	; 0x58
 8004474:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004476:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004478:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800447a:	e841 2300 	strex	r3, r2, [r1]
 800447e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004480:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004482:	2b00      	cmp	r3, #0
 8004484:	d1e4      	bne.n	8004450 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800448a:	4618      	mov	r0, r3
 800448c:	f7fd f9c4 	bl	8001818 <HAL_DMA_Abort>
=======
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	3308      	adds	r3, #8
 80043cc:	663b      	str	r3, [r7, #96]	; 0x60
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004422:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004424:	e853 3f00 	ldrex	r3, [r3]
 8004428:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800442a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800442c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004430:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	3308      	adds	r3, #8
 800443a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800443e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004440:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004442:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004444:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004446:	e841 2300 	strex	r3, r2, [r1]
 800444a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800444c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800444e:	2b00      	cmp	r3, #0
 8004450:	d1e3      	bne.n	800441a <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2220      	movs	r2, #32
 8004456:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2200      	movs	r2, #0
 800445e:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004466:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004468:	e853 3f00 	ldrex	r3, [r3]
 800446c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800446e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004470:	f023 0310 	bic.w	r3, r3, #16
 8004474:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	461a      	mov	r2, r3
 800447e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004482:	65bb      	str	r3, [r7, #88]	; 0x58
 8004484:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004486:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004488:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800448a:	e841 2300 	strex	r3, r2, [r1]
 800448e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004490:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004492:	2b00      	cmp	r3, #0
 8004494:	d1e4      	bne.n	8004460 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
<<<<<<< HEAD
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800449a:	4618      	mov	r0, r3
 800449c:	f7fd f9c4 	bl	8001828 <HAL_DMA_Abort>
=======
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004446:	4618      	mov	r0, r3
 8004448:	f7fd f9dc 	bl	8001804 <HAL_DMA_Abort>
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
<<<<<<< HEAD
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2202      	movs	r2, #2
 80044a4:	665a      	str	r2, [r3, #100]	; 0x64
=======
<<<<<<< HEAD
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2202      	movs	r2, #2
 8004494:	665a      	str	r2, [r3, #100]	; 0x64
=======
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2202      	movs	r2, #2
 8004450:	665a      	str	r2, [r3, #100]	; 0x64
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
<<<<<<< HEAD
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80044b2:	b29b      	uxth	r3, r3
 80044b4:	1ad3      	subs	r3, r2, r3
 80044b6:	b29b      	uxth	r3, r3
 80044b8:	4619      	mov	r1, r3
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	f000 f8c2 	bl	8004644 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80044c0:	e0a4      	b.n	800460c <HAL_UART_IRQHandler+0x594>
=======
<<<<<<< HEAD
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80044a2:	b29b      	uxth	r3, r3
 80044a4:	1ad3      	subs	r3, r2, r3
 80044a6:	b29b      	uxth	r3, r3
 80044a8:	4619      	mov	r1, r3
 80044aa:	6878      	ldr	r0, [r7, #4]
 80044ac:	f000 f8c2 	bl	8004634 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80044b0:	e0a4      	b.n	80045fc <HAL_UART_IRQHandler+0x594>
=======
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800445e:	b29b      	uxth	r3, r3
 8004460:	1ad3      	subs	r3, r2, r3
 8004462:	b29b      	uxth	r3, r3
 8004464:	4619      	mov	r1, r3
 8004466:	6878      	ldr	r0, [r7, #4]
 8004468:	f000 f8c2 	bl	80045f0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800446c:	e0a4      	b.n	80045b8 <HAL_UART_IRQHandler+0x594>
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
<<<<<<< HEAD
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80044ce:	b29b      	uxth	r3, r3
 80044d0:	1ad3      	subs	r3, r2, r3
 80044d2:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
=======
<<<<<<< HEAD
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80044be:	b29b      	uxth	r3, r3
 80044c0:	1ad3      	subs	r3, r2, r3
 80044c2:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80044cc:	b29b      	uxth	r3, r3
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	f000 8096 	beq.w	8004600 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 80044d4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80044d8:	2b00      	cmp	r3, #0
 80044da:	f000 8091 	beq.w	8004600 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044e6:	e853 3f00 	ldrex	r3, [r3]
 80044ea:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80044ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044ee:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80044f2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	461a      	mov	r2, r3
 80044fc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004500:	647b      	str	r3, [r7, #68]	; 0x44
 8004502:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004504:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004506:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004508:	e841 2300 	strex	r3, r2, [r1]
 800450c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800450e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004510:	2b00      	cmp	r3, #0
 8004512:	d1e4      	bne.n	80044de <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	3308      	adds	r3, #8
 800451a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800451c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800451e:	e853 3f00 	ldrex	r3, [r3]
 8004522:	623b      	str	r3, [r7, #32]
   return(result);
 8004524:	6a3b      	ldr	r3, [r7, #32]
 8004526:	f023 0301 	bic.w	r3, r3, #1
 800452a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	3308      	adds	r3, #8
 8004534:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004538:	633a      	str	r2, [r7, #48]	; 0x30
 800453a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800453c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800453e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004540:	e841 2300 	strex	r3, r2, [r1]
 8004544:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004548:	2b00      	cmp	r3, #0
 800454a:	d1e3      	bne.n	8004514 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2220      	movs	r2, #32
 8004550:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2200      	movs	r2, #0
 8004558:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2200      	movs	r2, #0
 800455e:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	e853 3f00 	ldrex	r3, [r3]
 800456c:	60fb      	str	r3, [r7, #12]
   return(result);
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	f023 0310 	bic.w	r3, r3, #16
 8004574:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	461a      	mov	r2, r3
 800457e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004582:	61fb      	str	r3, [r7, #28]
 8004584:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004586:	69b9      	ldr	r1, [r7, #24]
 8004588:	69fa      	ldr	r2, [r7, #28]
 800458a:	e841 2300 	strex	r3, r2, [r1]
 800458e:	617b      	str	r3, [r7, #20]
   return(result);
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d1e4      	bne.n	8004560 <HAL_UART_IRQHandler+0x4f8>
=======
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800447a:	b29b      	uxth	r3, r3
 800447c:	1ad3      	subs	r3, r2, r3
 800447e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
      if ((huart->RxXferCount > 0U)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80044dc:	b29b      	uxth	r3, r3
 80044de:	2b00      	cmp	r3, #0
 80044e0:	f000 8096 	beq.w	8004610 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 80044e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	f000 8091 	beq.w	8004610 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044f6:	e853 3f00 	ldrex	r3, [r3]
 80044fa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80044fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044fe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004502:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	461a      	mov	r2, r3
 800450c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004510:	647b      	str	r3, [r7, #68]	; 0x44
 8004512:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004514:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004516:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004518:	e841 2300 	strex	r3, r2, [r1]
 800451c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800451e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004520:	2b00      	cmp	r3, #0
 8004522:	d1e4      	bne.n	80044ee <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	3308      	adds	r3, #8
 800452a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800452c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800452e:	e853 3f00 	ldrex	r3, [r3]
 8004532:	623b      	str	r3, [r7, #32]
   return(result);
 8004534:	6a3b      	ldr	r3, [r7, #32]
 8004536:	f023 0301 	bic.w	r3, r3, #1
 800453a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	3308      	adds	r3, #8
 8004544:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004548:	633a      	str	r2, [r7, #48]	; 0x30
 800454a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800454c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800454e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004550:	e841 2300 	strex	r3, r2, [r1]
 8004554:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004558:	2b00      	cmp	r3, #0
 800455a:	d1e3      	bne.n	8004524 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2220      	movs	r2, #32
 8004560:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2200      	movs	r2, #0
 8004568:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2200      	movs	r2, #0
 800456e:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	e853 3f00 	ldrex	r3, [r3]
 800457c:	60fb      	str	r3, [r7, #12]
   return(result);
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	f023 0310 	bic.w	r3, r3, #16
 8004584:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	461a      	mov	r2, r3
 800458e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004592:	61fb      	str	r3, [r7, #28]
 8004594:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004596:	69b9      	ldr	r1, [r7, #24]
 8004598:	69fa      	ldr	r2, [r7, #28]
 800459a:	e841 2300 	strex	r3, r2, [r1]
 800459e:	617b      	str	r3, [r7, #20]
   return(result);
<<<<<<< HEAD
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d1e4      	bne.n	8004570 <HAL_UART_IRQHandler+0x4f8>
=======
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d1e4      	bne.n	800451c <HAL_UART_IRQHandler+0x4f8>
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
<<<<<<< HEAD
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2202      	movs	r2, #2
 80045aa:	665a      	str	r2, [r3, #100]	; 0x64
=======
<<<<<<< HEAD
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2202      	movs	r2, #2
 800459a:	665a      	str	r2, [r3, #100]	; 0x64
=======
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2202      	movs	r2, #2
 8004556:	665a      	str	r2, [r3, #100]	; 0x64
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
<<<<<<< HEAD
 80045ac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80045b0:	4619      	mov	r1, r3
 80045b2:	6878      	ldr	r0, [r7, #4]
 80045b4:	f000 f846 	bl	8004644 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80045b8:	e02a      	b.n	8004610 <HAL_UART_IRQHandler+0x598>
=======
<<<<<<< HEAD
 800459c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80045a0:	4619      	mov	r1, r3
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	f000 f846 	bl	8004634 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80045a8:	e02a      	b.n	8004600 <HAL_UART_IRQHandler+0x598>
=======
 8004558:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800455c:	4619      	mov	r1, r3
 800455e:	6878      	ldr	r0, [r7, #4]
 8004560:	f000 f846 	bl	80045f0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004564:	e02a      	b.n	80045bc <HAL_UART_IRQHandler+0x598>
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
<<<<<<< HEAD
 80045ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d00e      	beq.n	80045e4 <HAL_UART_IRQHandler+0x56c>
=======
<<<<<<< HEAD
 80045aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d00e      	beq.n	80045d4 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80045b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d008      	beq.n	80045d4 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d01c      	beq.n	8004604 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045ce:	6878      	ldr	r0, [r7, #4]
 80045d0:	4798      	blx	r3
    }
    return;
 80045d2:	e017      	b.n	8004604 <HAL_UART_IRQHandler+0x59c>
=======
 8004566:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800456a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800456e:	2b00      	cmp	r3, #0
 8004570:	d00e      	beq.n	8004590 <HAL_UART_IRQHandler+0x56c>
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80045c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d008      	beq.n	80045e4 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d01c      	beq.n	8004614 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045de:	6878      	ldr	r0, [r7, #4]
 80045e0:	4798      	blx	r3
    }
    return;
<<<<<<< HEAD
 80045e2:	e017      	b.n	8004614 <HAL_UART_IRQHandler+0x59c>
=======
 800458e:	e017      	b.n	80045c0 <HAL_UART_IRQHandler+0x59c>
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
<<<<<<< HEAD
 80045e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d012      	beq.n	8004616 <HAL_UART_IRQHandler+0x59e>
 80045f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d00c      	beq.n	8004616 <HAL_UART_IRQHandler+0x59e>
=======
<<<<<<< HEAD
 80045d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d012      	beq.n	8004606 <HAL_UART_IRQHandler+0x59e>
 80045e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d00c      	beq.n	8004606 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 80045ec:	6878      	ldr	r0, [r7, #4]
 80045ee:	f000 fcaa 	bl	8004f46 <UART_EndTransmit_IT>
    return;
 80045f2:	e008      	b.n	8004606 <HAL_UART_IRQHandler+0x59e>
      return;
 80045f4:	bf00      	nop
 80045f6:	e006      	b.n	8004606 <HAL_UART_IRQHandler+0x59e>
    return;
 80045f8:	bf00      	nop
 80045fa:	e004      	b.n	8004606 <HAL_UART_IRQHandler+0x59e>
      return;
 80045fc:	bf00      	nop
 80045fe:	e002      	b.n	8004606 <HAL_UART_IRQHandler+0x59e>
      return;
 8004600:	bf00      	nop
 8004602:	e000      	b.n	8004606 <HAL_UART_IRQHandler+0x59e>
    return;
 8004604:	bf00      	nop
  }

}
 8004606:	37e8      	adds	r7, #232	; 0xe8
 8004608:	46bd      	mov	sp, r7
 800460a:	bd80      	pop	{r7, pc}

0800460c <HAL_UART_TxCpltCallback>:
=======
 8004590:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004594:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004598:	2b00      	cmp	r3, #0
 800459a:	d012      	beq.n	80045c2 <HAL_UART_IRQHandler+0x59e>
 800459c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d00c      	beq.n	80045c2 <HAL_UART_IRQHandler+0x59e>
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  {
    UART_EndTransmit_IT(huart);
 80045fc:	6878      	ldr	r0, [r7, #4]
 80045fe:	f000 fcaa 	bl	8004f56 <UART_EndTransmit_IT>
    return;
 8004602:	e008      	b.n	8004616 <HAL_UART_IRQHandler+0x59e>
      return;
 8004604:	bf00      	nop
 8004606:	e006      	b.n	8004616 <HAL_UART_IRQHandler+0x59e>
    return;
 8004608:	bf00      	nop
 800460a:	e004      	b.n	8004616 <HAL_UART_IRQHandler+0x59e>
      return;
 800460c:	bf00      	nop
 800460e:	e002      	b.n	8004616 <HAL_UART_IRQHandler+0x59e>
      return;
 8004610:	bf00      	nop
 8004612:	e000      	b.n	8004616 <HAL_UART_IRQHandler+0x59e>
    return;
 8004614:	bf00      	nop
  }

}
 8004616:	37e8      	adds	r7, #232	; 0xe8
 8004618:	46bd      	mov	sp, r7
 800461a:	bd80      	pop	{r7, pc}

<<<<<<< HEAD
0800461c <HAL_UART_TxCpltCallback>:
=======
080045c8 <HAL_UART_TxCpltCallback>:
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 800461c:	b480      	push	{r7}
 800461e:	b083      	sub	sp, #12
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
=======
<<<<<<< HEAD
 800460c:	b480      	push	{r7}
 800460e:	b083      	sub	sp, #12
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
=======
 80045c8:	b480      	push	{r7}
 80045ca:	b083      	sub	sp, #12
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
<<<<<<< HEAD
 8004624:	bf00      	nop
 8004626:	370c      	adds	r7, #12
 8004628:	46bd      	mov	sp, r7
 800462a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462e:	4770      	bx	lr

08004630 <HAL_UART_ErrorCallback>:
=======
<<<<<<< HEAD
 8004614:	bf00      	nop
 8004616:	370c      	adds	r7, #12
 8004618:	46bd      	mov	sp, r7
 800461a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461e:	4770      	bx	lr

08004620 <HAL_UART_ErrorCallback>:
=======
 80045d0:	bf00      	nop
 80045d2:	370c      	adds	r7, #12
 80045d4:	46bd      	mov	sp, r7
 80045d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045da:	4770      	bx	lr

080045dc <HAL_UART_ErrorCallback>:
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8004630:	b480      	push	{r7}
 8004632:	b083      	sub	sp, #12
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
=======
<<<<<<< HEAD
 8004620:	b480      	push	{r7}
 8004622:	b083      	sub	sp, #12
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
=======
 80045dc:	b480      	push	{r7}
 80045de:	b083      	sub	sp, #12
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
<<<<<<< HEAD
 8004638:	bf00      	nop
 800463a:	370c      	adds	r7, #12
 800463c:	46bd      	mov	sp, r7
 800463e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004642:	4770      	bx	lr

08004644 <HAL_UARTEx_RxEventCallback>:
=======
<<<<<<< HEAD
 8004628:	bf00      	nop
 800462a:	370c      	adds	r7, #12
 800462c:	46bd      	mov	sp, r7
 800462e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004632:	4770      	bx	lr

08004634 <HAL_UARTEx_RxEventCallback>:
=======
 80045e4:	bf00      	nop
 80045e6:	370c      	adds	r7, #12
 80045e8:	46bd      	mov	sp, r7
 80045ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ee:	4770      	bx	lr

080045f0 <HAL_UARTEx_RxEventCallback>:
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
<<<<<<< HEAD
 8004644:	b480      	push	{r7}
 8004646:	b083      	sub	sp, #12
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
 800464c:	460b      	mov	r3, r1
 800464e:	807b      	strh	r3, [r7, #2]
=======
<<<<<<< HEAD
 8004634:	b480      	push	{r7}
 8004636:	b083      	sub	sp, #12
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
 800463c:	460b      	mov	r3, r1
 800463e:	807b      	strh	r3, [r7, #2]
=======
 80045f0:	b480      	push	{r7}
 80045f2:	b083      	sub	sp, #12
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
 80045f8:	460b      	mov	r3, r1
 80045fa:	807b      	strh	r3, [r7, #2]
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
<<<<<<< HEAD
 8004650:	bf00      	nop
 8004652:	370c      	adds	r7, #12
 8004654:	46bd      	mov	sp, r7
 8004656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465a:	4770      	bx	lr

0800465c <UART_SetConfig>:
=======
<<<<<<< HEAD
 8004640:	bf00      	nop
 8004642:	370c      	adds	r7, #12
 8004644:	46bd      	mov	sp, r7
 8004646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464a:	4770      	bx	lr

0800464c <UART_SetConfig>:
=======
 80045fc:	bf00      	nop
 80045fe:	370c      	adds	r7, #12
 8004600:	46bd      	mov	sp, r7
 8004602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004606:	4770      	bx	lr

08004608 <UART_SetConfig>:
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 800465c:	b580      	push	{r7, lr}
 800465e:	b088      	sub	sp, #32
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
=======
<<<<<<< HEAD
 800464c:	b580      	push	{r7, lr}
 800464e:	b088      	sub	sp, #32
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
=======
 8004608:	b580      	push	{r7, lr}
 800460a:	b088      	sub	sp, #32
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
<<<<<<< HEAD
 8004664:	2300      	movs	r3, #0
 8004666:	77bb      	strb	r3, [r7, #30]
=======
<<<<<<< HEAD
 8004654:	2300      	movs	r3, #0
 8004656:	77bb      	strb	r3, [r7, #30]
=======
 8004610:	2300      	movs	r3, #0
 8004612:	77bb      	strb	r3, [r7, #30]
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
<<<<<<< HEAD
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	689a      	ldr	r2, [r3, #8]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	691b      	ldr	r3, [r3, #16]
 8004670:	431a      	orrs	r2, r3
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	695b      	ldr	r3, [r3, #20]
 8004676:	431a      	orrs	r2, r3
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	69db      	ldr	r3, [r3, #28]
 800467c:	4313      	orrs	r3, r2
 800467e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	681a      	ldr	r2, [r3, #0]
 8004686:	4ba6      	ldr	r3, [pc, #664]	; (8004920 <UART_SetConfig+0x2c4>)
 8004688:	4013      	ands	r3, r2
 800468a:	687a      	ldr	r2, [r7, #4]
 800468c:	6812      	ldr	r2, [r2, #0]
 800468e:	6979      	ldr	r1, [r7, #20]
 8004690:	430b      	orrs	r3, r1
 8004692:	6013      	str	r3, [r2, #0]
=======
<<<<<<< HEAD
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	689a      	ldr	r2, [r3, #8]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	691b      	ldr	r3, [r3, #16]
 8004660:	431a      	orrs	r2, r3
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	695b      	ldr	r3, [r3, #20]
 8004666:	431a      	orrs	r2, r3
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	69db      	ldr	r3, [r3, #28]
 800466c:	4313      	orrs	r3, r2
 800466e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	681a      	ldr	r2, [r3, #0]
 8004676:	4ba6      	ldr	r3, [pc, #664]	; (8004910 <UART_SetConfig+0x2c4>)
 8004678:	4013      	ands	r3, r2
 800467a:	687a      	ldr	r2, [r7, #4]
 800467c:	6812      	ldr	r2, [r2, #0]
 800467e:	6979      	ldr	r1, [r7, #20]
 8004680:	430b      	orrs	r3, r1
 8004682:	6013      	str	r3, [r2, #0]
=======
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	689a      	ldr	r2, [r3, #8]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	691b      	ldr	r3, [r3, #16]
 800461c:	431a      	orrs	r2, r3
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	695b      	ldr	r3, [r3, #20]
 8004622:	431a      	orrs	r2, r3
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	69db      	ldr	r3, [r3, #28]
 8004628:	4313      	orrs	r3, r2
 800462a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	681a      	ldr	r2, [r3, #0]
 8004632:	4ba6      	ldr	r3, [pc, #664]	; (80048cc <UART_SetConfig+0x2c4>)
 8004634:	4013      	ands	r3, r2
 8004636:	687a      	ldr	r2, [r7, #4]
 8004638:	6812      	ldr	r2, [r2, #0]
 800463a:	6979      	ldr	r1, [r7, #20]
 800463c:	430b      	orrs	r3, r1
 800463e:	6013      	str	r3, [r2, #0]
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
<<<<<<< HEAD
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	68da      	ldr	r2, [r3, #12]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	430a      	orrs	r2, r1
 80046a8:	605a      	str	r2, [r3, #4]
=======
<<<<<<< HEAD
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	68da      	ldr	r2, [r3, #12]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	430a      	orrs	r2, r1
 8004698:	605a      	str	r2, [r3, #4]
=======
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	68da      	ldr	r2, [r3, #12]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	430a      	orrs	r2, r1
 8004654:	605a      	str	r2, [r3, #4]
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
<<<<<<< HEAD
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	699b      	ldr	r3, [r3, #24]
 80046ae:	617b      	str	r3, [r7, #20]
=======
<<<<<<< HEAD
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	699b      	ldr	r3, [r3, #24]
 800469e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6a1b      	ldr	r3, [r3, #32]
 80046a4:	697a      	ldr	r2, [r7, #20]
 80046a6:	4313      	orrs	r3, r2
 80046a8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	689b      	ldr	r3, [r3, #8]
 80046b0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	697a      	ldr	r2, [r7, #20]
 80046ba:	430a      	orrs	r2, r1
 80046bc:	609a      	str	r2, [r3, #8]
=======
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	699b      	ldr	r3, [r3, #24]
 800465a:	617b      	str	r3, [r7, #20]
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637

  tmpreg |= huart->Init.OneBitSampling;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6a1b      	ldr	r3, [r3, #32]
 80046b4:	697a      	ldr	r2, [r7, #20]
 80046b6:	4313      	orrs	r3, r2
 80046b8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
<<<<<<< HEAD
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	689b      	ldr	r3, [r3, #8]
 80046c0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	697a      	ldr	r2, [r7, #20]
 80046ca:	430a      	orrs	r2, r1
 80046cc:	609a      	str	r2, [r3, #8]
=======
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	689b      	ldr	r3, [r3, #8]
 800466c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	697a      	ldr	r2, [r7, #20]
 8004676:	430a      	orrs	r2, r1
 8004678:	609a      	str	r2, [r3, #8]
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
<<<<<<< HEAD
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a94      	ldr	r2, [pc, #592]	; (8004924 <UART_SetConfig+0x2c8>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d120      	bne.n	800471a <UART_SetConfig+0xbe>
 80046d8:	4b93      	ldr	r3, [pc, #588]	; (8004928 <UART_SetConfig+0x2cc>)
 80046da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046de:	f003 0303 	and.w	r3, r3, #3
 80046e2:	2b03      	cmp	r3, #3
 80046e4:	d816      	bhi.n	8004714 <UART_SetConfig+0xb8>
 80046e6:	a201      	add	r2, pc, #4	; (adr r2, 80046ec <UART_SetConfig+0x90>)
 80046e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046ec:	080046fd 	.word	0x080046fd
 80046f0:	08004709 	.word	0x08004709
 80046f4:	08004703 	.word	0x08004703
 80046f8:	0800470f 	.word	0x0800470f
 80046fc:	2301      	movs	r3, #1
 80046fe:	77fb      	strb	r3, [r7, #31]
 8004700:	e150      	b.n	80049a4 <UART_SetConfig+0x348>
 8004702:	2302      	movs	r3, #2
 8004704:	77fb      	strb	r3, [r7, #31]
 8004706:	e14d      	b.n	80049a4 <UART_SetConfig+0x348>
 8004708:	2304      	movs	r3, #4
 800470a:	77fb      	strb	r3, [r7, #31]
 800470c:	e14a      	b.n	80049a4 <UART_SetConfig+0x348>
 800470e:	2308      	movs	r3, #8
 8004710:	77fb      	strb	r3, [r7, #31]
 8004712:	e147      	b.n	80049a4 <UART_SetConfig+0x348>
 8004714:	2310      	movs	r3, #16
 8004716:	77fb      	strb	r3, [r7, #31]
 8004718:	e144      	b.n	80049a4 <UART_SetConfig+0x348>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a83      	ldr	r2, [pc, #524]	; (800492c <UART_SetConfig+0x2d0>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d132      	bne.n	800478a <UART_SetConfig+0x12e>
 8004724:	4b80      	ldr	r3, [pc, #512]	; (8004928 <UART_SetConfig+0x2cc>)
 8004726:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800472a:	f003 030c 	and.w	r3, r3, #12
 800472e:	2b0c      	cmp	r3, #12
 8004730:	d828      	bhi.n	8004784 <UART_SetConfig+0x128>
 8004732:	a201      	add	r2, pc, #4	; (adr r2, 8004738 <UART_SetConfig+0xdc>)
 8004734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004738:	0800476d 	.word	0x0800476d
 800473c:	08004785 	.word	0x08004785
 8004740:	08004785 	.word	0x08004785
 8004744:	08004785 	.word	0x08004785
 8004748:	08004779 	.word	0x08004779
 800474c:	08004785 	.word	0x08004785
 8004750:	08004785 	.word	0x08004785
 8004754:	08004785 	.word	0x08004785
 8004758:	08004773 	.word	0x08004773
 800475c:	08004785 	.word	0x08004785
 8004760:	08004785 	.word	0x08004785
 8004764:	08004785 	.word	0x08004785
 8004768:	0800477f 	.word	0x0800477f
 800476c:	2300      	movs	r3, #0
 800476e:	77fb      	strb	r3, [r7, #31]
 8004770:	e118      	b.n	80049a4 <UART_SetConfig+0x348>
 8004772:	2302      	movs	r3, #2
 8004774:	77fb      	strb	r3, [r7, #31]
 8004776:	e115      	b.n	80049a4 <UART_SetConfig+0x348>
 8004778:	2304      	movs	r3, #4
 800477a:	77fb      	strb	r3, [r7, #31]
 800477c:	e112      	b.n	80049a4 <UART_SetConfig+0x348>
 800477e:	2308      	movs	r3, #8
 8004780:	77fb      	strb	r3, [r7, #31]
 8004782:	e10f      	b.n	80049a4 <UART_SetConfig+0x348>
 8004784:	2310      	movs	r3, #16
 8004786:	77fb      	strb	r3, [r7, #31]
 8004788:	e10c      	b.n	80049a4 <UART_SetConfig+0x348>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4a68      	ldr	r2, [pc, #416]	; (8004930 <UART_SetConfig+0x2d4>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d120      	bne.n	80047d6 <UART_SetConfig+0x17a>
 8004794:	4b64      	ldr	r3, [pc, #400]	; (8004928 <UART_SetConfig+0x2cc>)
 8004796:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800479a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800479e:	2b30      	cmp	r3, #48	; 0x30
 80047a0:	d013      	beq.n	80047ca <UART_SetConfig+0x16e>
 80047a2:	2b30      	cmp	r3, #48	; 0x30
 80047a4:	d814      	bhi.n	80047d0 <UART_SetConfig+0x174>
 80047a6:	2b20      	cmp	r3, #32
 80047a8:	d009      	beq.n	80047be <UART_SetConfig+0x162>
 80047aa:	2b20      	cmp	r3, #32
 80047ac:	d810      	bhi.n	80047d0 <UART_SetConfig+0x174>
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d002      	beq.n	80047b8 <UART_SetConfig+0x15c>
 80047b2:	2b10      	cmp	r3, #16
 80047b4:	d006      	beq.n	80047c4 <UART_SetConfig+0x168>
 80047b6:	e00b      	b.n	80047d0 <UART_SetConfig+0x174>
 80047b8:	2300      	movs	r3, #0
 80047ba:	77fb      	strb	r3, [r7, #31]
 80047bc:	e0f2      	b.n	80049a4 <UART_SetConfig+0x348>
 80047be:	2302      	movs	r3, #2
 80047c0:	77fb      	strb	r3, [r7, #31]
 80047c2:	e0ef      	b.n	80049a4 <UART_SetConfig+0x348>
 80047c4:	2304      	movs	r3, #4
 80047c6:	77fb      	strb	r3, [r7, #31]
 80047c8:	e0ec      	b.n	80049a4 <UART_SetConfig+0x348>
 80047ca:	2308      	movs	r3, #8
 80047cc:	77fb      	strb	r3, [r7, #31]
 80047ce:	e0e9      	b.n	80049a4 <UART_SetConfig+0x348>
 80047d0:	2310      	movs	r3, #16
 80047d2:	77fb      	strb	r3, [r7, #31]
 80047d4:	e0e6      	b.n	80049a4 <UART_SetConfig+0x348>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4a56      	ldr	r2, [pc, #344]	; (8004934 <UART_SetConfig+0x2d8>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d120      	bne.n	8004822 <UART_SetConfig+0x1c6>
 80047e0:	4b51      	ldr	r3, [pc, #324]	; (8004928 <UART_SetConfig+0x2cc>)
 80047e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047e6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80047ea:	2bc0      	cmp	r3, #192	; 0xc0
 80047ec:	d013      	beq.n	8004816 <UART_SetConfig+0x1ba>
 80047ee:	2bc0      	cmp	r3, #192	; 0xc0
 80047f0:	d814      	bhi.n	800481c <UART_SetConfig+0x1c0>
 80047f2:	2b80      	cmp	r3, #128	; 0x80
 80047f4:	d009      	beq.n	800480a <UART_SetConfig+0x1ae>
 80047f6:	2b80      	cmp	r3, #128	; 0x80
 80047f8:	d810      	bhi.n	800481c <UART_SetConfig+0x1c0>
=======
<<<<<<< HEAD
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a94      	ldr	r2, [pc, #592]	; (8004914 <UART_SetConfig+0x2c8>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d120      	bne.n	800470a <UART_SetConfig+0xbe>
 80046c8:	4b93      	ldr	r3, [pc, #588]	; (8004918 <UART_SetConfig+0x2cc>)
 80046ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046ce:	f003 0303 	and.w	r3, r3, #3
 80046d2:	2b03      	cmp	r3, #3
 80046d4:	d816      	bhi.n	8004704 <UART_SetConfig+0xb8>
 80046d6:	a201      	add	r2, pc, #4	; (adr r2, 80046dc <UART_SetConfig+0x90>)
 80046d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046dc:	080046ed 	.word	0x080046ed
 80046e0:	080046f9 	.word	0x080046f9
 80046e4:	080046f3 	.word	0x080046f3
 80046e8:	080046ff 	.word	0x080046ff
 80046ec:	2301      	movs	r3, #1
 80046ee:	77fb      	strb	r3, [r7, #31]
 80046f0:	e150      	b.n	8004994 <UART_SetConfig+0x348>
 80046f2:	2302      	movs	r3, #2
 80046f4:	77fb      	strb	r3, [r7, #31]
 80046f6:	e14d      	b.n	8004994 <UART_SetConfig+0x348>
 80046f8:	2304      	movs	r3, #4
 80046fa:	77fb      	strb	r3, [r7, #31]
 80046fc:	e14a      	b.n	8004994 <UART_SetConfig+0x348>
 80046fe:	2308      	movs	r3, #8
 8004700:	77fb      	strb	r3, [r7, #31]
 8004702:	e147      	b.n	8004994 <UART_SetConfig+0x348>
 8004704:	2310      	movs	r3, #16
 8004706:	77fb      	strb	r3, [r7, #31]
 8004708:	e144      	b.n	8004994 <UART_SetConfig+0x348>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a83      	ldr	r2, [pc, #524]	; (800491c <UART_SetConfig+0x2d0>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d132      	bne.n	800477a <UART_SetConfig+0x12e>
 8004714:	4b80      	ldr	r3, [pc, #512]	; (8004918 <UART_SetConfig+0x2cc>)
 8004716:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800471a:	f003 030c 	and.w	r3, r3, #12
 800471e:	2b0c      	cmp	r3, #12
 8004720:	d828      	bhi.n	8004774 <UART_SetConfig+0x128>
 8004722:	a201      	add	r2, pc, #4	; (adr r2, 8004728 <UART_SetConfig+0xdc>)
 8004724:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004728:	0800475d 	.word	0x0800475d
 800472c:	08004775 	.word	0x08004775
 8004730:	08004775 	.word	0x08004775
 8004734:	08004775 	.word	0x08004775
 8004738:	08004769 	.word	0x08004769
 800473c:	08004775 	.word	0x08004775
 8004740:	08004775 	.word	0x08004775
 8004744:	08004775 	.word	0x08004775
 8004748:	08004763 	.word	0x08004763
 800474c:	08004775 	.word	0x08004775
 8004750:	08004775 	.word	0x08004775
 8004754:	08004775 	.word	0x08004775
 8004758:	0800476f 	.word	0x0800476f
 800475c:	2300      	movs	r3, #0
 800475e:	77fb      	strb	r3, [r7, #31]
 8004760:	e118      	b.n	8004994 <UART_SetConfig+0x348>
 8004762:	2302      	movs	r3, #2
 8004764:	77fb      	strb	r3, [r7, #31]
 8004766:	e115      	b.n	8004994 <UART_SetConfig+0x348>
 8004768:	2304      	movs	r3, #4
 800476a:	77fb      	strb	r3, [r7, #31]
 800476c:	e112      	b.n	8004994 <UART_SetConfig+0x348>
 800476e:	2308      	movs	r3, #8
 8004770:	77fb      	strb	r3, [r7, #31]
 8004772:	e10f      	b.n	8004994 <UART_SetConfig+0x348>
 8004774:	2310      	movs	r3, #16
 8004776:	77fb      	strb	r3, [r7, #31]
 8004778:	e10c      	b.n	8004994 <UART_SetConfig+0x348>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a68      	ldr	r2, [pc, #416]	; (8004920 <UART_SetConfig+0x2d4>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d120      	bne.n	80047c6 <UART_SetConfig+0x17a>
 8004784:	4b64      	ldr	r3, [pc, #400]	; (8004918 <UART_SetConfig+0x2cc>)
 8004786:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800478a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800478e:	2b30      	cmp	r3, #48	; 0x30
 8004790:	d013      	beq.n	80047ba <UART_SetConfig+0x16e>
 8004792:	2b30      	cmp	r3, #48	; 0x30
 8004794:	d814      	bhi.n	80047c0 <UART_SetConfig+0x174>
 8004796:	2b20      	cmp	r3, #32
 8004798:	d009      	beq.n	80047ae <UART_SetConfig+0x162>
 800479a:	2b20      	cmp	r3, #32
 800479c:	d810      	bhi.n	80047c0 <UART_SetConfig+0x174>
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d002      	beq.n	80047a8 <UART_SetConfig+0x15c>
 80047a2:	2b10      	cmp	r3, #16
 80047a4:	d006      	beq.n	80047b4 <UART_SetConfig+0x168>
 80047a6:	e00b      	b.n	80047c0 <UART_SetConfig+0x174>
 80047a8:	2300      	movs	r3, #0
 80047aa:	77fb      	strb	r3, [r7, #31]
 80047ac:	e0f2      	b.n	8004994 <UART_SetConfig+0x348>
 80047ae:	2302      	movs	r3, #2
 80047b0:	77fb      	strb	r3, [r7, #31]
 80047b2:	e0ef      	b.n	8004994 <UART_SetConfig+0x348>
 80047b4:	2304      	movs	r3, #4
 80047b6:	77fb      	strb	r3, [r7, #31]
 80047b8:	e0ec      	b.n	8004994 <UART_SetConfig+0x348>
 80047ba:	2308      	movs	r3, #8
 80047bc:	77fb      	strb	r3, [r7, #31]
 80047be:	e0e9      	b.n	8004994 <UART_SetConfig+0x348>
 80047c0:	2310      	movs	r3, #16
 80047c2:	77fb      	strb	r3, [r7, #31]
 80047c4:	e0e6      	b.n	8004994 <UART_SetConfig+0x348>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a56      	ldr	r2, [pc, #344]	; (8004924 <UART_SetConfig+0x2d8>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d120      	bne.n	8004812 <UART_SetConfig+0x1c6>
 80047d0:	4b51      	ldr	r3, [pc, #324]	; (8004918 <UART_SetConfig+0x2cc>)
 80047d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047d6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80047da:	2bc0      	cmp	r3, #192	; 0xc0
 80047dc:	d013      	beq.n	8004806 <UART_SetConfig+0x1ba>
 80047de:	2bc0      	cmp	r3, #192	; 0xc0
 80047e0:	d814      	bhi.n	800480c <UART_SetConfig+0x1c0>
 80047e2:	2b80      	cmp	r3, #128	; 0x80
 80047e4:	d009      	beq.n	80047fa <UART_SetConfig+0x1ae>
 80047e6:	2b80      	cmp	r3, #128	; 0x80
 80047e8:	d810      	bhi.n	800480c <UART_SetConfig+0x1c0>
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d002      	beq.n	80047f4 <UART_SetConfig+0x1a8>
 80047ee:	2b40      	cmp	r3, #64	; 0x40
 80047f0:	d006      	beq.n	8004800 <UART_SetConfig+0x1b4>
 80047f2:	e00b      	b.n	800480c <UART_SetConfig+0x1c0>
 80047f4:	2300      	movs	r3, #0
 80047f6:	77fb      	strb	r3, [r7, #31]
 80047f8:	e0cc      	b.n	8004994 <UART_SetConfig+0x348>
 80047fa:	2302      	movs	r3, #2
 80047fc:	77fb      	strb	r3, [r7, #31]
 80047fe:	e0c9      	b.n	8004994 <UART_SetConfig+0x348>
 8004800:	2304      	movs	r3, #4
 8004802:	77fb      	strb	r3, [r7, #31]
 8004804:	e0c6      	b.n	8004994 <UART_SetConfig+0x348>
 8004806:	2308      	movs	r3, #8
 8004808:	77fb      	strb	r3, [r7, #31]
 800480a:	e0c3      	b.n	8004994 <UART_SetConfig+0x348>
 800480c:	2310      	movs	r3, #16
 800480e:	77fb      	strb	r3, [r7, #31]
 8004810:	e0c0      	b.n	8004994 <UART_SetConfig+0x348>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4a44      	ldr	r2, [pc, #272]	; (8004928 <UART_SetConfig+0x2dc>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d125      	bne.n	8004868 <UART_SetConfig+0x21c>
 800481c:	4b3e      	ldr	r3, [pc, #248]	; (8004918 <UART_SetConfig+0x2cc>)
 800481e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004822:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004826:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800482a:	d017      	beq.n	800485c <UART_SetConfig+0x210>
 800482c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004830:	d817      	bhi.n	8004862 <UART_SetConfig+0x216>
 8004832:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004836:	d00b      	beq.n	8004850 <UART_SetConfig+0x204>
 8004838:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800483c:	d811      	bhi.n	8004862 <UART_SetConfig+0x216>
 800483e:	2b00      	cmp	r3, #0
 8004840:	d003      	beq.n	800484a <UART_SetConfig+0x1fe>
 8004842:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004846:	d006      	beq.n	8004856 <UART_SetConfig+0x20a>
 8004848:	e00b      	b.n	8004862 <UART_SetConfig+0x216>
 800484a:	2300      	movs	r3, #0
 800484c:	77fb      	strb	r3, [r7, #31]
 800484e:	e0a1      	b.n	8004994 <UART_SetConfig+0x348>
 8004850:	2302      	movs	r3, #2
 8004852:	77fb      	strb	r3, [r7, #31]
 8004854:	e09e      	b.n	8004994 <UART_SetConfig+0x348>
 8004856:	2304      	movs	r3, #4
 8004858:	77fb      	strb	r3, [r7, #31]
 800485a:	e09b      	b.n	8004994 <UART_SetConfig+0x348>
 800485c:	2308      	movs	r3, #8
 800485e:	77fb      	strb	r3, [r7, #31]
 8004860:	e098      	b.n	8004994 <UART_SetConfig+0x348>
 8004862:	2310      	movs	r3, #16
 8004864:	77fb      	strb	r3, [r7, #31]
 8004866:	e095      	b.n	8004994 <UART_SetConfig+0x348>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4a2f      	ldr	r2, [pc, #188]	; (800492c <UART_SetConfig+0x2e0>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d125      	bne.n	80048be <UART_SetConfig+0x272>
 8004872:	4b29      	ldr	r3, [pc, #164]	; (8004918 <UART_SetConfig+0x2cc>)
 8004874:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004878:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800487c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004880:	d017      	beq.n	80048b2 <UART_SetConfig+0x266>
 8004882:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004886:	d817      	bhi.n	80048b8 <UART_SetConfig+0x26c>
 8004888:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800488c:	d00b      	beq.n	80048a6 <UART_SetConfig+0x25a>
 800488e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004892:	d811      	bhi.n	80048b8 <UART_SetConfig+0x26c>
 8004894:	2b00      	cmp	r3, #0
 8004896:	d003      	beq.n	80048a0 <UART_SetConfig+0x254>
 8004898:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800489c:	d006      	beq.n	80048ac <UART_SetConfig+0x260>
 800489e:	e00b      	b.n	80048b8 <UART_SetConfig+0x26c>
 80048a0:	2301      	movs	r3, #1
 80048a2:	77fb      	strb	r3, [r7, #31]
 80048a4:	e076      	b.n	8004994 <UART_SetConfig+0x348>
 80048a6:	2302      	movs	r3, #2
 80048a8:	77fb      	strb	r3, [r7, #31]
 80048aa:	e073      	b.n	8004994 <UART_SetConfig+0x348>
 80048ac:	2304      	movs	r3, #4
 80048ae:	77fb      	strb	r3, [r7, #31]
 80048b0:	e070      	b.n	8004994 <UART_SetConfig+0x348>
 80048b2:	2308      	movs	r3, #8
 80048b4:	77fb      	strb	r3, [r7, #31]
 80048b6:	e06d      	b.n	8004994 <UART_SetConfig+0x348>
 80048b8:	2310      	movs	r3, #16
 80048ba:	77fb      	strb	r3, [r7, #31]
 80048bc:	e06a      	b.n	8004994 <UART_SetConfig+0x348>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a1b      	ldr	r2, [pc, #108]	; (8004930 <UART_SetConfig+0x2e4>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d138      	bne.n	800493a <UART_SetConfig+0x2ee>
 80048c8:	4b13      	ldr	r3, [pc, #76]	; (8004918 <UART_SetConfig+0x2cc>)
 80048ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048ce:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80048d2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80048d6:	d017      	beq.n	8004908 <UART_SetConfig+0x2bc>
 80048d8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80048dc:	d82a      	bhi.n	8004934 <UART_SetConfig+0x2e8>
 80048de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048e2:	d00b      	beq.n	80048fc <UART_SetConfig+0x2b0>
 80048e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048e8:	d824      	bhi.n	8004934 <UART_SetConfig+0x2e8>
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d003      	beq.n	80048f6 <UART_SetConfig+0x2aa>
 80048ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048f2:	d006      	beq.n	8004902 <UART_SetConfig+0x2b6>
 80048f4:	e01e      	b.n	8004934 <UART_SetConfig+0x2e8>
 80048f6:	2300      	movs	r3, #0
 80048f8:	77fb      	strb	r3, [r7, #31]
 80048fa:	e04b      	b.n	8004994 <UART_SetConfig+0x348>
 80048fc:	2302      	movs	r3, #2
 80048fe:	77fb      	strb	r3, [r7, #31]
 8004900:	e048      	b.n	8004994 <UART_SetConfig+0x348>
 8004902:	2304      	movs	r3, #4
 8004904:	77fb      	strb	r3, [r7, #31]
 8004906:	e045      	b.n	8004994 <UART_SetConfig+0x348>
 8004908:	2308      	movs	r3, #8
 800490a:	77fb      	strb	r3, [r7, #31]
 800490c:	e042      	b.n	8004994 <UART_SetConfig+0x348>
 800490e:	bf00      	nop
 8004910:	efff69f3 	.word	0xefff69f3
 8004914:	40011000 	.word	0x40011000
 8004918:	40023800 	.word	0x40023800
 800491c:	40004400 	.word	0x40004400
 8004920:	40004800 	.word	0x40004800
 8004924:	40004c00 	.word	0x40004c00
 8004928:	40005000 	.word	0x40005000
 800492c:	40011400 	.word	0x40011400
 8004930:	40007800 	.word	0x40007800
 8004934:	2310      	movs	r3, #16
 8004936:	77fb      	strb	r3, [r7, #31]
 8004938:	e02c      	b.n	8004994 <UART_SetConfig+0x348>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4a72      	ldr	r2, [pc, #456]	; (8004b08 <UART_SetConfig+0x4bc>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d125      	bne.n	8004990 <UART_SetConfig+0x344>
 8004944:	4b71      	ldr	r3, [pc, #452]	; (8004b0c <UART_SetConfig+0x4c0>)
 8004946:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800494a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800494e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004952:	d017      	beq.n	8004984 <UART_SetConfig+0x338>
 8004954:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004958:	d817      	bhi.n	800498a <UART_SetConfig+0x33e>
 800495a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800495e:	d00b      	beq.n	8004978 <UART_SetConfig+0x32c>
 8004960:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004964:	d811      	bhi.n	800498a <UART_SetConfig+0x33e>
 8004966:	2b00      	cmp	r3, #0
 8004968:	d003      	beq.n	8004972 <UART_SetConfig+0x326>
 800496a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800496e:	d006      	beq.n	800497e <UART_SetConfig+0x332>
 8004970:	e00b      	b.n	800498a <UART_SetConfig+0x33e>
 8004972:	2300      	movs	r3, #0
 8004974:	77fb      	strb	r3, [r7, #31]
 8004976:	e00d      	b.n	8004994 <UART_SetConfig+0x348>
 8004978:	2302      	movs	r3, #2
 800497a:	77fb      	strb	r3, [r7, #31]
 800497c:	e00a      	b.n	8004994 <UART_SetConfig+0x348>
 800497e:	2304      	movs	r3, #4
 8004980:	77fb      	strb	r3, [r7, #31]
 8004982:	e007      	b.n	8004994 <UART_SetConfig+0x348>
 8004984:	2308      	movs	r3, #8
 8004986:	77fb      	strb	r3, [r7, #31]
 8004988:	e004      	b.n	8004994 <UART_SetConfig+0x348>
 800498a:	2310      	movs	r3, #16
 800498c:	77fb      	strb	r3, [r7, #31]
 800498e:	e001      	b.n	8004994 <UART_SetConfig+0x348>
 8004990:	2310      	movs	r3, #16
 8004992:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	69db      	ldr	r3, [r3, #28]
 8004998:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800499c:	d15b      	bne.n	8004a56 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800499e:	7ffb      	ldrb	r3, [r7, #31]
 80049a0:	2b08      	cmp	r3, #8
 80049a2:	d828      	bhi.n	80049f6 <UART_SetConfig+0x3aa>
 80049a4:	a201      	add	r2, pc, #4	; (adr r2, 80049ac <UART_SetConfig+0x360>)
 80049a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049aa:	bf00      	nop
 80049ac:	080049d1 	.word	0x080049d1
 80049b0:	080049d9 	.word	0x080049d9
 80049b4:	080049e1 	.word	0x080049e1
 80049b8:	080049f7 	.word	0x080049f7
 80049bc:	080049e7 	.word	0x080049e7
 80049c0:	080049f7 	.word	0x080049f7
 80049c4:	080049f7 	.word	0x080049f7
 80049c8:	080049f7 	.word	0x080049f7
 80049cc:	080049ef 	.word	0x080049ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049d0:	f7fe f8aa 	bl	8002b28 <HAL_RCC_GetPCLK1Freq>
 80049d4:	61b8      	str	r0, [r7, #24]
        break;
 80049d6:	e013      	b.n	8004a00 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80049d8:	f7fe f8ba 	bl	8002b50 <HAL_RCC_GetPCLK2Freq>
 80049dc:	61b8      	str	r0, [r7, #24]
        break;
 80049de:	e00f      	b.n	8004a00 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80049e0:	4b4b      	ldr	r3, [pc, #300]	; (8004b10 <UART_SetConfig+0x4c4>)
 80049e2:	61bb      	str	r3, [r7, #24]
        break;
 80049e4:	e00c      	b.n	8004a00 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80049e6:	f7fd ffcd 	bl	8002984 <HAL_RCC_GetSysClockFreq>
 80049ea:	61b8      	str	r0, [r7, #24]
        break;
 80049ec:	e008      	b.n	8004a00 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049f2:	61bb      	str	r3, [r7, #24]
        break;
 80049f4:	e004      	b.n	8004a00 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80049f6:	2300      	movs	r3, #0
 80049f8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80049fa:	2301      	movs	r3, #1
 80049fc:	77bb      	strb	r3, [r7, #30]
        break;
 80049fe:	bf00      	nop
=======
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4a94      	ldr	r2, [pc, #592]	; (80048d0 <UART_SetConfig+0x2c8>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d120      	bne.n	80046c6 <UART_SetConfig+0xbe>
 8004684:	4b93      	ldr	r3, [pc, #588]	; (80048d4 <UART_SetConfig+0x2cc>)
 8004686:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800468a:	f003 0303 	and.w	r3, r3, #3
 800468e:	2b03      	cmp	r3, #3
 8004690:	d816      	bhi.n	80046c0 <UART_SetConfig+0xb8>
 8004692:	a201      	add	r2, pc, #4	; (adr r2, 8004698 <UART_SetConfig+0x90>)
 8004694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004698:	080046a9 	.word	0x080046a9
 800469c:	080046b5 	.word	0x080046b5
 80046a0:	080046af 	.word	0x080046af
 80046a4:	080046bb 	.word	0x080046bb
 80046a8:	2301      	movs	r3, #1
 80046aa:	77fb      	strb	r3, [r7, #31]
 80046ac:	e150      	b.n	8004950 <UART_SetConfig+0x348>
 80046ae:	2302      	movs	r3, #2
 80046b0:	77fb      	strb	r3, [r7, #31]
 80046b2:	e14d      	b.n	8004950 <UART_SetConfig+0x348>
 80046b4:	2304      	movs	r3, #4
 80046b6:	77fb      	strb	r3, [r7, #31]
 80046b8:	e14a      	b.n	8004950 <UART_SetConfig+0x348>
 80046ba:	2308      	movs	r3, #8
 80046bc:	77fb      	strb	r3, [r7, #31]
 80046be:	e147      	b.n	8004950 <UART_SetConfig+0x348>
 80046c0:	2310      	movs	r3, #16
 80046c2:	77fb      	strb	r3, [r7, #31]
 80046c4:	e144      	b.n	8004950 <UART_SetConfig+0x348>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a83      	ldr	r2, [pc, #524]	; (80048d8 <UART_SetConfig+0x2d0>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d132      	bne.n	8004736 <UART_SetConfig+0x12e>
 80046d0:	4b80      	ldr	r3, [pc, #512]	; (80048d4 <UART_SetConfig+0x2cc>)
 80046d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046d6:	f003 030c 	and.w	r3, r3, #12
 80046da:	2b0c      	cmp	r3, #12
 80046dc:	d828      	bhi.n	8004730 <UART_SetConfig+0x128>
 80046de:	a201      	add	r2, pc, #4	; (adr r2, 80046e4 <UART_SetConfig+0xdc>)
 80046e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046e4:	08004719 	.word	0x08004719
 80046e8:	08004731 	.word	0x08004731
 80046ec:	08004731 	.word	0x08004731
 80046f0:	08004731 	.word	0x08004731
 80046f4:	08004725 	.word	0x08004725
 80046f8:	08004731 	.word	0x08004731
 80046fc:	08004731 	.word	0x08004731
 8004700:	08004731 	.word	0x08004731
 8004704:	0800471f 	.word	0x0800471f
 8004708:	08004731 	.word	0x08004731
 800470c:	08004731 	.word	0x08004731
 8004710:	08004731 	.word	0x08004731
 8004714:	0800472b 	.word	0x0800472b
 8004718:	2300      	movs	r3, #0
 800471a:	77fb      	strb	r3, [r7, #31]
 800471c:	e118      	b.n	8004950 <UART_SetConfig+0x348>
 800471e:	2302      	movs	r3, #2
 8004720:	77fb      	strb	r3, [r7, #31]
 8004722:	e115      	b.n	8004950 <UART_SetConfig+0x348>
 8004724:	2304      	movs	r3, #4
 8004726:	77fb      	strb	r3, [r7, #31]
 8004728:	e112      	b.n	8004950 <UART_SetConfig+0x348>
 800472a:	2308      	movs	r3, #8
 800472c:	77fb      	strb	r3, [r7, #31]
 800472e:	e10f      	b.n	8004950 <UART_SetConfig+0x348>
 8004730:	2310      	movs	r3, #16
 8004732:	77fb      	strb	r3, [r7, #31]
 8004734:	e10c      	b.n	8004950 <UART_SetConfig+0x348>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a68      	ldr	r2, [pc, #416]	; (80048dc <UART_SetConfig+0x2d4>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d120      	bne.n	8004782 <UART_SetConfig+0x17a>
 8004740:	4b64      	ldr	r3, [pc, #400]	; (80048d4 <UART_SetConfig+0x2cc>)
 8004742:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004746:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800474a:	2b30      	cmp	r3, #48	; 0x30
 800474c:	d013      	beq.n	8004776 <UART_SetConfig+0x16e>
 800474e:	2b30      	cmp	r3, #48	; 0x30
 8004750:	d814      	bhi.n	800477c <UART_SetConfig+0x174>
 8004752:	2b20      	cmp	r3, #32
 8004754:	d009      	beq.n	800476a <UART_SetConfig+0x162>
 8004756:	2b20      	cmp	r3, #32
 8004758:	d810      	bhi.n	800477c <UART_SetConfig+0x174>
 800475a:	2b00      	cmp	r3, #0
 800475c:	d002      	beq.n	8004764 <UART_SetConfig+0x15c>
 800475e:	2b10      	cmp	r3, #16
 8004760:	d006      	beq.n	8004770 <UART_SetConfig+0x168>
 8004762:	e00b      	b.n	800477c <UART_SetConfig+0x174>
 8004764:	2300      	movs	r3, #0
 8004766:	77fb      	strb	r3, [r7, #31]
 8004768:	e0f2      	b.n	8004950 <UART_SetConfig+0x348>
 800476a:	2302      	movs	r3, #2
 800476c:	77fb      	strb	r3, [r7, #31]
 800476e:	e0ef      	b.n	8004950 <UART_SetConfig+0x348>
 8004770:	2304      	movs	r3, #4
 8004772:	77fb      	strb	r3, [r7, #31]
 8004774:	e0ec      	b.n	8004950 <UART_SetConfig+0x348>
 8004776:	2308      	movs	r3, #8
 8004778:	77fb      	strb	r3, [r7, #31]
 800477a:	e0e9      	b.n	8004950 <UART_SetConfig+0x348>
 800477c:	2310      	movs	r3, #16
 800477e:	77fb      	strb	r3, [r7, #31]
 8004780:	e0e6      	b.n	8004950 <UART_SetConfig+0x348>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a56      	ldr	r2, [pc, #344]	; (80048e0 <UART_SetConfig+0x2d8>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d120      	bne.n	80047ce <UART_SetConfig+0x1c6>
 800478c:	4b51      	ldr	r3, [pc, #324]	; (80048d4 <UART_SetConfig+0x2cc>)
 800478e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004792:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004796:	2bc0      	cmp	r3, #192	; 0xc0
 8004798:	d013      	beq.n	80047c2 <UART_SetConfig+0x1ba>
 800479a:	2bc0      	cmp	r3, #192	; 0xc0
 800479c:	d814      	bhi.n	80047c8 <UART_SetConfig+0x1c0>
 800479e:	2b80      	cmp	r3, #128	; 0x80
 80047a0:	d009      	beq.n	80047b6 <UART_SetConfig+0x1ae>
 80047a2:	2b80      	cmp	r3, #128	; 0x80
 80047a4:	d810      	bhi.n	80047c8 <UART_SetConfig+0x1c0>
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d002      	beq.n	80047b0 <UART_SetConfig+0x1a8>
 80047aa:	2b40      	cmp	r3, #64	; 0x40
 80047ac:	d006      	beq.n	80047bc <UART_SetConfig+0x1b4>
 80047ae:	e00b      	b.n	80047c8 <UART_SetConfig+0x1c0>
 80047b0:	2300      	movs	r3, #0
 80047b2:	77fb      	strb	r3, [r7, #31]
 80047b4:	e0cc      	b.n	8004950 <UART_SetConfig+0x348>
 80047b6:	2302      	movs	r3, #2
 80047b8:	77fb      	strb	r3, [r7, #31]
 80047ba:	e0c9      	b.n	8004950 <UART_SetConfig+0x348>
 80047bc:	2304      	movs	r3, #4
 80047be:	77fb      	strb	r3, [r7, #31]
 80047c0:	e0c6      	b.n	8004950 <UART_SetConfig+0x348>
 80047c2:	2308      	movs	r3, #8
 80047c4:	77fb      	strb	r3, [r7, #31]
 80047c6:	e0c3      	b.n	8004950 <UART_SetConfig+0x348>
 80047c8:	2310      	movs	r3, #16
 80047ca:	77fb      	strb	r3, [r7, #31]
 80047cc:	e0c0      	b.n	8004950 <UART_SetConfig+0x348>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a44      	ldr	r2, [pc, #272]	; (80048e4 <UART_SetConfig+0x2dc>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d125      	bne.n	8004824 <UART_SetConfig+0x21c>
 80047d8:	4b3e      	ldr	r3, [pc, #248]	; (80048d4 <UART_SetConfig+0x2cc>)
 80047da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80047e6:	d017      	beq.n	8004818 <UART_SetConfig+0x210>
 80047e8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80047ec:	d817      	bhi.n	800481e <UART_SetConfig+0x216>
 80047ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047f2:	d00b      	beq.n	800480c <UART_SetConfig+0x204>
 80047f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047f8:	d811      	bhi.n	800481e <UART_SetConfig+0x216>
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d002      	beq.n	8004804 <UART_SetConfig+0x1a8>
 80047fe:	2b40      	cmp	r3, #64	; 0x40
 8004800:	d006      	beq.n	8004810 <UART_SetConfig+0x1b4>
 8004802:	e00b      	b.n	800481c <UART_SetConfig+0x1c0>
 8004804:	2300      	movs	r3, #0
 8004806:	77fb      	strb	r3, [r7, #31]
 8004808:	e0cc      	b.n	80049a4 <UART_SetConfig+0x348>
 800480a:	2302      	movs	r3, #2
 800480c:	77fb      	strb	r3, [r7, #31]
 800480e:	e0c9      	b.n	80049a4 <UART_SetConfig+0x348>
 8004810:	2304      	movs	r3, #4
 8004812:	77fb      	strb	r3, [r7, #31]
 8004814:	e0c6      	b.n	80049a4 <UART_SetConfig+0x348>
 8004816:	2308      	movs	r3, #8
 8004818:	77fb      	strb	r3, [r7, #31]
 800481a:	e0c3      	b.n	80049a4 <UART_SetConfig+0x348>
 800481c:	2310      	movs	r3, #16
 800481e:	77fb      	strb	r3, [r7, #31]
 8004820:	e0c0      	b.n	80049a4 <UART_SetConfig+0x348>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a44      	ldr	r2, [pc, #272]	; (8004938 <UART_SetConfig+0x2dc>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d125      	bne.n	8004878 <UART_SetConfig+0x21c>
 800482c:	4b3e      	ldr	r3, [pc, #248]	; (8004928 <UART_SetConfig+0x2cc>)
 800482e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004832:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004836:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800483a:	d017      	beq.n	800486c <UART_SetConfig+0x210>
 800483c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004840:	d817      	bhi.n	8004872 <UART_SetConfig+0x216>
 8004842:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004846:	d00b      	beq.n	8004860 <UART_SetConfig+0x204>
 8004848:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800484c:	d811      	bhi.n	8004872 <UART_SetConfig+0x216>
 800484e:	2b00      	cmp	r3, #0
 8004850:	d003      	beq.n	800485a <UART_SetConfig+0x1fe>
 8004852:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004856:	d006      	beq.n	8004866 <UART_SetConfig+0x20a>
 8004858:	e00b      	b.n	8004872 <UART_SetConfig+0x216>
 800485a:	2300      	movs	r3, #0
 800485c:	77fb      	strb	r3, [r7, #31]
 800485e:	e0a1      	b.n	80049a4 <UART_SetConfig+0x348>
 8004860:	2302      	movs	r3, #2
 8004862:	77fb      	strb	r3, [r7, #31]
 8004864:	e09e      	b.n	80049a4 <UART_SetConfig+0x348>
 8004866:	2304      	movs	r3, #4
 8004868:	77fb      	strb	r3, [r7, #31]
 800486a:	e09b      	b.n	80049a4 <UART_SetConfig+0x348>
 800486c:	2308      	movs	r3, #8
 800486e:	77fb      	strb	r3, [r7, #31]
 8004870:	e098      	b.n	80049a4 <UART_SetConfig+0x348>
 8004872:	2310      	movs	r3, #16
 8004874:	77fb      	strb	r3, [r7, #31]
 8004876:	e095      	b.n	80049a4 <UART_SetConfig+0x348>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4a2f      	ldr	r2, [pc, #188]	; (800493c <UART_SetConfig+0x2e0>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d125      	bne.n	80048ce <UART_SetConfig+0x272>
 8004882:	4b29      	ldr	r3, [pc, #164]	; (8004928 <UART_SetConfig+0x2cc>)
 8004884:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004888:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800488c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004890:	d017      	beq.n	80048c2 <UART_SetConfig+0x266>
 8004892:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004896:	d817      	bhi.n	80048c8 <UART_SetConfig+0x26c>
 8004898:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800489c:	d00b      	beq.n	80048b6 <UART_SetConfig+0x25a>
 800489e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048a2:	d811      	bhi.n	80048c8 <UART_SetConfig+0x26c>
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d003      	beq.n	80048b0 <UART_SetConfig+0x254>
 80048a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048ac:	d006      	beq.n	80048bc <UART_SetConfig+0x260>
 80048ae:	e00b      	b.n	80048c8 <UART_SetConfig+0x26c>
 80048b0:	2301      	movs	r3, #1
 80048b2:	77fb      	strb	r3, [r7, #31]
 80048b4:	e076      	b.n	80049a4 <UART_SetConfig+0x348>
 80048b6:	2302      	movs	r3, #2
 80048b8:	77fb      	strb	r3, [r7, #31]
 80048ba:	e073      	b.n	80049a4 <UART_SetConfig+0x348>
 80048bc:	2304      	movs	r3, #4
 80048be:	77fb      	strb	r3, [r7, #31]
 80048c0:	e070      	b.n	80049a4 <UART_SetConfig+0x348>
 80048c2:	2308      	movs	r3, #8
 80048c4:	77fb      	strb	r3, [r7, #31]
 80048c6:	e06d      	b.n	80049a4 <UART_SetConfig+0x348>
 80048c8:	2310      	movs	r3, #16
 80048ca:	77fb      	strb	r3, [r7, #31]
 80048cc:	e06a      	b.n	80049a4 <UART_SetConfig+0x348>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a1b      	ldr	r2, [pc, #108]	; (8004940 <UART_SetConfig+0x2e4>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d138      	bne.n	800494a <UART_SetConfig+0x2ee>
 80048d8:	4b13      	ldr	r3, [pc, #76]	; (8004928 <UART_SetConfig+0x2cc>)
 80048da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048de:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80048e2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80048e6:	d017      	beq.n	8004918 <UART_SetConfig+0x2bc>
 80048e8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80048ec:	d82a      	bhi.n	8004944 <UART_SetConfig+0x2e8>
 80048ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048f2:	d00b      	beq.n	800490c <UART_SetConfig+0x2b0>
 80048f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048f8:	d824      	bhi.n	8004944 <UART_SetConfig+0x2e8>
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d003      	beq.n	8004906 <UART_SetConfig+0x2aa>
 80048fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004902:	d006      	beq.n	8004912 <UART_SetConfig+0x2b6>
 8004904:	e01e      	b.n	8004944 <UART_SetConfig+0x2e8>
 8004906:	2300      	movs	r3, #0
 8004908:	77fb      	strb	r3, [r7, #31]
 800490a:	e04b      	b.n	80049a4 <UART_SetConfig+0x348>
 800490c:	2302      	movs	r3, #2
 800490e:	77fb      	strb	r3, [r7, #31]
 8004910:	e048      	b.n	80049a4 <UART_SetConfig+0x348>
 8004912:	2304      	movs	r3, #4
 8004914:	77fb      	strb	r3, [r7, #31]
 8004916:	e045      	b.n	80049a4 <UART_SetConfig+0x348>
 8004918:	2308      	movs	r3, #8
 800491a:	77fb      	strb	r3, [r7, #31]
 800491c:	e042      	b.n	80049a4 <UART_SetConfig+0x348>
 800491e:	bf00      	nop
 8004920:	efff69f3 	.word	0xefff69f3
 8004924:	40011000 	.word	0x40011000
 8004928:	40023800 	.word	0x40023800
 800492c:	40004400 	.word	0x40004400
 8004930:	40004800 	.word	0x40004800
 8004934:	40004c00 	.word	0x40004c00
 8004938:	40005000 	.word	0x40005000
 800493c:	40011400 	.word	0x40011400
 8004940:	40007800 	.word	0x40007800
 8004944:	2310      	movs	r3, #16
 8004946:	77fb      	strb	r3, [r7, #31]
 8004948:	e02c      	b.n	80049a4 <UART_SetConfig+0x348>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a72      	ldr	r2, [pc, #456]	; (8004b18 <UART_SetConfig+0x4bc>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d125      	bne.n	80049a0 <UART_SetConfig+0x344>
 8004954:	4b71      	ldr	r3, [pc, #452]	; (8004b1c <UART_SetConfig+0x4c0>)
 8004956:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800495a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800495e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004962:	d017      	beq.n	8004994 <UART_SetConfig+0x338>
 8004964:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004968:	d817      	bhi.n	800499a <UART_SetConfig+0x33e>
 800496a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800496e:	d00b      	beq.n	8004988 <UART_SetConfig+0x32c>
 8004970:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004974:	d811      	bhi.n	800499a <UART_SetConfig+0x33e>
 8004976:	2b00      	cmp	r3, #0
 8004978:	d003      	beq.n	8004982 <UART_SetConfig+0x326>
 800497a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800497e:	d006      	beq.n	800498e <UART_SetConfig+0x332>
 8004980:	e00b      	b.n	800499a <UART_SetConfig+0x33e>
 8004982:	2300      	movs	r3, #0
 8004984:	77fb      	strb	r3, [r7, #31]
 8004986:	e00d      	b.n	80049a4 <UART_SetConfig+0x348>
 8004988:	2302      	movs	r3, #2
 800498a:	77fb      	strb	r3, [r7, #31]
 800498c:	e00a      	b.n	80049a4 <UART_SetConfig+0x348>
 800498e:	2304      	movs	r3, #4
 8004990:	77fb      	strb	r3, [r7, #31]
 8004992:	e007      	b.n	80049a4 <UART_SetConfig+0x348>
 8004994:	2308      	movs	r3, #8
 8004996:	77fb      	strb	r3, [r7, #31]
 8004998:	e004      	b.n	80049a4 <UART_SetConfig+0x348>
 800499a:	2310      	movs	r3, #16
 800499c:	77fb      	strb	r3, [r7, #31]
 800499e:	e001      	b.n	80049a4 <UART_SetConfig+0x348>
 80049a0:	2310      	movs	r3, #16
 80049a2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	69db      	ldr	r3, [r3, #28]
 80049a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049ac:	d15b      	bne.n	8004a66 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80049ae:	7ffb      	ldrb	r3, [r7, #31]
 80049b0:	2b08      	cmp	r3, #8
 80049b2:	d828      	bhi.n	8004a06 <UART_SetConfig+0x3aa>
 80049b4:	a201      	add	r2, pc, #4	; (adr r2, 80049bc <UART_SetConfig+0x360>)
 80049b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049ba:	bf00      	nop
 80049bc:	080049e1 	.word	0x080049e1
 80049c0:	080049e9 	.word	0x080049e9
 80049c4:	080049f1 	.word	0x080049f1
 80049c8:	08004a07 	.word	0x08004a07
 80049cc:	080049f7 	.word	0x080049f7
 80049d0:	08004a07 	.word	0x08004a07
 80049d4:	08004a07 	.word	0x08004a07
 80049d8:	08004a07 	.word	0x08004a07
 80049dc:	080049ff 	.word	0x080049ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049e0:	f7fe f8aa 	bl	8002b38 <HAL_RCC_GetPCLK1Freq>
 80049e4:	61b8      	str	r0, [r7, #24]
        break;
 80049e6:	e013      	b.n	8004a10 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80049e8:	f7fe f8ba 	bl	8002b60 <HAL_RCC_GetPCLK2Freq>
 80049ec:	61b8      	str	r0, [r7, #24]
        break;
 80049ee:	e00f      	b.n	8004a10 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80049f0:	4b4b      	ldr	r3, [pc, #300]	; (8004b20 <UART_SetConfig+0x4c4>)
 80049f2:	61bb      	str	r3, [r7, #24]
        break;
 80049f4:	e00c      	b.n	8004a10 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80049f6:	f7fd ffcd 	bl	8002994 <HAL_RCC_GetSysClockFreq>
 80049fa:	61b8      	str	r0, [r7, #24]
        break;
 80049fc:	e008      	b.n	8004a10 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a02:	61bb      	str	r3, [r7, #24]
        break;
 8004a04:	e004      	b.n	8004a10 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004a06:	2300      	movs	r3, #0
 8004a08:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	77bb      	strb	r3, [r7, #30]
        break;
<<<<<<< HEAD
 8004a0e:	bf00      	nop
=======
 80049ba:	bf00      	nop
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
<<<<<<< HEAD
 8004a10:	69bb      	ldr	r3, [r7, #24]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d074      	beq.n	8004b00 <UART_SetConfig+0x4a4>
=======
<<<<<<< HEAD
 8004a00:	69bb      	ldr	r3, [r7, #24]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d074      	beq.n	8004af0 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004a06:	69bb      	ldr	r3, [r7, #24]
 8004a08:	005a      	lsls	r2, r3, #1
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	085b      	lsrs	r3, r3, #1
 8004a10:	441a      	add	r2, r3
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a1a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a1c:	693b      	ldr	r3, [r7, #16]
 8004a1e:	2b0f      	cmp	r3, #15
 8004a20:	d916      	bls.n	8004a50 <UART_SetConfig+0x404>
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a28:	d212      	bcs.n	8004a50 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004a2a:	693b      	ldr	r3, [r7, #16]
 8004a2c:	b29b      	uxth	r3, r3
 8004a2e:	f023 030f 	bic.w	r3, r3, #15
 8004a32:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004a34:	693b      	ldr	r3, [r7, #16]
 8004a36:	085b      	lsrs	r3, r3, #1
 8004a38:	b29b      	uxth	r3, r3
 8004a3a:	f003 0307 	and.w	r3, r3, #7
 8004a3e:	b29a      	uxth	r2, r3
 8004a40:	89fb      	ldrh	r3, [r7, #14]
 8004a42:	4313      	orrs	r3, r2
 8004a44:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	89fa      	ldrh	r2, [r7, #14]
 8004a4c:	60da      	str	r2, [r3, #12]
 8004a4e:	e04f      	b.n	8004af0 <UART_SetConfig+0x4a4>
=======
 80049bc:	69bb      	ldr	r3, [r7, #24]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d074      	beq.n	8004aac <UART_SetConfig+0x4a4>
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004a16:	69bb      	ldr	r3, [r7, #24]
 8004a18:	005a      	lsls	r2, r3, #1
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	085b      	lsrs	r3, r3, #1
 8004a20:	441a      	add	r2, r3
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a2a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a2c:	693b      	ldr	r3, [r7, #16]
 8004a2e:	2b0f      	cmp	r3, #15
 8004a30:	d916      	bls.n	8004a60 <UART_SetConfig+0x404>
 8004a32:	693b      	ldr	r3, [r7, #16]
 8004a34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a38:	d212      	bcs.n	8004a60 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004a3a:	693b      	ldr	r3, [r7, #16]
 8004a3c:	b29b      	uxth	r3, r3
 8004a3e:	f023 030f 	bic.w	r3, r3, #15
 8004a42:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004a44:	693b      	ldr	r3, [r7, #16]
 8004a46:	085b      	lsrs	r3, r3, #1
 8004a48:	b29b      	uxth	r3, r3
 8004a4a:	f003 0307 	and.w	r3, r3, #7
 8004a4e:	b29a      	uxth	r2, r3
 8004a50:	89fb      	ldrh	r3, [r7, #14]
 8004a52:	4313      	orrs	r3, r2
 8004a54:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
<<<<<<< HEAD
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	89fa      	ldrh	r2, [r7, #14]
 8004a5c:	60da      	str	r2, [r3, #12]
 8004a5e:	e04f      	b.n	8004b00 <UART_SetConfig+0x4a4>
=======
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	89fa      	ldrh	r2, [r7, #14]
 8004a08:	60da      	str	r2, [r3, #12]
 8004a0a:	e04f      	b.n	8004aac <UART_SetConfig+0x4a4>
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
      }
      else
      {
        ret = HAL_ERROR;
<<<<<<< HEAD
 8004a60:	2301      	movs	r3, #1
 8004a62:	77bb      	strb	r3, [r7, #30]
 8004a64:	e04c      	b.n	8004b00 <UART_SetConfig+0x4a4>
=======
<<<<<<< HEAD
 8004a50:	2301      	movs	r3, #1
 8004a52:	77bb      	strb	r3, [r7, #30]
 8004a54:	e04c      	b.n	8004af0 <UART_SetConfig+0x4a4>
=======
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	77bb      	strb	r3, [r7, #30]
 8004a10:	e04c      	b.n	8004aac <UART_SetConfig+0x4a4>
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
      }
    }
  }
  else
  {
    switch (clocksource)
<<<<<<< HEAD
 8004a66:	7ffb      	ldrb	r3, [r7, #31]
 8004a68:	2b08      	cmp	r3, #8
 8004a6a:	d828      	bhi.n	8004abe <UART_SetConfig+0x462>
 8004a6c:	a201      	add	r2, pc, #4	; (adr r2, 8004a74 <UART_SetConfig+0x418>)
 8004a6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a72:	bf00      	nop
 8004a74:	08004a99 	.word	0x08004a99
 8004a78:	08004aa1 	.word	0x08004aa1
 8004a7c:	08004aa9 	.word	0x08004aa9
 8004a80:	08004abf 	.word	0x08004abf
 8004a84:	08004aaf 	.word	0x08004aaf
 8004a88:	08004abf 	.word	0x08004abf
 8004a8c:	08004abf 	.word	0x08004abf
 8004a90:	08004abf 	.word	0x08004abf
 8004a94:	08004ab7 	.word	0x08004ab7
=======
<<<<<<< HEAD
 8004a56:	7ffb      	ldrb	r3, [r7, #31]
 8004a58:	2b08      	cmp	r3, #8
 8004a5a:	d828      	bhi.n	8004aae <UART_SetConfig+0x462>
 8004a5c:	a201      	add	r2, pc, #4	; (adr r2, 8004a64 <UART_SetConfig+0x418>)
 8004a5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a62:	bf00      	nop
 8004a64:	08004a89 	.word	0x08004a89
 8004a68:	08004a91 	.word	0x08004a91
 8004a6c:	08004a99 	.word	0x08004a99
 8004a70:	08004aaf 	.word	0x08004aaf
 8004a74:	08004a9f 	.word	0x08004a9f
 8004a78:	08004aaf 	.word	0x08004aaf
 8004a7c:	08004aaf 	.word	0x08004aaf
 8004a80:	08004aaf 	.word	0x08004aaf
 8004a84:	08004aa7 	.word	0x08004aa7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a88:	f7fe f84e 	bl	8002b28 <HAL_RCC_GetPCLK1Freq>
 8004a8c:	61b8      	str	r0, [r7, #24]
        break;
 8004a8e:	e013      	b.n	8004ab8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a90:	f7fe f85e 	bl	8002b50 <HAL_RCC_GetPCLK2Freq>
 8004a94:	61b8      	str	r0, [r7, #24]
        break;
 8004a96:	e00f      	b.n	8004ab8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a98:	4b1d      	ldr	r3, [pc, #116]	; (8004b10 <UART_SetConfig+0x4c4>)
 8004a9a:	61bb      	str	r3, [r7, #24]
        break;
 8004a9c:	e00c      	b.n	8004ab8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a9e:	f7fd ff71 	bl	8002984 <HAL_RCC_GetSysClockFreq>
 8004aa2:	61b8      	str	r0, [r7, #24]
        break;
 8004aa4:	e008      	b.n	8004ab8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004aa6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004aaa:	61bb      	str	r3, [r7, #24]
        break;
 8004aac:	e004      	b.n	8004ab8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004aae:	2300      	movs	r3, #0
 8004ab0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	77bb      	strb	r3, [r7, #30]
        break;
 8004ab6:	bf00      	nop
    }

    if (pclk != 0U)
 8004ab8:	69bb      	ldr	r3, [r7, #24]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d018      	beq.n	8004af0 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	085a      	lsrs	r2, r3, #1
 8004ac4:	69bb      	ldr	r3, [r7, #24]
 8004ac6:	441a      	add	r2, r3
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ad0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ad2:	693b      	ldr	r3, [r7, #16]
 8004ad4:	2b0f      	cmp	r3, #15
 8004ad6:	d909      	bls.n	8004aec <UART_SetConfig+0x4a0>
 8004ad8:	693b      	ldr	r3, [r7, #16]
 8004ada:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ade:	d205      	bcs.n	8004aec <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004ae0:	693b      	ldr	r3, [r7, #16]
 8004ae2:	b29a      	uxth	r2, r3
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	60da      	str	r2, [r3, #12]
 8004aea:	e001      	b.n	8004af0 <UART_SetConfig+0x4a4>
=======
 8004a12:	7ffb      	ldrb	r3, [r7, #31]
 8004a14:	2b08      	cmp	r3, #8
 8004a16:	d828      	bhi.n	8004a6a <UART_SetConfig+0x462>
 8004a18:	a201      	add	r2, pc, #4	; (adr r2, 8004a20 <UART_SetConfig+0x418>)
 8004a1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a1e:	bf00      	nop
 8004a20:	08004a45 	.word	0x08004a45
 8004a24:	08004a4d 	.word	0x08004a4d
 8004a28:	08004a55 	.word	0x08004a55
 8004a2c:	08004a6b 	.word	0x08004a6b
 8004a30:	08004a5b 	.word	0x08004a5b
 8004a34:	08004a6b 	.word	0x08004a6b
 8004a38:	08004a6b 	.word	0x08004a6b
 8004a3c:	08004a6b 	.word	0x08004a6b
 8004a40:	08004a63 	.word	0x08004a63
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a98:	f7fe f84e 	bl	8002b38 <HAL_RCC_GetPCLK1Freq>
 8004a9c:	61b8      	str	r0, [r7, #24]
        break;
 8004a9e:	e013      	b.n	8004ac8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004aa0:	f7fe f85e 	bl	8002b60 <HAL_RCC_GetPCLK2Freq>
 8004aa4:	61b8      	str	r0, [r7, #24]
        break;
 8004aa6:	e00f      	b.n	8004ac8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004aa8:	4b1d      	ldr	r3, [pc, #116]	; (8004b20 <UART_SetConfig+0x4c4>)
 8004aaa:	61bb      	str	r3, [r7, #24]
        break;
 8004aac:	e00c      	b.n	8004ac8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004aae:	f7fd ff71 	bl	8002994 <HAL_RCC_GetSysClockFreq>
 8004ab2:	61b8      	str	r0, [r7, #24]
        break;
 8004ab4:	e008      	b.n	8004ac8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ab6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004aba:	61bb      	str	r3, [r7, #24]
        break;
 8004abc:	e004      	b.n	8004ac8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004abe:	2300      	movs	r3, #0
 8004ac0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	77bb      	strb	r3, [r7, #30]
        break;
 8004ac6:	bf00      	nop
    }

    if (pclk != 0U)
 8004ac8:	69bb      	ldr	r3, [r7, #24]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d018      	beq.n	8004b00 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	085a      	lsrs	r2, r3, #1
 8004ad4:	69bb      	ldr	r3, [r7, #24]
 8004ad6:	441a      	add	r2, r3
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ae0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ae2:	693b      	ldr	r3, [r7, #16]
 8004ae4:	2b0f      	cmp	r3, #15
 8004ae6:	d909      	bls.n	8004afc <UART_SetConfig+0x4a0>
 8004ae8:	693b      	ldr	r3, [r7, #16]
 8004aea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004aee:	d205      	bcs.n	8004afc <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
<<<<<<< HEAD
 8004af0:	693b      	ldr	r3, [r7, #16]
 8004af2:	b29a      	uxth	r2, r3
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	60da      	str	r2, [r3, #12]
 8004afa:	e001      	b.n	8004b00 <UART_SetConfig+0x4a4>
=======
 8004a9c:	693b      	ldr	r3, [r7, #16]
 8004a9e:	b29a      	uxth	r2, r3
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	60da      	str	r2, [r3, #12]
 8004aa6:	e001      	b.n	8004aac <UART_SetConfig+0x4a4>
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
      }
      else
      {
        ret = HAL_ERROR;
<<<<<<< HEAD
 8004afc:	2301      	movs	r3, #1
 8004afe:	77bb      	strb	r3, [r7, #30]
=======
<<<<<<< HEAD
 8004aec:	2301      	movs	r3, #1
 8004aee:	77bb      	strb	r3, [r7, #30]
=======
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	77bb      	strb	r3, [r7, #30]
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
<<<<<<< HEAD
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2200      	movs	r2, #0
 8004b04:	669a      	str	r2, [r3, #104]	; 0x68
=======
<<<<<<< HEAD
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2200      	movs	r2, #0
 8004af4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2200      	movs	r2, #0
 8004afa:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004afc:	7fbb      	ldrb	r3, [r7, #30]
}
 8004afe:	4618      	mov	r0, r3
 8004b00:	3720      	adds	r7, #32
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bd80      	pop	{r7, pc}
 8004b06:	bf00      	nop
 8004b08:	40007c00 	.word	0x40007c00
 8004b0c:	40023800 	.word	0x40023800
 8004b10:	00f42400 	.word	0x00f42400

08004b14 <UART_AdvFeatureConfig>:
=======
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2200      	movs	r2, #0
 8004ab0:	669a      	str	r2, [r3, #104]	; 0x68
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  huart->TxISR = NULL;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004b0c:	7fbb      	ldrb	r3, [r7, #30]
}
 8004b0e:	4618      	mov	r0, r3
 8004b10:	3720      	adds	r7, #32
 8004b12:	46bd      	mov	sp, r7
 8004b14:	bd80      	pop	{r7, pc}
 8004b16:	bf00      	nop
 8004b18:	40007c00 	.word	0x40007c00
 8004b1c:	40023800 	.word	0x40023800
 8004b20:	00f42400 	.word	0x00f42400

<<<<<<< HEAD
08004b24 <UART_AdvFeatureConfig>:
=======
08004ad0 <UART_AdvFeatureConfig>:
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8004b24:	b480      	push	{r7}
 8004b26:	b083      	sub	sp, #12
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
=======
<<<<<<< HEAD
 8004b14:	b480      	push	{r7}
 8004b16:	b083      	sub	sp, #12
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
=======
 8004ad0:	b480      	push	{r7}
 8004ad2:	b083      	sub	sp, #12
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
<<<<<<< HEAD
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b30:	f003 0301 	and.w	r3, r3, #1
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d00a      	beq.n	8004b4e <UART_AdvFeatureConfig+0x2a>
=======
<<<<<<< HEAD
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b20:	f003 0301 	and.w	r3, r3, #1
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d00a      	beq.n	8004b3e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
=======
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004adc:	f003 0301 	and.w	r3, r3, #1
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d00a      	beq.n	8004afa <UART_AdvFeatureConfig+0x2a>
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	430a      	orrs	r2, r1
 8004b4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b52:	f003 0302 	and.w	r3, r3, #2
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d00a      	beq.n	8004b70 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	430a      	orrs	r2, r1
 8004b6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b74:	f003 0304 	and.w	r3, r3, #4
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d00a      	beq.n	8004b92 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
<<<<<<< HEAD
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	430a      	orrs	r2, r1
 8004b90:	605a      	str	r2, [r3, #4]
=======
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	430a      	orrs	r2, r1
 8004b3c:	605a      	str	r2, [r3, #4]
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  }

<<<<<<< HEAD
  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b42:	f003 0302 	and.w	r3, r3, #2
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d00a      	beq.n	8004b60 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
=======
  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b96:	f003 0308 	and.w	r3, r3, #8
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d00a      	beq.n	8004bb4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
<<<<<<< HEAD
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	430a      	orrs	r2, r1
 8004bb2:	605a      	str	r2, [r3, #4]
=======
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6b5a      	ldr	r2, [r3, #52]	; 0x34
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	430a      	orrs	r2, r1
 8004b5e:	605a      	str	r2, [r3, #4]
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  }

<<<<<<< HEAD
  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b64:	f003 0304 	and.w	r3, r3, #4
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d00a      	beq.n	8004b82 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	430a      	orrs	r2, r1
 8004b80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b86:	f003 0308 	and.w	r3, r3, #8
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d00a      	beq.n	8004ba4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	430a      	orrs	r2, r1
 8004ba2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba8:	f003 0310 	and.w	r3, r3, #16
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d00a      	beq.n	8004bc6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	689b      	ldr	r3, [r3, #8]
 8004bb6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	430a      	orrs	r2, r1
 8004bc4:	609a      	str	r2, [r3, #8]
=======
  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bb8:	f003 0310 	and.w	r3, r3, #16
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d00a      	beq.n	8004bd6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
<<<<<<< HEAD
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	689b      	ldr	r3, [r3, #8]
 8004bc6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	430a      	orrs	r2, r1
 8004bd4:	609a      	str	r2, [r3, #8]
=======
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	689b      	ldr	r3, [r3, #8]
 8004b72:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	430a      	orrs	r2, r1
 8004b80:	609a      	str	r2, [r3, #8]
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
<<<<<<< HEAD
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bda:	f003 0320 	and.w	r3, r3, #32
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d00a      	beq.n	8004bf8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	689b      	ldr	r3, [r3, #8]
 8004be8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	430a      	orrs	r2, r1
 8004bf6:	609a      	str	r2, [r3, #8]
=======
<<<<<<< HEAD
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bca:	f003 0320 	and.w	r3, r3, #32
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d00a      	beq.n	8004be8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	430a      	orrs	r2, r1
 8004be6:	609a      	str	r2, [r3, #8]
=======
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b86:	f003 0320 	and.w	r3, r3, #32
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d00a      	beq.n	8004ba4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	689b      	ldr	r3, [r3, #8]
 8004b94:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	430a      	orrs	r2, r1
 8004ba2:	609a      	str	r2, [r3, #8]
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
<<<<<<< HEAD
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d01a      	beq.n	8004c3a <UART_AdvFeatureConfig+0x116>
=======
<<<<<<< HEAD
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d01a      	beq.n	8004c2a <UART_AdvFeatureConfig+0x116>
=======
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d01a      	beq.n	8004be6 <UART_AdvFeatureConfig+0x116>
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
<<<<<<< HEAD
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	430a      	orrs	r2, r1
 8004c18:	605a      	str	r2, [r3, #4]
=======
<<<<<<< HEAD
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	430a      	orrs	r2, r1
 8004c08:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c12:	d10a      	bne.n	8004c2a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	430a      	orrs	r2, r1
 8004c28:	605a      	str	r2, [r3, #4]
=======
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	430a      	orrs	r2, r1
 8004bc4:	605a      	str	r2, [r3, #4]
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c22:	d10a      	bne.n	8004c3a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
<<<<<<< HEAD
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	430a      	orrs	r2, r1
 8004c38:	605a      	str	r2, [r3, #4]
=======
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	430a      	orrs	r2, r1
 8004be4:	605a      	str	r2, [r3, #4]
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
<<<<<<< HEAD
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d00a      	beq.n	8004c5c <UART_AdvFeatureConfig+0x138>
=======
<<<<<<< HEAD
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d00a      	beq.n	8004c4c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	430a      	orrs	r2, r1
 8004c4a:	605a      	str	r2, [r3, #4]
  }
}
 8004c4c:	bf00      	nop
 8004c4e:	370c      	adds	r7, #12
 8004c50:	46bd      	mov	sp, r7
 8004c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c56:	4770      	bx	lr

08004c58 <UART_CheckIdleState>:
=======
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d00a      	beq.n	8004c08 <UART_AdvFeatureConfig+0x138>
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	685b      	ldr	r3, [r3, #4]
 8004c4c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	430a      	orrs	r2, r1
 8004c5a:	605a      	str	r2, [r3, #4]
  }
}
 8004c5c:	bf00      	nop
 8004c5e:	370c      	adds	r7, #12
 8004c60:	46bd      	mov	sp, r7
 8004c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c66:	4770      	bx	lr

<<<<<<< HEAD
08004c68 <UART_CheckIdleState>:
=======
08004c14 <UART_CheckIdleState>:
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b086      	sub	sp, #24
 8004c6c:	af02      	add	r7, sp, #8
 8004c6e:	6078      	str	r0, [r7, #4]
=======
<<<<<<< HEAD
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b086      	sub	sp, #24
 8004c5c:	af02      	add	r7, sp, #8
 8004c5e:	6078      	str	r0, [r7, #4]
=======
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b086      	sub	sp, #24
 8004c18:	af02      	add	r7, sp, #8
 8004c1a:	6078      	str	r0, [r7, #4]
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
<<<<<<< HEAD
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2200      	movs	r2, #0
 8004c74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
=======
<<<<<<< HEAD
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2200      	movs	r2, #0
 8004c64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004c68:	f7fc f952 	bl	8000f10 <HAL_GetTick>
 8004c6c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f003 0308 	and.w	r3, r3, #8
 8004c78:	2b08      	cmp	r3, #8
 8004c7a:	d10e      	bne.n	8004c9a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c7c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004c80:	9300      	str	r3, [sp, #0]
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	2200      	movs	r2, #0
 8004c86:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004c8a:	6878      	ldr	r0, [r7, #4]
 8004c8c:	f000 f81b 	bl	8004cc6 <UART_WaitOnFlagUntilTimeout>
 8004c90:	4603      	mov	r3, r0
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d001      	beq.n	8004c9a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c96:	2303      	movs	r3, #3
 8004c98:	e011      	b.n	8004cbe <UART_CheckIdleState+0x66>
=======
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2200      	movs	r2, #0
 8004c20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004c78:	f7fc f952 	bl	8000f20 <HAL_GetTick>
 8004c7c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f003 0308 	and.w	r3, r3, #8
 8004c88:	2b08      	cmp	r3, #8
 8004c8a:	d10e      	bne.n	8004caa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c8c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004c90:	9300      	str	r3, [sp, #0]
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	2200      	movs	r2, #0
 8004c96:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004c9a:	6878      	ldr	r0, [r7, #4]
 8004c9c:	f000 f81b 	bl	8004cd6 <UART_WaitOnFlagUntilTimeout>
 8004ca0:	4603      	mov	r3, r0
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d001      	beq.n	8004caa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
<<<<<<< HEAD
 8004ca6:	2303      	movs	r3, #3
 8004ca8:	e011      	b.n	8004cce <UART_CheckIdleState+0x66>
=======
 8004c52:	2303      	movs	r3, #3
 8004c54:	e011      	b.n	8004c7a <UART_CheckIdleState+0x66>
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
<<<<<<< HEAD
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2220      	movs	r2, #32
 8004cae:	67da      	str	r2, [r3, #124]	; 0x7c
=======
<<<<<<< HEAD
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2220      	movs	r2, #32
 8004c9e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2220      	movs	r2, #32
 8004ca4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2200      	movs	r2, #0
 8004cac:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004cbc:	2300      	movs	r3, #0
}
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	3710      	adds	r7, #16
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bd80      	pop	{r7, pc}

08004cc6 <UART_WaitOnFlagUntilTimeout>:
=======
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2220      	movs	r2, #32
 8004c5a:	67da      	str	r2, [r3, #124]	; 0x7c
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  huart->RxState = HAL_UART_STATE_READY;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2220      	movs	r2, #32
 8004cb4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004ccc:	2300      	movs	r3, #0
}
 8004cce:	4618      	mov	r0, r3
 8004cd0:	3710      	adds	r7, #16
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bd80      	pop	{r7, pc}

<<<<<<< HEAD
08004cd6 <UART_WaitOnFlagUntilTimeout>:
=======
08004c82 <UART_WaitOnFlagUntilTimeout>:
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
<<<<<<< HEAD
 8004cd6:	b580      	push	{r7, lr}
 8004cd8:	b09c      	sub	sp, #112	; 0x70
 8004cda:	af00      	add	r7, sp, #0
 8004cdc:	60f8      	str	r0, [r7, #12]
 8004cde:	60b9      	str	r1, [r7, #8]
 8004ce0:	603b      	str	r3, [r7, #0]
 8004ce2:	4613      	mov	r3, r2
 8004ce4:	71fb      	strb	r3, [r7, #7]
=======
<<<<<<< HEAD
 8004cc6:	b580      	push	{r7, lr}
 8004cc8:	b09c      	sub	sp, #112	; 0x70
 8004cca:	af00      	add	r7, sp, #0
 8004ccc:	60f8      	str	r0, [r7, #12]
 8004cce:	60b9      	str	r1, [r7, #8]
 8004cd0:	603b      	str	r3, [r7, #0]
 8004cd2:	4613      	mov	r3, r2
 8004cd4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cd6:	e0a7      	b.n	8004e28 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cd8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004cda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cde:	f000 80a3 	beq.w	8004e28 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ce2:	f7fc f915 	bl	8000f10 <HAL_GetTick>
 8004ce6:	4602      	mov	r2, r0
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	1ad3      	subs	r3, r2, r3
 8004cec:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004cee:	429a      	cmp	r2, r3
 8004cf0:	d302      	bcc.n	8004cf8 <UART_WaitOnFlagUntilTimeout+0x32>
 8004cf2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d13f      	bne.n	8004d78 <UART_WaitOnFlagUntilTimeout+0xb2>
=======
 8004c82:	b580      	push	{r7, lr}
 8004c84:	b09c      	sub	sp, #112	; 0x70
 8004c86:	af00      	add	r7, sp, #0
 8004c88:	60f8      	str	r0, [r7, #12]
 8004c8a:	60b9      	str	r1, [r7, #8]
 8004c8c:	603b      	str	r3, [r7, #0]
 8004c8e:	4613      	mov	r3, r2
 8004c90:	71fb      	strb	r3, [r7, #7]
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ce6:	e0a7      	b.n	8004e38 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ce8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004cea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cee:	f000 80a3 	beq.w	8004e38 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
<<<<<<< HEAD
 8004cf2:	f7fc f915 	bl	8000f20 <HAL_GetTick>
 8004cf6:	4602      	mov	r2, r0
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	1ad3      	subs	r3, r2, r3
 8004cfc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004cfe:	429a      	cmp	r2, r3
 8004d00:	d302      	bcc.n	8004d08 <UART_WaitOnFlagUntilTimeout+0x32>
 8004d02:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d13f      	bne.n	8004d88 <UART_WaitOnFlagUntilTimeout+0xb2>
=======
 8004c9e:	f7fc f92d 	bl	8000efc <HAL_GetTick>
 8004ca2:	4602      	mov	r2, r0
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	1ad3      	subs	r3, r2, r3
 8004ca8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004caa:	429a      	cmp	r2, r3
 8004cac:	d302      	bcc.n	8004cb4 <UART_WaitOnFlagUntilTimeout+0x32>
 8004cae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d13f      	bne.n	8004d34 <UART_WaitOnFlagUntilTimeout+0xb2>
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
<<<<<<< HEAD
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	653b      	str	r3, [r7, #80]	; 0x50
=======
<<<<<<< HEAD
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cfe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d00:	e853 3f00 	ldrex	r3, [r3]
 8004d04:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004d06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d08:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004d0c:	667b      	str	r3, [r7, #100]	; 0x64
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	461a      	mov	r2, r3
 8004d14:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004d16:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004d18:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d1a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004d1c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004d1e:	e841 2300 	strex	r3, r2, [r1]
 8004d22:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004d24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d1e6      	bne.n	8004cf8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	3308      	adds	r3, #8
 8004d30:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d34:	e853 3f00 	ldrex	r3, [r3]
 8004d38:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004d3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d3c:	f023 0301 	bic.w	r3, r3, #1
 8004d40:	663b      	str	r3, [r7, #96]	; 0x60
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	3308      	adds	r3, #8
 8004d48:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004d4a:	64ba      	str	r2, [r7, #72]	; 0x48
 8004d4c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d4e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004d50:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004d52:	e841 2300 	strex	r3, r2, [r1]
 8004d56:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004d58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d1e5      	bne.n	8004d2a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	2220      	movs	r2, #32
 8004d62:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	2220      	movs	r2, #32
 8004d68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8004d74:	2303      	movs	r3, #3
 8004d76:	e068      	b.n	8004e4a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f003 0304 	and.w	r3, r3, #4
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d050      	beq.n	8004e28 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	69db      	ldr	r3, [r3, #28]
 8004d8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d90:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d94:	d148      	bne.n	8004e28 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004d9e:	621a      	str	r2, [r3, #32]
=======
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	653b      	str	r3, [r7, #80]	; 0x50
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d10:	e853 3f00 	ldrex	r3, [r3]
 8004d14:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004d16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d18:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004d1c:	667b      	str	r3, [r7, #100]	; 0x64
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	461a      	mov	r2, r3
 8004d24:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004d26:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004d28:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d2a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004d2c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004d2e:	e841 2300 	strex	r3, r2, [r1]
 8004d32:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004d34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d1e6      	bne.n	8004d08 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	3308      	adds	r3, #8
 8004d40:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d44:	e853 3f00 	ldrex	r3, [r3]
 8004d48:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004d4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d4c:	f023 0301 	bic.w	r3, r3, #1
 8004d50:	663b      	str	r3, [r7, #96]	; 0x60
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	3308      	adds	r3, #8
 8004d58:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004d5a:	64ba      	str	r2, [r7, #72]	; 0x48
 8004d5c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d5e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004d60:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004d62:	e841 2300 	strex	r3, r2, [r1]
 8004d66:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004d68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d1e5      	bne.n	8004d3a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	2220      	movs	r2, #32
 8004d72:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	2220      	movs	r2, #32
 8004d78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8004d84:	2303      	movs	r3, #3
 8004d86:	e068      	b.n	8004e5a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f003 0304 	and.w	r3, r3, #4
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d050      	beq.n	8004e38 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	69db      	ldr	r3, [r3, #28]
 8004d9c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004da0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004da4:	d148      	bne.n	8004e38 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
<<<<<<< HEAD
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004dae:	621a      	str	r2, [r3, #32]
=======
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004d5a:	621a      	str	r2, [r3, #32]
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
<<<<<<< HEAD
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	62bb      	str	r3, [r7, #40]	; 0x28
=======
<<<<<<< HEAD
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004da8:	e853 3f00 	ldrex	r3, [r3]
 8004dac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004db4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	461a      	mov	r2, r3
 8004dbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dbe:	637b      	str	r3, [r7, #52]	; 0x34
 8004dc0:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dc2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004dc4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004dc6:	e841 2300 	strex	r3, r2, [r1]
 8004dca:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004dcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d1e6      	bne.n	8004da0 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	3308      	adds	r3, #8
 8004dd8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dda:	697b      	ldr	r3, [r7, #20]
 8004ddc:	e853 3f00 	ldrex	r3, [r3]
 8004de0:	613b      	str	r3, [r7, #16]
   return(result);
 8004de2:	693b      	ldr	r3, [r7, #16]
 8004de4:	f023 0301 	bic.w	r3, r3, #1
 8004de8:	66bb      	str	r3, [r7, #104]	; 0x68
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	3308      	adds	r3, #8
 8004df0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004df2:	623a      	str	r2, [r7, #32]
 8004df4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004df6:	69f9      	ldr	r1, [r7, #28]
 8004df8:	6a3a      	ldr	r2, [r7, #32]
 8004dfa:	e841 2300 	strex	r3, r2, [r1]
 8004dfe:	61bb      	str	r3, [r7, #24]
   return(result);
 8004e00:	69bb      	ldr	r3, [r7, #24]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d1e5      	bne.n	8004dd2 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	2220      	movs	r2, #32
 8004e0a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	2220      	movs	r2, #32
 8004e10:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	2220      	movs	r2, #32
 8004e18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004e24:	2303      	movs	r3, #3
 8004e26:	e010      	b.n	8004e4a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	69da      	ldr	r2, [r3, #28]
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	4013      	ands	r3, r2
 8004e32:	68ba      	ldr	r2, [r7, #8]
 8004e34:	429a      	cmp	r2, r3
 8004e36:	bf0c      	ite	eq
 8004e38:	2301      	moveq	r3, #1
 8004e3a:	2300      	movne	r3, #0
 8004e3c:	b2db      	uxtb	r3, r3
 8004e3e:	461a      	mov	r2, r3
 8004e40:	79fb      	ldrb	r3, [r7, #7]
 8004e42:	429a      	cmp	r2, r3
 8004e44:	f43f af48 	beq.w	8004cd8 <UART_WaitOnFlagUntilTimeout+0x12>
=======
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	62bb      	str	r3, [r7, #40]	; 0x28
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004db8:	e853 3f00 	ldrex	r3, [r3]
 8004dbc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004dc4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	461a      	mov	r2, r3
 8004dcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dce:	637b      	str	r3, [r7, #52]	; 0x34
 8004dd0:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dd2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004dd4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004dd6:	e841 2300 	strex	r3, r2, [r1]
 8004dda:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004ddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d1e6      	bne.n	8004db0 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	3308      	adds	r3, #8
 8004de8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dea:	697b      	ldr	r3, [r7, #20]
 8004dec:	e853 3f00 	ldrex	r3, [r3]
 8004df0:	613b      	str	r3, [r7, #16]
   return(result);
 8004df2:	693b      	ldr	r3, [r7, #16]
 8004df4:	f023 0301 	bic.w	r3, r3, #1
 8004df8:	66bb      	str	r3, [r7, #104]	; 0x68
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	3308      	adds	r3, #8
 8004e00:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004e02:	623a      	str	r2, [r7, #32]
 8004e04:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e06:	69f9      	ldr	r1, [r7, #28]
 8004e08:	6a3a      	ldr	r2, [r7, #32]
 8004e0a:	e841 2300 	strex	r3, r2, [r1]
 8004e0e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004e10:	69bb      	ldr	r3, [r7, #24]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d1e5      	bne.n	8004de2 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	2220      	movs	r2, #32
 8004e1a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	2220      	movs	r2, #32
 8004e20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	2220      	movs	r2, #32
 8004e28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004e34:	2303      	movs	r3, #3
 8004e36:	e010      	b.n	8004e5a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
<<<<<<< HEAD
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	69da      	ldr	r2, [r3, #28]
 8004e3e:	68bb      	ldr	r3, [r7, #8]
 8004e40:	4013      	ands	r3, r2
 8004e42:	68ba      	ldr	r2, [r7, #8]
 8004e44:	429a      	cmp	r2, r3
 8004e46:	bf0c      	ite	eq
 8004e48:	2301      	moveq	r3, #1
 8004e4a:	2300      	movne	r3, #0
 8004e4c:	b2db      	uxtb	r3, r3
 8004e4e:	461a      	mov	r2, r3
 8004e50:	79fb      	ldrb	r3, [r7, #7]
 8004e52:	429a      	cmp	r2, r3
 8004e54:	f43f af48 	beq.w	8004ce8 <UART_WaitOnFlagUntilTimeout+0x12>
=======
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	69da      	ldr	r2, [r3, #28]
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	4013      	ands	r3, r2
 8004dee:	68ba      	ldr	r2, [r7, #8]
 8004df0:	429a      	cmp	r2, r3
 8004df2:	bf0c      	ite	eq
 8004df4:	2301      	moveq	r3, #1
 8004df6:	2300      	movne	r3, #0
 8004df8:	b2db      	uxtb	r3, r3
 8004dfa:	461a      	mov	r2, r3
 8004dfc:	79fb      	ldrb	r3, [r7, #7]
 8004dfe:	429a      	cmp	r2, r3
 8004e00:	f43f af48 	beq.w	8004c94 <UART_WaitOnFlagUntilTimeout+0x12>
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
        }
      }
    }
  }
  return HAL_OK;
<<<<<<< HEAD
 8004e58:	2300      	movs	r3, #0
=======
<<<<<<< HEAD
 8004e48:	2300      	movs	r3, #0
}
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	3770      	adds	r7, #112	; 0x70
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}

08004e52 <UART_EndRxTransfer>:
=======
 8004e04:	2300      	movs	r3, #0
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
}
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	3770      	adds	r7, #112	; 0x70
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	bd80      	pop	{r7, pc}

<<<<<<< HEAD
08004e62 <UART_EndRxTransfer>:
=======
08004e0e <UART_EndRxTransfer>:
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8004e62:	b480      	push	{r7}
 8004e64:	b095      	sub	sp, #84	; 0x54
 8004e66:	af00      	add	r7, sp, #0
 8004e68:	6078      	str	r0, [r7, #4]
=======
<<<<<<< HEAD
 8004e52:	b480      	push	{r7}
 8004e54:	b095      	sub	sp, #84	; 0x54
 8004e56:	af00      	add	r7, sp, #0
 8004e58:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e62:	e853 3f00 	ldrex	r3, [r3]
 8004e66:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e6a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004e6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	461a      	mov	r2, r3
 8004e76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e78:	643b      	str	r3, [r7, #64]	; 0x40
 8004e7a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e7c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004e7e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004e80:	e841 2300 	strex	r3, r2, [r1]
 8004e84:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004e86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d1e6      	bne.n	8004e5a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	3308      	adds	r3, #8
 8004e92:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e94:	6a3b      	ldr	r3, [r7, #32]
 8004e96:	e853 3f00 	ldrex	r3, [r3]
 8004e9a:	61fb      	str	r3, [r7, #28]
   return(result);
 8004e9c:	69fb      	ldr	r3, [r7, #28]
 8004e9e:	f023 0301 	bic.w	r3, r3, #1
 8004ea2:	64bb      	str	r3, [r7, #72]	; 0x48
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	3308      	adds	r3, #8
 8004eaa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004eac:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004eae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eb0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004eb2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004eb4:	e841 2300 	strex	r3, r2, [r1]
 8004eb8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d1e5      	bne.n	8004e8c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ec4:	2b01      	cmp	r3, #1
 8004ec6:	d118      	bne.n	8004efa <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	e853 3f00 	ldrex	r3, [r3]
 8004ed4:	60bb      	str	r3, [r7, #8]
   return(result);
 8004ed6:	68bb      	ldr	r3, [r7, #8]
 8004ed8:	f023 0310 	bic.w	r3, r3, #16
 8004edc:	647b      	str	r3, [r7, #68]	; 0x44
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	461a      	mov	r2, r3
 8004ee4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ee6:	61bb      	str	r3, [r7, #24]
 8004ee8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eea:	6979      	ldr	r1, [r7, #20]
 8004eec:	69ba      	ldr	r2, [r7, #24]
 8004eee:	e841 2300 	strex	r3, r2, [r1]
 8004ef2:	613b      	str	r3, [r7, #16]
   return(result);
 8004ef4:	693b      	ldr	r3, [r7, #16]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d1e6      	bne.n	8004ec8 <UART_EndRxTransfer+0x76>
=======
 8004e0e:	b480      	push	{r7}
 8004e10:	b095      	sub	sp, #84	; 0x54
 8004e12:	af00      	add	r7, sp, #0
 8004e14:	6078      	str	r0, [r7, #4]
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e72:	e853 3f00 	ldrex	r3, [r3]
 8004e76:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e7a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004e7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	461a      	mov	r2, r3
 8004e86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e88:	643b      	str	r3, [r7, #64]	; 0x40
 8004e8a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e8c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004e8e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004e90:	e841 2300 	strex	r3, r2, [r1]
 8004e94:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004e96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d1e6      	bne.n	8004e6a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	3308      	adds	r3, #8
 8004ea2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ea4:	6a3b      	ldr	r3, [r7, #32]
 8004ea6:	e853 3f00 	ldrex	r3, [r3]
 8004eaa:	61fb      	str	r3, [r7, #28]
   return(result);
 8004eac:	69fb      	ldr	r3, [r7, #28]
 8004eae:	f023 0301 	bic.w	r3, r3, #1
 8004eb2:	64bb      	str	r3, [r7, #72]	; 0x48
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	3308      	adds	r3, #8
 8004eba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004ebc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004ebe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ec0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004ec2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ec4:	e841 2300 	strex	r3, r2, [r1]
 8004ec8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d1e5      	bne.n	8004e9c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ed4:	2b01      	cmp	r3, #1
 8004ed6:	d118      	bne.n	8004f0a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	e853 3f00 	ldrex	r3, [r3]
 8004ee4:	60bb      	str	r3, [r7, #8]
   return(result);
 8004ee6:	68bb      	ldr	r3, [r7, #8]
 8004ee8:	f023 0310 	bic.w	r3, r3, #16
 8004eec:	647b      	str	r3, [r7, #68]	; 0x44
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	461a      	mov	r2, r3
 8004ef4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ef6:	61bb      	str	r3, [r7, #24]
 8004ef8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004efa:	6979      	ldr	r1, [r7, #20]
 8004efc:	69ba      	ldr	r2, [r7, #24]
 8004efe:	e841 2300 	strex	r3, r2, [r1]
 8004f02:	613b      	str	r3, [r7, #16]
   return(result);
<<<<<<< HEAD
 8004f04:	693b      	ldr	r3, [r7, #16]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d1e6      	bne.n	8004ed8 <UART_EndRxTransfer+0x76>
=======
 8004eb0:	693b      	ldr	r3, [r7, #16]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d1e6      	bne.n	8004e84 <UART_EndRxTransfer+0x76>
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
<<<<<<< HEAD
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2220      	movs	r2, #32
 8004f0e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
=======
<<<<<<< HEAD
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2220      	movs	r2, #32
 8004efe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2200      	movs	r2, #0
 8004f06:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004f0e:	bf00      	nop
 8004f10:	3754      	adds	r7, #84	; 0x54
 8004f12:	46bd      	mov	sp, r7
 8004f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f18:	4770      	bx	lr

08004f1a <UART_DMAAbortOnError>:
=======
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2220      	movs	r2, #32
 8004eba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2200      	movs	r2, #0
 8004f16:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004f1e:	bf00      	nop
 8004f20:	3754      	adds	r7, #84	; 0x54
 8004f22:	46bd      	mov	sp, r7
 8004f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f28:	4770      	bx	lr

<<<<<<< HEAD
08004f2a <UART_DMAAbortOnError>:
=======
08004ed6 <UART_DMAAbortOnError>:
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 8004f2a:	b580      	push	{r7, lr}
 8004f2c:	b084      	sub	sp, #16
 8004f2e:	af00      	add	r7, sp, #0
 8004f30:	6078      	str	r0, [r7, #4]
=======
<<<<<<< HEAD
 8004f1a:	b580      	push	{r7, lr}
 8004f1c:	b084      	sub	sp, #16
 8004f1e:	af00      	add	r7, sp, #0
 8004f20:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f26:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	2200      	movs	r2, #0
 8004f34:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
=======
 8004ed6:	b580      	push	{r7, lr}
 8004ed8:	b084      	sub	sp, #16
 8004eda:	af00      	add	r7, sp, #0
 8004edc:	6078      	str	r0, [r7, #4]
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f36:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
<<<<<<< HEAD
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	2200      	movs	r2, #0
 8004f44:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
=======
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
<<<<<<< HEAD
 8004f48:	68f8      	ldr	r0, [r7, #12]
 8004f4a:	f7ff fb71 	bl	8004630 <HAL_UART_ErrorCallback>
=======
<<<<<<< HEAD
 8004f38:	68f8      	ldr	r0, [r7, #12]
 8004f3a:	f7ff fb71 	bl	8004620 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004f3e:	bf00      	nop
 8004f40:	3710      	adds	r7, #16
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd80      	pop	{r7, pc}

08004f46 <UART_EndTransmit_IT>:
=======
 8004ef4:	68f8      	ldr	r0, [r7, #12]
 8004ef6:	f7ff fb71 	bl	80045dc <HAL_UART_ErrorCallback>
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004f4e:	bf00      	nop
 8004f50:	3710      	adds	r7, #16
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bd80      	pop	{r7, pc}

<<<<<<< HEAD
08004f56 <UART_EndTransmit_IT>:
=======
08004f02 <UART_EndTransmit_IT>:
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8004f56:	b580      	push	{r7, lr}
 8004f58:	b088      	sub	sp, #32
 8004f5a:	af00      	add	r7, sp, #0
 8004f5c:	6078      	str	r0, [r7, #4]
=======
<<<<<<< HEAD
 8004f46:	b580      	push	{r7, lr}
 8004f48:	b088      	sub	sp, #32
 8004f4a:	af00      	add	r7, sp, #0
 8004f4c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	e853 3f00 	ldrex	r3, [r3]
 8004f5a:	60bb      	str	r3, [r7, #8]
   return(result);
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f62:	61fb      	str	r3, [r7, #28]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	461a      	mov	r2, r3
 8004f6a:	69fb      	ldr	r3, [r7, #28]
 8004f6c:	61bb      	str	r3, [r7, #24]
 8004f6e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f70:	6979      	ldr	r1, [r7, #20]
 8004f72:	69ba      	ldr	r2, [r7, #24]
 8004f74:	e841 2300 	strex	r3, r2, [r1]
 8004f78:	613b      	str	r3, [r7, #16]
   return(result);
 8004f7a:	693b      	ldr	r3, [r7, #16]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d1e6      	bne.n	8004f4e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2220      	movs	r2, #32
 8004f84:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	66da      	str	r2, [r3, #108]	; 0x6c
=======
 8004f02:	b580      	push	{r7, lr}
 8004f04:	b088      	sub	sp, #32
 8004f06:	af00      	add	r7, sp, #0
 8004f08:	6078      	str	r0, [r7, #4]
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	e853 3f00 	ldrex	r3, [r3]
 8004f6a:	60bb      	str	r3, [r7, #8]
   return(result);
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f72:	61fb      	str	r3, [r7, #28]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	461a      	mov	r2, r3
 8004f7a:	69fb      	ldr	r3, [r7, #28]
 8004f7c:	61bb      	str	r3, [r7, #24]
 8004f7e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f80:	6979      	ldr	r1, [r7, #20]
 8004f82:	69ba      	ldr	r2, [r7, #24]
 8004f84:	e841 2300 	strex	r3, r2, [r1]
 8004f88:	613b      	str	r3, [r7, #16]
   return(result);
 8004f8a:	693b      	ldr	r3, [r7, #16]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d1e6      	bne.n	8004f5e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2220      	movs	r2, #32
 8004f94:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
<<<<<<< HEAD
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2200      	movs	r2, #0
 8004f9a:	66da      	str	r2, [r3, #108]	; 0x6c
=======
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2200      	movs	r2, #0
 8004f46:	66da      	str	r2, [r3, #108]	; 0x6c
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
<<<<<<< HEAD
 8004f9c:	6878      	ldr	r0, [r7, #4]
 8004f9e:	f7ff fb3d 	bl	800461c <HAL_UART_TxCpltCallback>
=======
<<<<<<< HEAD
 8004f8c:	6878      	ldr	r0, [r7, #4]
 8004f8e:	f7ff fb3d 	bl	800460c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004f92:	bf00      	nop
 8004f94:	3720      	adds	r7, #32
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bd80      	pop	{r7, pc}

08004f9a <memset>:
 8004f9a:	4402      	add	r2, r0
 8004f9c:	4603      	mov	r3, r0
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d100      	bne.n	8004fa4 <memset+0xa>
 8004fa2:	4770      	bx	lr
 8004fa4:	f803 1b01 	strb.w	r1, [r3], #1
 8004fa8:	e7f9      	b.n	8004f9e <memset+0x4>
	...

08004fac <__libc_init_array>:
 8004fac:	b570      	push	{r4, r5, r6, lr}
 8004fae:	4d0d      	ldr	r5, [pc, #52]	; (8004fe4 <__libc_init_array+0x38>)
 8004fb0:	4c0d      	ldr	r4, [pc, #52]	; (8004fe8 <__libc_init_array+0x3c>)
 8004fb2:	1b64      	subs	r4, r4, r5
 8004fb4:	10a4      	asrs	r4, r4, #2
 8004fb6:	2600      	movs	r6, #0
 8004fb8:	42a6      	cmp	r6, r4
 8004fba:	d109      	bne.n	8004fd0 <__libc_init_array+0x24>
 8004fbc:	4d0b      	ldr	r5, [pc, #44]	; (8004fec <__libc_init_array+0x40>)
 8004fbe:	4c0c      	ldr	r4, [pc, #48]	; (8004ff0 <__libc_init_array+0x44>)
 8004fc0:	f000 f818 	bl	8004ff4 <_init>
 8004fc4:	1b64      	subs	r4, r4, r5
 8004fc6:	10a4      	asrs	r4, r4, #2
 8004fc8:	2600      	movs	r6, #0
 8004fca:	42a6      	cmp	r6, r4
 8004fcc:	d105      	bne.n	8004fda <__libc_init_array+0x2e>
 8004fce:	bd70      	pop	{r4, r5, r6, pc}
 8004fd0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fd4:	4798      	blx	r3
 8004fd6:	3601      	adds	r6, #1
 8004fd8:	e7ee      	b.n	8004fb8 <__libc_init_array+0xc>
 8004fda:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fde:	4798      	blx	r3
 8004fe0:	3601      	adds	r6, #1
 8004fe2:	e7f2      	b.n	8004fca <__libc_init_array+0x1e>
 8004fe4:	08005034 	.word	0x08005034
 8004fe8:	08005034 	.word	0x08005034
 8004fec:	08005034 	.word	0x08005034
 8004ff0:	08005038 	.word	0x08005038

08004ff4 <_init>:
 8004ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ff6:	bf00      	nop
 8004ff8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ffa:	bc08      	pop	{r3}
 8004ffc:	469e      	mov	lr, r3
 8004ffe:	4770      	bx	lr

08005000 <_fini>:
 8005000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005002:	bf00      	nop
 8005004:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005006:	bc08      	pop	{r3}
 8005008:	469e      	mov	lr, r3
 800500a:	4770      	bx	lr
=======
 8004f48:	6878      	ldr	r0, [r7, #4]
 8004f4a:	f7ff fb3d 	bl	80045c8 <HAL_UART_TxCpltCallback>
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004fa2:	bf00      	nop
 8004fa4:	3720      	adds	r7, #32
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bd80      	pop	{r7, pc}

08004faa <memset>:
 8004faa:	4402      	add	r2, r0
 8004fac:	4603      	mov	r3, r0
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d100      	bne.n	8004fb4 <memset+0xa>
 8004fb2:	4770      	bx	lr
 8004fb4:	f803 1b01 	strb.w	r1, [r3], #1
 8004fb8:	e7f9      	b.n	8004fae <memset+0x4>
	...

08004fbc <__libc_init_array>:
 8004fbc:	b570      	push	{r4, r5, r6, lr}
 8004fbe:	4d0d      	ldr	r5, [pc, #52]	; (8004ff4 <__libc_init_array+0x38>)
 8004fc0:	4c0d      	ldr	r4, [pc, #52]	; (8004ff8 <__libc_init_array+0x3c>)
 8004fc2:	1b64      	subs	r4, r4, r5
 8004fc4:	10a4      	asrs	r4, r4, #2
 8004fc6:	2600      	movs	r6, #0
 8004fc8:	42a6      	cmp	r6, r4
 8004fca:	d109      	bne.n	8004fe0 <__libc_init_array+0x24>
 8004fcc:	4d0b      	ldr	r5, [pc, #44]	; (8004ffc <__libc_init_array+0x40>)
 8004fce:	4c0c      	ldr	r4, [pc, #48]	; (8005000 <__libc_init_array+0x44>)
 8004fd0:	f000 f818 	bl	8005004 <_init>
 8004fd4:	1b64      	subs	r4, r4, r5
 8004fd6:	10a4      	asrs	r4, r4, #2
 8004fd8:	2600      	movs	r6, #0
 8004fda:	42a6      	cmp	r6, r4
 8004fdc:	d105      	bne.n	8004fea <__libc_init_array+0x2e>
 8004fde:	bd70      	pop	{r4, r5, r6, pc}
 8004fe0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fe4:	4798      	blx	r3
 8004fe6:	3601      	adds	r6, #1
 8004fe8:	e7ee      	b.n	8004fc8 <__libc_init_array+0xc>
 8004fea:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fee:	4798      	blx	r3
 8004ff0:	3601      	adds	r6, #1
 8004ff2:	e7f2      	b.n	8004fda <__libc_init_array+0x1e>
 8004ff4:	08005044 	.word	0x08005044
 8004ff8:	08005044 	.word	0x08005044
 8004ffc:	08005044 	.word	0x08005044
 8005000:	08005048 	.word	0x08005048

08005004 <_init>:
 8005004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005006:	bf00      	nop
 8005008:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800500a:	bc08      	pop	{r3}
 800500c:	469e      	mov	lr, r3
 800500e:	4770      	bx	lr

<<<<<<< HEAD
08005010 <_fini>:
 8005010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005012:	bf00      	nop
 8005014:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005016:	bc08      	pop	{r3}
 8005018:	469e      	mov	lr, r3
 800501a:	4770      	bx	lr
=======
08004fbc <_fini>:
 8004fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fbe:	bf00      	nop
 8004fc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fc2:	bc08      	pop	{r3}
 8004fc4:	469e      	mov	lr, r3
 8004fc6:	4770      	bx	lr
>>>>>>> ca186cf2a1434c7b84e07f79659d574897666919
>>>>>>> 83c11cccf6114a03ca339b6c91d44ed2564a4637
